<?xml version="1.0" encoding="UTF-8"?>
<REPOSITORY
   COMMENTS="SBL_CCS3.0-27"
   NAME="Siebel Repository"
   UPDATED="08/29/2016 06:45:08"
   UPDATED_BY="SADMIN"
   CREATED="08/29/2016 06:19:00"
   CREATED_BY="SADMIN"
   FIO_PLACEHOLDER_FIO="TRUE">
	<PROJECT
	   ALLOW_OBJECT_LOCKING="Y"
	   COMMENTS="VF_Utility"
	   INACTIVE="N"
	   LOCKED="N"
	   NAME="VF_Utility"
	   UI_FREEZE="N"
	   UPDATED="11/11/2016 11:20:08"
	   UPDATED_BY="ACN_SENGARR"
	   CREATED="04/04/2011 16:49:12"
	   CREATED_BY="SADMIN"
	   FIO_PLACEHOLDER_FIO="TRUE">
		<BUSINESS_SERVICE
		   CACHE="N"
		   CLASS="CSSService"
		   EXTERNAL_USE="Y"
		   HIDDEN="N"
		   INACTIVE="N"
		   NAME="VF_Utility_BS"
		   OBJECT_LOCKED="N"
		   SERVER_ENABLED="Y"
		   STATE_MANAGEMENT_TYPE="Stateful"
		   WEB_SERVICE_ENABLED="N"
		   UPDATED="11/11/2016 11:20:07"
		   UPDATED_BY="ACN_SENGARR"
		   CREATED="04/28/2011 11:48:44"
		   CREATED_BY="SADMIN">
			<BUSINESS_SERVICE_LOCALE
			   APPLICATION_CODE="STD"
			   DISPLAY_NAME="VF_Utility_BS"
			   INACTIVE="N"
			   LANGUAGE_CODE="ENU"
			   NAME="ENU-STD"
			   TRANSLATE="Y"
			   UPDATED="04/28/2011 11:49:13"
			   UPDATED_BY="SADMIN"
			   CREATED="04/28/2011 11:49:13"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_LOCALE>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="RITESH"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="ActiveAssetAcc"
			   UPDATED="07/08/2015 18:21:02"
			   UPDATED_BY="SADMIN"
			   CREATED="07/08/2015 18:21:02"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="AccntId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="07/08/2015 18:21:02"
				   UPDATED_BY="SADMIN"
				   CREATED="07/08/2015 18:21:02"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="AddAccount"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="07/08/2015 18:21:02"
				   UPDATED_BY="SADMIN"
				   CREATED="07/08/2015 18:21:02"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="ActiveAssetAcc"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="07/08/2015 18:21:02"
				   UPDATED_BY="SADMIN"
				   CREATED="07/08/2015 18:21:02"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="AddNewLine"
			   UPDATED="02/09/2012 08:55:20"
			   UPDATED_BY="SADMIN"
			   CREATED="04/28/2011 11:49:43"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="String"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input / Output"
				   UPDATED="02/09/2012 08:55:20"
				   UPDATED_BY="SADMIN"
				   CREATED="02/09/2012 08:55:20"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="AddNewLine"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="04/28/2011 11:49:48"
				   UPDATED_BY="SADMIN"
				   CREATED="04/28/2011 11:49:48"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="AddOrderItem"
			   UPDATED="07/07/2011 11:40:10"
			   UPDATED_BY="SADMIN"
			   CREATED="07/07/2011 11:22:53"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Name"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="07/07/2011 11:40:07"
				   UPDATED_BY="SADMIN"
				   CREATED="07/07/2011 11:23:24"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderItemId"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="07/07/2011 11:40:07"
				   UPDATED_BY="SADMIN"
				   CREATED="07/07/2011 11:23:51"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Part#"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="07/07/2011 11:40:07"
				   UPDATED_BY="SADMIN"
				   CREATED="07/07/2011 11:38:22"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ProductId"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="07/07/2011 11:40:10"
				   UPDATED_BY="SADMIN"
				   CREATED="07/07/2011 11:38:46"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Result"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="07/07/2011 11:39:08"
				   UPDATED_BY="SADMIN"
				   CREATED="07/07/2011 11:39:08"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="RootOrderItemId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="07/07/2011 11:39:35"
				   UPDATED_BY="SADMIN"
				   CREATED="07/07/2011 11:39:35"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="AddOrderItem"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="07/07/2011 11:23:01"
				   UPDATED_BY="SADMIN"
				   CREATED="07/07/2011 11:23:01"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="AddProductInquireAll"
			   UPDATED="12/05/2012 07:03:14"
			   UPDATED_BY="SADMIN"
			   CREATED="10/03/2011 05:41:09"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ListStore"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/05/2012 07:03:14"
				   UPDATED_BY="SADMIN"
				   CREATED="12/05/2012 07:03:14"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ListValue"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/03/2011 05:41:56"
				   UPDATED_BY="SADMIN"
				   CREATED="10/03/2011 05:41:56"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="Hierarchy"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="SiebelMessage"
				   OPTIONAL="N"
				   STORAGE_TYPE="Hierarchy"
				   TYPE="Input / Output"
				   UPDATED="10/03/2011 05:42:19"
				   UPDATED_BY="SADMIN"
				   CREATED="10/03/2011 05:42:19"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="AddProductInquireAll"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="10/03/2011 05:41:46"
				   UPDATED_BY="SADMIN"
				   CREATED="10/03/2011 05:41:46"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="AddProductPortIn"
			   UPDATED="05/22/2013 07:40:34"
			   UPDATED_BY="SADMIN"
			   CREATED="05/22/2013 07:40:34"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Error Code"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="05/22/2013 07:40:34"
				   UPDATED_BY="SADMIN"
				   CREATED="05/22/2013 07:40:34"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Error Message"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="05/22/2013 07:40:34"
				   UPDATED_BY="SADMIN"
				   CREATED="05/22/2013 07:40:34"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ListMSISDN"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/22/2013 07:40:34"
				   UPDATED_BY="SADMIN"
				   CREATED="05/22/2013 07:40:34"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ListPac"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/22/2013 07:40:34"
				   UPDATED_BY="SADMIN"
				   CREATED="05/22/2013 07:40:34"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ListPortDt"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/22/2013 07:40:34"
				   UPDATED_BY="SADMIN"
				   CREATED="05/22/2013 07:40:34"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="Hierarchy"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="SiebelMessage"
				   OPTIONAL="N"
				   STORAGE_TYPE="Hierarchy"
				   TYPE="Input / Output"
				   UPDATED="05/22/2013 07:40:34"
				   UPDATED_BY="SADMIN"
				   CREATED="05/22/2013 07:40:34"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="AddProductPortIn"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="05/22/2013 07:40:34"
				   UPDATED_BY="SADMIN"
				   CREATED="05/22/2013 07:40:34"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="AddPropSet"
			   UPDATED="12/06/2011 16:47:49"
			   UPDATED_BY="SADMIN"
			   CREATED="12/06/2011 16:47:48"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ParentPropName"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/06/2011 16:47:48"
				   UPDATED_BY="SADMIN"
				   CREATED="12/06/2011 16:47:48"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="PropName"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/06/2011 16:47:49"
				   UPDATED_BY="SADMIN"
				   CREATED="12/06/2011 16:47:49"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="Hierarchy"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="SiebelMessage"
				   OPTIONAL="N"
				   STORAGE_TYPE="Hierarchy"
				   TYPE="Input / Output"
				   UPDATED="12/06/2011 16:47:49"
				   UPDATED_BY="SADMIN"
				   CREATED="12/06/2011 16:47:49"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="AddPropSet"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="12/06/2011 16:47:49"
				   UPDATED_BY="SADMIN"
				   CREATED="12/06/2011 16:47:49"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="AddQuoteItem"
			   UPDATED="03/07/2012 10:27:19"
			   UPDATED_BY="SADMIN"
			   CREATED="03/07/2012 10:26:43"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Name"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="03/07/2012 10:26:43"
				   UPDATED_BY="SADMIN"
				   CREATED="03/07/2012 10:26:43"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Part#"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="03/07/2012 10:26:43"
				   UPDATED_BY="SADMIN"
				   CREATED="03/07/2012 10:26:43"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ProductId"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="03/07/2012 10:26:43"
				   UPDATED_BY="SADMIN"
				   CREATED="03/07/2012 10:26:43"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="QuoteItemId"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="03/07/2012 10:27:11"
				   UPDATED_BY="SADMIN"
				   CREATED="03/07/2012 10:26:43"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Result"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="03/07/2012 10:26:44"
				   UPDATED_BY="SADMIN"
				   CREATED="03/07/2012 10:26:44"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="RootQuoteItemId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="03/07/2012 10:27:19"
				   UPDATED_BY="SADMIN"
				   CREATED="03/07/2012 10:26:44"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="AddQuoteItem"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="03/07/2012 10:27:00"
				   UPDATED_BY="SADMIN"
				   CREATED="03/07/2012 10:26:44"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="AddWorkingDays"
			   UPDATED="09/03/2013 14:25:30"
			   UPDATED_BY="SADMIN"
			   CREATED="09/03/2013 14:25:30"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="NumberOfDays"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="09/03/2013 14:25:30"
				   UPDATED_BY="SADMIN"
				   CREATED="09/03/2013 14:25:30"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OutputDate"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="09/03/2013 14:25:30"
				   UPDATED_BY="SADMIN"
				   CREATED="09/03/2013 14:25:30"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="AddWorkingDays"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="09/03/2013 14:25:30"
				   UPDATED_BY="SADMIN"
				   CREATED="09/03/2013 14:25:30"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="GPG:[22-Feb-14] BIP porting"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CalcDueDate"
			   UPDATED="02/27/2014 04:21:15"
			   UPDATED_BY="SADMIN"
			   CREATED="02/27/2014 04:21:15"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="DueDate"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="02/27/2014 04:21:15"
				   UPDATED_BY="SADMIN"
				   CREATED="02/27/2014 04:21:15"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="RowId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="02/27/2014 04:21:15"
				   UPDATED_BY="SADMIN"
				   CREATED="02/27/2014 04:21:15"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CalcDueDate"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="02/27/2014 04:21:15"
				   UPDATED_BY="SADMIN"
				   CREATED="02/27/2014 04:21:15"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CalculateDiscountWU"
			   UPDATED="07/09/2013 07:12:36"
			   UPDATED_BY="SADMIN"
			   CREATED="05/22/2013 07:40:34"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="AttributeValMonthsD1"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/22/2013 07:40:34"
				   UPDATED_BY="SADMIN"
				   CREATED="05/22/2013 07:40:34"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ChargeAmountUpgrade"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="05/22/2013 07:40:34"
				   UPDATED_BY="SADMIN"
				   CREATED="05/22/2013 07:40:34"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="DisconnectionMonths"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/22/2013 07:40:34"
				   UPDATED_BY="SADMIN"
				   CREATED="05/22/2013 07:40:34"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="DiscountAmountD1"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/22/2013 07:40:34"
				   UPDATED_BY="SADMIN"
				   CREATED="05/22/2013 07:40:34"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="DiscountTypeD1"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/22/2013 07:40:34"
				   UPDATED_BY="SADMIN"
				   CREATED="05/22/2013 07:40:34"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="LineRentalCostD1"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/30/2013 11:32:37"
				   UPDATED_BY="SADMIN"
				   CREATED="05/30/2013 11:32:37"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Promotion"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="07/09/2013 07:12:36"
				   UPDATED_BY="SADMIN"
				   CREATED="07/09/2013 07:12:36"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CalculateDiscountWU"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="05/22/2013 07:40:34"
				   UPDATED_BY="SADMIN"
				   CREATED="05/22/2013 07:40:34"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CalculateMonths"
			   UPDATED="07/09/2013 07:12:36"
			   UPDATED_BY="SADMIN"
			   CREATED="05/22/2013 07:40:34"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="Date"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="AgreementEndDate1"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/31/2013 05:57:28"
				   UPDATED_BY="SADMIN"
				   CREATED="05/31/2013 05:57:28"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="AttributeValMonthsD1"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="07/09/2013 07:12:36"
				   UPDATED_BY="SADMIN"
				   CREATED="07/09/2013 07:12:36"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="CalculateDiscountYN"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="05/22/2013 07:40:34"
				   UPDATED_BY="SADMIN"
				   CREATED="05/22/2013 07:40:34"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="Number"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="DisconnectionMonths"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="05/22/2013 07:40:34"
				   UPDATED_BY="SADMIN"
				   CREATED="05/22/2013 07:40:34"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="Date"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="DueDate"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/22/2013 07:40:34"
				   UPDATED_BY="SADMIN"
				   CREATED="05/22/2013 07:40:34"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Promotion"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/31/2013 05:57:28"
				   UPDATED_BY="SADMIN"
				   CREATED="05/31/2013 05:57:28"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="Date"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="UpgradeDate"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/22/2013 07:40:34"
				   UPDATED_BY="SADMIN"
				   CREATED="05/22/2013 07:40:34"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CalculateMonths"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="05/22/2013 07:40:34"
				   UPDATED_BY="SADMIN"
				   CREATED="05/22/2013 07:40:34"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckOriginalOrder"
			   UPDATED="10/20/2011 05:17:48"
			   UPDATED_BY="SADMIN"
			   CREATED="10/20/2011 05:17:27"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="AssetId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/20/2011 05:17:34"
				   UPDATED_BY="SADMIN"
				   CREATED="10/20/2011 05:17:34"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Result"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="10/20/2011 05:17:38"
				   UPDATED_BY="SADMIN"
				   CREATED="10/20/2011 05:17:38"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CheckOriginalOrder"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="10/20/2011 05:17:31"
				   UPDATED_BY="SADMIN"
				   CREATED="10/20/2011 05:17:31"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="QC:64256|RITESH"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckValidComms"
			   UPDATED="12/11/2015 15:44:32"
			   UPDATED_BY="SADMIN"
			   CREATED="12/11/2015 15:44:31"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="AcntId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/11/2015 15:44:31"
				   UPDATED_BY="SADMIN"
				   CREATED="12/11/2015 15:44:31"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="SerialNum"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/11/2015 15:44:31"
				   UPDATED_BY="SADMIN"
				   CREATED="12/11/2015 15:44:31"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ValidFlg"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="12/11/2015 15:44:31"
				   UPDATED_BY="SADMIN"
				   CREATED="12/11/2015 15:44:31"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CheckValidComms"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="12/11/2015 15:44:32"
				   UPDATED_BY="SADMIN"
				   CREATED="12/11/2015 15:44:32"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="GPG: [8-Dec-14] New method added for CR 65405"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="ConcatFixedBIP"
			   UPDATED="12/08/2014 17:15:15"
			   UPDATED_BY="SADMIN"
			   CREATED="12/08/2014 17:15:15"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Id"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/08/2014 17:15:15"
				   UPDATED_BY="SADMIN"
				   CREATED="12/08/2014 17:15:15"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OHId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/08/2014 17:15:15"
				   UPDATED_BY="SADMIN"
				   CREATED="12/08/2014 17:15:15"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Ret"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="12/08/2014 17:15:15"
				   UPDATED_BY="SADMIN"
				   CREATED="12/08/2014 17:15:15"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Type"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/08/2014 17:15:15"
				   UPDATED_BY="SADMIN"
				   CREATED="12/08/2014 17:15:15"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="ConcatFixedBIP"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="12/08/2014 17:15:15"
				   UPDATED_BY="SADMIN"
				   CREATED="12/08/2014 17:15:15"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="GPG:[22-Feb-14] BIP porting"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="ConcatProductBIP"
			   UPDATED="02/27/2014 04:21:15"
			   UPDATED_BY="SADMIN"
			   CREATED="02/27/2014 04:21:15"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Id"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="02/27/2014 04:21:15"
				   UPDATED_BY="SADMIN"
				   CREATED="02/27/2014 04:21:15"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OHId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="02/27/2014 04:21:15"
				   UPDATED_BY="SADMIN"
				   CREATED="02/27/2014 04:21:15"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Ret"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="02/27/2014 04:21:15"
				   UPDATED_BY="SADMIN"
				   CREATED="02/27/2014 04:21:15"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Type"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="02/27/2014 04:21:15"
				   UPDATED_BY="SADMIN"
				   CREATED="02/27/2014 04:21:15"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="ConcatProductBIP"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="02/27/2014 04:21:15"
				   UPDATED_BY="SADMIN"
				   CREATED="02/27/2014 04:21:15"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="GPG:[12/16/2013] Added for defect 28016"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="ConvertDate"
			   UPDATED="12/23/2013 08:17:17"
			   UPDATED_BY="SADMIN"
			   CREATED="12/23/2013 08:17:17"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Duration"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input / Output"
				   UPDATED="12/23/2013 08:17:17"
				   UPDATED_BY="SADMIN"
				   CREATED="12/23/2013 08:17:17"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="DurationCalc1"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="12/23/2013 08:17:17"
				   UPDATED_BY="SADMIN"
				   CREATED="12/23/2013 08:17:17"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="ConvertDate"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="12/23/2013 08:17:17"
				   UPDATED_BY="SADMIN"
				   CREATED="12/23/2013 08:17:17"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="ConvertDateFormat"
			   UPDATED="03/16/2016 16:55:27"
			   UPDATED_BY="SADMIN"
			   CREATED="03/16/2016 16:55:27"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Ndate"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="03/16/2016 16:55:27"
				   UPDATED_BY="SADMIN"
				   CREATED="03/16/2016 16:55:27"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Ndate1"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="03/16/2016 16:55:27"
				   UPDATED_BY="SADMIN"
				   CREATED="03/16/2016 16:55:27"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="ConvertDateFormat"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="03/16/2016 16:55:27"
				   UPDATED_BY="SADMIN"
				   CREATED="03/16/2016 16:55:27"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CountRecordsOnBC"
			   UPDATED="12/09/2012 06:27:49"
			   UPDATED_BY="SADMIN"
			   CREATED="11/27/2012 17:05:40"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="BusinessComponent"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/27/2012 17:05:40"
				   UPDATED_BY="SADMIN"
				   CREATED="11/27/2012 17:05:40"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="BusinessComponent"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="11/27/2012 17:05:40"
					   UPDATED_BY="SADMIN"
					   CREATED="11/27/2012 17:05:40"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="BusinessObject"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/27/2012 17:05:40"
				   UPDATED_BY="SADMIN"
				   CREATED="11/27/2012 17:05:40"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="BusinessObject"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="11/27/2012 17:05:40"
					   UPDATED_BY="SADMIN"
					   CREATED="11/27/2012 17:05:40"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Custom Error"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="11/27/2012 17:05:40"
				   UPDATED_BY="SADMIN"
				   CREATED="11/27/2012 17:05:40"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="NumOfRecords"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="11/27/2012 17:05:40"
				   UPDATED_BY="SADMIN"
				   CREATED="11/27/2012 17:05:40"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="SearchExpr"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/27/2012 17:05:40"
				   UPDATED_BY="SADMIN"
				   CREATED="11/27/2012 17:05:40"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="SearchExpr"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="11/27/2012 17:05:40"
					   UPDATED_BY="SADMIN"
					   CREATED="11/27/2012 17:05:40"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CountRecordsOnBC"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="11/27/2012 17:05:40"
				   UPDATED_BY="SADMIN"
				   CREATED="11/27/2012 17:05:40"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CreateAccount"
			   UPDATED="03/22/2012 16:02:19"
			   UPDATED_BY="SADMIN"
			   CREATED="03/22/2012 16:02:19"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="AccountId"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="03/22/2012 16:02:19"
				   UPDATED_BY="SADMIN"
				   CREATED="03/22/2012 16:02:19"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="BillingAccountId"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="03/22/2012 16:02:19"
				   UPDATED_BY="SADMIN"
				   CREATED="03/22/2012 16:02:19"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CreateAccount"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="03/22/2012 16:02:19"
				   UPDATED_BY="SADMIN"
				   CREATED="03/22/2012 16:02:19"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CreateDateRecurring"
			   UPDATED="07/09/2013 08:05:18"
			   UPDATED_BY="SADMIN"
			   CREATED="07/09/2013 08:05:18"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="effectiveDate"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="07/09/2013 08:05:18"
				   UPDATED_BY="SADMIN"
				   CREATED="07/09/2013 08:05:18"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CreateDateRecurring"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="07/09/2013 08:05:18"
				   UPDATED_BY="SADMIN"
				   CREATED="07/09/2013 08:05:18"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="[AK][CR87644][21/09/2015][R15.2.3][Created]"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CreateLineItemDelayReason"
			   UPDATED="03/16/2016 16:55:27"
			   UPDATED_BY="SADMIN"
			   CREATED="03/16/2016 16:55:27"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Id"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="03/16/2016 16:55:27"
				   UPDATED_BY="SADMIN"
				   CREATED="03/16/2016 16:55:27"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Status Context"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="03/16/2016 16:55:27"
				   UPDATED_BY="SADMIN"
				   CREATED="03/16/2016 16:55:27"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CreateLineItemDelayReason"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="03/16/2016 16:55:27"
				   UPDATED_BY="SADMIN"
				   CREATED="03/16/2016 16:55:27"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="Create_SR_TT"
			   UPDATED="09/09/2011 13:22:50"
			   UPDATED_BY="SADMIN"
			   CREATED="06/30/2011 13:53:15"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="AccountId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="09/09/2011 13:22:50"
				   UPDATED_BY="SADMIN"
				   CREATED="06/30/2011 13:55:05"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ContactId"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="07/01/2011 11:52:58"
				   UPDATED_BY="SADMIN"
				   CREATED="07/01/2011 11:52:58"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ErrorCode"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="06/30/2011 13:53:38"
				   UPDATED_BY="SADMIN"
				   CREATED="06/30/2011 13:53:38"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="SR Id"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="09/09/2011 13:22:50"
				   UPDATED_BY="SADMIN"
				   CREATED="09/09/2011 13:22:50"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="Create_SR_TT"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="06/30/2011 13:53:30"
				   UPDATED_BY="SADMIN"
				   CREATED="06/30/2011 13:53:30"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="GPG [19-Aug-14]: Added for CR 57722"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="DeviceValueBIP"
			   UPDATED="09/09/2014 20:38:04"
			   UPDATED_BY="SADMIN"
			   CREATED="09/09/2014 20:38:04"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Id"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="09/09/2014 20:38:04"
				   UPDATED_BY="SADMIN"
				   CREATED="09/09/2014 20:38:04"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OHId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="09/09/2014 20:38:04"
				   UPDATED_BY="SADMIN"
				   CREATED="09/09/2014 20:38:04"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Ret"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="09/09/2014 20:38:04"
				   UPDATED_BY="SADMIN"
				   CREATED="09/09/2014 20:38:04"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="DeviceValueBIP"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="09/09/2014 20:38:04"
				   UPDATED_BY="SADMIN"
				   CREATED="09/09/2014 20:38:04"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="ExportBillReadyNotification"
			   UPDATED="05/12/2013 10:47:50"
			   UPDATED_BY="SADMIN"
			   CREATED="05/12/2013 10:47:50"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Filename"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/12/2013 10:47:50"
				   UPDATED_BY="SADMIN"
				   CREATED="05/12/2013 10:47:50"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Out"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="05/12/2013 10:47:50"
				   UPDATED_BY="SADMIN"
				   CREATED="05/12/2013 10:47:50"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Separator"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/12/2013 10:47:50"
				   UPDATED_BY="SADMIN"
				   CREATED="05/12/2013 10:47:50"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="ExportBillReadyNotification"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="05/12/2013 10:47:50"
				   UPDATED_BY="SADMIN"
				   CREATED="05/12/2013 10:47:50"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="GPG [24/07/2013] Added for Defect 20646"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="FindProdLine"
			   UPDATED="07/25/2013 09:53:53"
			   UPDATED_BY="SADMIN"
			   CREATED="07/25/2013 09:53:53"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Custom Error"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="07/25/2013 09:53:53"
				   UPDATED_BY="SADMIN"
				   CREATED="07/25/2013 09:53:53"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Flag"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="07/25/2013 09:53:53"
				   UPDATED_BY="SADMIN"
				   CREATED="07/25/2013 09:53:53"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="07/25/2013 09:53:53"
				   UPDATED_BY="SADMIN"
				   CREATED="07/25/2013 09:53:53"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="FindProdLine"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="07/25/2013 09:53:53"
				   UPDATED_BY="SADMIN"
				   CREATED="07/25/2013 09:53:53"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="FindPropSet"
			   UPDATED="12/06/2011 16:47:49"
			   UPDATED_BY="SADMIN"
			   CREATED="12/06/2011 16:47:49"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="FlagFound"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="12/06/2011 16:47:49"
				   UPDATED_BY="SADMIN"
				   CREATED="12/06/2011 16:47:49"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="PropName"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/06/2011 16:47:49"
				   UPDATED_BY="SADMIN"
				   CREATED="12/06/2011 16:47:49"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="Hierarchy"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="SiebelMessage"
				   OPTIONAL="N"
				   STORAGE_TYPE="Hierarchy"
				   TYPE="Input"
				   UPDATED="12/06/2011 16:47:49"
				   UPDATED_BY="SADMIN"
				   CREATED="12/06/2011 16:47:49"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="FindPropSet"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="12/06/2011 16:47:49"
				   UPDATED_BY="SADMIN"
				   CREATED="12/06/2011 16:47:49"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="FindResultCreateDisputeResponse"
			   UPDATED="10/24/2013 10:40:26"
			   UPDATED_BY="SADMIN"
			   CREATED="10/24/2013 10:34:41"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OutputValue"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="10/24/2013 10:38:33"
				   UPDATED_BY="SADMIN"
				   CREATED="10/24/2013 10:38:33"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="Hierarchy"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="SiebelMessage"
				   OPTIONAL="N"
				   STORAGE_TYPE="Hierarchy"
				   TYPE="Input"
				   UPDATED="10/24/2013 10:40:26"
				   UPDATED_BY="SADMIN"
				   CREATED="10/24/2013 10:38:17"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="FindResultCreateDisputeResponse"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="10/24/2013 10:34:51"
				   UPDATED_BY="SADMIN"
				   CREATED="10/24/2013 10:34:51"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="FindResultOfSiebelMessageOutput"
			   UPDATED="11/06/2013 07:55:46"
			   UPDATED_BY="SADMIN"
			   CREATED="11/05/2013 16:11:20"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Field"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/06/2013 07:55:44"
				   UPDATED_BY="SADMIN"
				   CREATED="11/05/2013 16:12:16"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OutputValue"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="11/05/2013 16:11:46"
				   UPDATED_BY="SADMIN"
				   CREATED="11/05/2013 16:11:46"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="Hierarchy"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="SiebelMessage"
				   OPTIONAL="N"
				   STORAGE_TYPE="Hierarchy"
				   TYPE="Input"
				   UPDATED="11/06/2013 07:55:33"
				   UPDATED_BY="SADMIN"
				   CREATED="11/05/2013 16:11:55"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Value"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/06/2013 07:55:46"
				   UPDATED_BY="SADMIN"
				   CREATED="11/05/2013 16:12:21"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="FindResultOfSiebelMessageOutput"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="11/05/2013 16:11:26"
				   UPDATED_BY="SADMIN"
				   CREATED="11/05/2013 16:11:26"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="GeneratePINCode"
			   UPDATED="12/21/2012 09:28:32"
			   UPDATED_BY="SADMIN"
			   CREATED="12/21/2012 09:28:32"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Error Code"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="12/21/2012 09:28:32"
				   UPDATED_BY="SADMIN"
				   CREATED="12/21/2012 09:28:32"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Error Message"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="12/21/2012 09:28:32"
				   UPDATED_BY="SADMIN"
				   CREATED="12/21/2012 09:28:32"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="PinCode"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="12/21/2012 09:28:32"
				   UPDATED_BY="SADMIN"
				   CREATED="12/21/2012 09:28:32"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="numberOfDigit"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/21/2012 09:28:32"
				   UPDATED_BY="SADMIN"
				   CREATED="12/21/2012 09:28:32"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="GeneratePINCode"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="12/21/2012 09:28:32"
				   UPDATED_BY="SADMIN"
				   CREATED="12/21/2012 09:28:32"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="GenericQueryOnBC"
			   UPDATED="04/02/2012 10:15:14"
			   UPDATED_BY="SADMIN"
			   CREATED="04/29/2011 12:36:39"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="BusinessComponent"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="04/29/2011 12:39:46"
				   UPDATED_BY="SADMIN"
				   CREATED="04/29/2011 12:37:51"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="BusinessComponent"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="04/29/2011 12:39:46"
					   UPDATED_BY="SADMIN"
					   CREATED="04/29/2011 12:39:46"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="BusinessObject"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="04/29/2011 12:39:46"
				   UPDATED_BY="SADMIN"
				   CREATED="04/29/2011 12:39:46"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="BusinessObject"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="04/29/2011 12:40:16"
					   UPDATED_BY="SADMIN"
					   CREATED="04/29/2011 12:40:16"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ErrorCode"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="04/29/2011 12:41:54"
				   UPDATED_BY="SADMIN"
				   CREATED="04/29/2011 12:40:16"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ErrorMsg"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="04/29/2011 12:41:47"
				   UPDATED_BY="SADMIN"
				   CREATED="04/29/2011 12:40:19"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Id"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="04/29/2011 12:41:46"
				   UPDATED_BY="SADMIN"
				   CREATED="04/29/2011 12:40:30"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ListaField"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="04/29/2011 12:40:36"
				   UPDATED_BY="SADMIN"
				   CREATED="04/29/2011 12:40:36"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="SearchExpr"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="04/29/2011 12:42:56"
				   UPDATED_BY="SADMIN"
				   CREATED="04/29/2011 12:40:43"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="SearchExpr"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="04/29/2011 12:42:56"
					   UPDATED_BY="SADMIN"
					   CREATED="04/29/2011 12:42:56"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="SortDirection"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="04/02/2012 10:15:09"
				   UPDATED_BY="SADMIN"
				   CREATED="04/02/2012 10:15:09"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="SortField"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="04/02/2012 10:14:59"
				   UPDATED_BY="SADMIN"
				   CREATED="04/02/2012 10:14:59"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="GenericQueryOnBC"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="04/29/2011 12:37:26"
				   UPDATED_BY="SADMIN"
				   CREATED="04/29/2011 12:37:26"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="GenericQueryOnBC_Edit"
			   UPDATED="01/31/2012 19:43:35"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2012 19:43:34"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="BusinessComponent"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2012 19:43:34"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2012 19:43:34"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="BusinessComponent"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="01/31/2012 19:43:34"
					   UPDATED_BY="SADMIN"
					   CREATED="01/31/2012 19:43:34"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="BusinessObject"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2012 19:43:34"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2012 19:43:34"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="BusinessObject"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="01/31/2012 19:43:34"
					   UPDATED_BY="SADMIN"
					   CREATED="01/31/2012 19:43:34"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ErrorCode"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2012 19:43:34"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2012 19:43:34"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ErrorMsg"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2012 19:43:34"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2012 19:43:34"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Id"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2012 19:43:34"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2012 19:43:34"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ListaField"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2012 19:43:34"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2012 19:43:34"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OutputValue"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/31/2012 19:43:34"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2012 19:43:34"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="SearchExpr"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2012 19:43:34"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2012 19:43:34"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="SearchExpr"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="01/31/2012 19:43:34"
					   UPDATED_BY="SADMIN"
					   CREATED="01/31/2012 19:43:34"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="GenericQueryOnBC_Edit"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="01/31/2012 19:43:35"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2012 19:43:35"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="GetAttributeValue"
			   UPDATED="03/16/2016 16:55:27"
			   UPDATED_BY="SADMIN"
			   CREATED="03/16/2016 16:55:27"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="src_FaultCode"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="03/16/2016 16:55:27"
				   UPDATED_BY="SADMIN"
				   CREATED="03/16/2016 16:55:27"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="src_FaultSummary"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="03/16/2016 16:55:27"
				   UPDATED_BY="SADMIN"
				   CREATED="03/16/2016 16:55:27"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="GetAttributeValue"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="03/16/2016 16:55:27"
				   UPDATED_BY="SADMIN"
				   CREATED="03/16/2016 16:55:27"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="GetAvaibleResource"
			   UPDATED="07/05/2012 10:37:57"
			   UPDATED_BY="SADMIN"
			   CREATED="07/05/2012 10:37:57"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ErrorCode"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="07/05/2012 10:37:57"
				   UPDATED_BY="SADMIN"
				   CREATED="07/05/2012 10:37:57"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ErrorFMW"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="07/05/2012 10:37:57"
				   UPDATED_BY="SADMIN"
				   CREATED="07/05/2012 10:37:57"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ErrorType"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="07/05/2012 10:37:57"
				   UPDATED_BY="SADMIN"
				   CREATED="07/05/2012 10:37:57"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="sItemId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="07/05/2012 10:37:57"
				   UPDATED_BY="SADMIN"
				   CREATED="07/05/2012 10:37:57"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="sMSISDN"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="07/05/2012 10:37:57"
				   UPDATED_BY="SADMIN"
				   CREATED="07/05/2012 10:37:57"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="GetAvaibleResource"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="07/05/2012 10:37:57"
				   UPDATED_BY="SADMIN"
				   CREATED="07/05/2012 10:37:57"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="GPG [05/09/2013] Added for Balance Group EAI"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="GetBalanceGroup"
			   UPDATED="09/16/2013 06:20:46"
			   UPDATED_BY="SADMIN"
			   CREATED="09/16/2013 06:20:46"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="Hierarchy"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="SiebelMessage"
				   OPTIONAL="N"
				   STORAGE_TYPE="Hierarchy"
				   TYPE="Input / Output"
				   UPDATED="09/16/2013 06:20:46"
				   UPDATED_BY="SADMIN"
				   CREATED="09/16/2013 06:20:46"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="GetBalanceGroup"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="09/16/2013 06:20:46"
				   UPDATED_BY="SADMIN"
				   CREATED="09/16/2013 06:20:46"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="[Priyanka]:[QC 69042]:24/05/2016 RCCS_Pilot Added to query Bank details"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="GetBankDetails"
			   UPDATED="05/24/2016 14:46:25"
			   UPDATED_BY="SADMIN"
			   CREATED="05/24/2016 14:46:25"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="AccountId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/24/2016 14:46:25"
				   UPDATED_BY="SADMIN"
				   CREATED="05/24/2016 14:46:25"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="AccountName"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/24/2016 14:46:25"
				   UPDATED_BY="SADMIN"
				   CREATED="05/24/2016 14:46:25"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="AccountNumber"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/24/2016 14:46:25"
				   UPDATED_BY="SADMIN"
				   CREATED="05/24/2016 14:46:25"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="AccountSortCode"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/24/2016 14:46:25"
				   UPDATED_BY="SADMIN"
				   CREATED="05/24/2016 14:46:25"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ID"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="05/24/2016 14:46:25"
				   UPDATED_BY="SADMIN"
				   CREATED="05/24/2016 14:46:25"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Result"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="05/24/2016 14:46:25"
				   UPDATED_BY="SADMIN"
				   CREATED="05/24/2016 14:46:25"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="GetBankDetails"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="05/24/2016 14:46:25"
				   UPDATED_BY="SADMIN"
				   CREATED="05/24/2016 14:46:25"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="GetContext"
			   UPDATED="03/22/2012 16:02:19"
			   UPDATED_BY="SADMIN"
			   CREATED="03/22/2012 16:02:19"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="GetContext"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="03/22/2012 16:02:19"
				   UPDATED_BY="SADMIN"
				   CREATED="03/22/2012 16:02:19"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="[SGUPTA]:[5/19/2015]:[15.2]:[CR75380]:Added for updating ETF calculation based on CRD."
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="GetCustomerRequestedDate"
			   UPDATED="05/27/2015 15:36:42"
			   UPDATED_BY="SADMIN"
			   CREATED="05/27/2015 15:36:42"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="[SGUPTA]:[5/19/2015]:[15.2]:[CR75380]:Added for updating ETF calculation based on CRD."
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Action Code"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/27/2015 15:36:42"
				   UPDATED_BY="SADMIN"
				   CREATED="05/27/2015 15:36:42"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="Action Code"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="05/27/2015 15:36:42"
					   UPDATED_BY="SADMIN"
					   CREATED="05/27/2015 15:36:42"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="[SGUPTA]:[5/19/2015]:[15.2]:[CR75380]:Added for updating ETF calculation based on CRD."
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="DueDate"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/27/2015 15:36:42"
				   UPDATED_BY="SADMIN"
				   CREATED="05/27/2015 15:36:42"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="DueDate"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="05/27/2015 15:36:42"
					   UPDATED_BY="SADMIN"
					   CREATED="05/27/2015 15:36:42"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="[SGUPTA]:[5/19/2015]:[15.2]:[CR75380]:Added for updating ETF calculation based on CRD."
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Service Point Id"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/27/2015 15:36:42"
				   UPDATED_BY="SADMIN"
				   CREATED="05/27/2015 15:36:42"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="Service Point Id"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="05/27/2015 15:36:42"
					   UPDATED_BY="SADMIN"
					   CREATED="05/27/2015 15:36:42"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="[SGUPTA]:[5/19/2015]:[15.2]:[CR75380]:Added for updating ETF calculation based on CRD."
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="customerDate"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="05/27/2015 15:36:42"
				   UPDATED_BY="SADMIN"
				   CREATED="05/27/2015 15:36:42"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="customerDate"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="05/27/2015 15:36:42"
					   UPDATED_BY="SADMIN"
					   CREATED="05/27/2015 15:36:42"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="GetCustomerRequestedDate"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="05/27/2015 15:36:42"
				   UPDATED_BY="SADMIN"
				   CREATED="05/27/2015 15:36:42"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="GetDescriptionMessage"
			   UPDATED="10/29/2014 14:26:13"
			   UPDATED_BY="SADMIN"
			   CREATED="10/29/2014 14:26:13"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Label"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/29/2014 14:26:13"
				   UPDATED_BY="SADMIN"
				   CREATED="10/29/2014 14:26:13"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="MessageCode"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/29/2014 14:26:13"
				   UPDATED_BY="SADMIN"
				   CREATED="10/29/2014 14:26:13"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="MessageText"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="10/29/2014 14:26:13"
				   UPDATED_BY="SADMIN"
				   CREATED="10/29/2014 14:26:13"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="GetDescriptionMessage"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="10/29/2014 14:26:13"
				   UPDATED_BY="SADMIN"
				   CREATED="10/29/2014 14:26:13"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="GetEligibilityProp"
			   UPDATED="07/09/2013 07:12:36"
			   UPDATED_BY="SADMIN"
			   CREATED="07/09/2013 07:12:36"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="Hierarchy"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="InputMessage"
				   OPTIONAL="N"
				   STORAGE_TYPE="Hierarchy"
				   TYPE="Input"
				   UPDATED="07/09/2013 07:12:36"
				   UPDATED_BY="SADMIN"
				   CREATED="07/09/2013 07:12:36"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="eligibilityIndicatorTotal"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="07/09/2013 07:12:36"
				   UPDATED_BY="SADMIN"
				   CREATED="07/09/2013 07:12:36"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="GetEligibilityProp"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="07/09/2013 07:12:36"
				   UPDATED_BY="SADMIN"
				   CREATED="07/09/2013 07:12:36"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="GetIOFields"
			   UPDATED="07/13/2011 17:23:07"
			   UPDATED_BY="SADMIN"
			   CREATED="07/13/2011 17:21:57"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="IC XML Container Element"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="07/13/2011 17:22:55"
				   UPDATED_BY="SADMIN"
				   CREATED="07/13/2011 17:22:55"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="IC XML List Tags"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="07/13/2011 17:23:05"
				   UPDATED_BY="SADMIN"
				   CREATED="07/13/2011 17:23:05"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="IC XML Tag"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="07/13/2011 17:22:40"
				   UPDATED_BY="SADMIN"
				   CREATED="07/13/2011 17:22:40"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Integration Object"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="07/13/2011 17:22:36"
				   UPDATED_BY="SADMIN"
				   CREATED="07/13/2011 17:22:36"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="GetIOFields"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="07/13/2011 17:22:15"
				   UPDATED_BY="SADMIN"
				   CREATED="07/13/2011 17:22:15"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="GetRandomNumber"
			   UPDATED="11/07/2011 11:20:14"
			   UPDATED_BY="SADMIN"
			   CREATED="11/07/2011 10:11:50"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="Hierarchy"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ListOfValue"
				   OPTIONAL="N"
				   STORAGE_TYPE="Hierarchy"
				   TYPE="Output"
				   UPDATED="11/07/2011 11:19:51"
				   UPDATED_BY="SADMIN"
				   CREATED="11/07/2011 11:19:51"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Lower"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/07/2011 11:19:39"
				   UPDATED_BY="SADMIN"
				   CREATED="11/07/2011 11:19:39"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Num"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/07/2011 11:19:46"
				   UPDATED_BY="SADMIN"
				   CREATED="11/07/2011 11:19:46"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Upper"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/07/2011 11:19:31"
				   UPDATED_BY="SADMIN"
				   CREATED="11/07/2011 11:19:31"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="GetRandomNumber"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="11/07/2011 10:11:59"
				   UPDATED_BY="SADMIN"
				   CREATED="11/07/2011 10:11:59"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="GetRule"
			   UPDATED="03/20/2013 17:14:33"
			   UPDATED_BY="SADMIN"
			   CREATED="03/20/2013 16:30:08"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="DivisionName"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="03/20/2013 16:30:36"
				   UPDATED_BY="SADMIN"
				   CREATED="03/20/2013 16:30:36"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Method"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="03/20/2013 16:30:40"
				   UPDATED_BY="SADMIN"
				   CREATED="03/20/2013 16:30:40"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="GetRule"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="03/20/2013 16:30:18"
				   UPDATED_BY="SADMIN"
				   CREATED="03/20/2013 16:30:18"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="Added for CR102444"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="LookupLOVDetails"
			   UPDATED="08/24/2016 15:13:57"
			   UPDATED_BY="SADMIN"
			   CREATED="08/24/2016 15:13:57"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="LookupLOVDetails"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="08/24/2016 15:13:57"
				   UPDATED_BY="SADMIN"
				   CREATED="08/24/2016 15:13:57"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="LowerCase"
			   UPDATED="11/27/2013 09:15:15"
			   UPDATED_BY="SADMIN"
			   CREATED="11/27/2013 09:15:15"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ErrorCode"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="11/27/2013 09:15:15"
				   UPDATED_BY="SADMIN"
				   CREATED="11/27/2013 09:15:15"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ErrorMessage"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="11/27/2013 09:15:15"
				   UPDATED_BY="SADMIN"
				   CREATED="11/27/2013 09:15:15"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="original"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/27/2013 09:15:15"
				   UPDATED_BY="SADMIN"
				   CREATED="11/27/2013 09:15:15"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="originalToLower"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="11/27/2013 09:15:15"
				   UPDATED_BY="SADMIN"
				   CREATED="11/27/2013 09:15:15"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="LowerCase"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="11/27/2013 09:15:15"
				   UPDATED_BY="SADMIN"
				   CREATED="11/27/2013 09:15:15"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="ManageResponseCreateStockReservation"
			   UPDATED="05/30/2013 11:32:37"
			   UPDATED_BY="SADMIN"
			   CREATED="12/04/2012 05:29:47"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Error Code"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="12/04/2012 05:29:47"
				   UPDATED_BY="SADMIN"
				   CREATED="12/04/2012 05:29:47"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Error Message"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="12/04/2012 05:29:47"
				   UPDATED_BY="SADMIN"
				   CREATED="12/04/2012 05:29:47"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderID"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/04/2012 05:29:47"
				   UPDATED_BY="SADMIN"
				   CREATED="12/04/2012 05:29:47"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="Hierarchy"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="SiebelMessage"
				   OPTIONAL="N"
				   STORAGE_TYPE="Hierarchy"
				   TYPE="Input"
				   UPDATED="12/04/2012 05:29:47"
				   UPDATED_BY="SADMIN"
				   CREATED="12/04/2012 05:29:47"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="prodBackOrder"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="05/30/2013 11:32:37"
				   UPDATED_BY="SADMIN"
				   CREATED="05/30/2013 11:32:37"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="prodPreOrder"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="05/30/2013 11:32:37"
				   UPDATED_BY="SADMIN"
				   CREATED="05/30/2013 11:32:37"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="sReturn"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="12/04/2012 05:29:47"
				   UPDATED_BY="SADMIN"
				   CREATED="12/04/2012 05:29:47"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="scenario"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="05/30/2013 11:32:37"
				   UPDATED_BY="SADMIN"
				   CREATED="05/30/2013 11:32:37"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="ManageResponseCreateStockReservation"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="12/04/2012 05:29:47"
				   UPDATED_BY="SADMIN"
				   CREATED="12/04/2012 05:29:47"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="ManageResponseInquire"
			   UPDATED="07/09/2013 07:33:44"
			   UPDATED_BY="SADMIN"
			   CREATED="10/17/2011 04:25:34"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Error Code"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="10/17/2011 04:26:15"
				   UPDATED_BY="SADMIN"
				   CREATED="10/17/2011 04:26:15"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Error Message"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="10/17/2011 04:26:58"
				   UPDATED_BY="SADMIN"
				   CREATED="10/17/2011 04:26:58"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="LineItem Id"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/17/2011 04:27:17"
				   UPDATED_BY="SADMIN"
				   CREATED="10/17/2011 04:27:17"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderID"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/17/2011 04:27:34"
				   UPDATED_BY="SADMIN"
				   CREATED="10/17/2011 04:27:34"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="Hierarchy"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="SiebelMessage"
				   OPTIONAL="N"
				   STORAGE_TYPE="Hierarchy"
				   TYPE="Input"
				   UPDATED="01/25/2012 14:27:43"
				   UPDATED_BY="SADMIN"
				   CREATED="10/17/2011 04:27:52"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="isInStockAll"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/20/2012 17:22:50"
				   UPDATED_BY="SADMIN"
				   CREATED="01/20/2012 17:22:50"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="listProdName"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="05/16/2012 15:01:26"
				   UPDATED_BY="SADMIN"
				   CREATED="05/16/2012 15:01:20"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="msgError"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="07/09/2013 07:33:44"
				   UPDATED_BY="SADMIN"
				   CREATED="07/09/2013 07:33:44"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="ManageResponseInquire"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="10/17/2011 04:26:09"
				   UPDATED_BY="SADMIN"
				   CREATED="10/17/2011 04:26:09"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="ManageResponsePortIn"
			   UPDATED="05/22/2013 07:40:34"
			   UPDATED_BY="SADMIN"
			   CREATED="05/22/2013 07:40:34"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Error Code"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="05/22/2013 07:40:34"
				   UPDATED_BY="SADMIN"
				   CREATED="05/22/2013 07:40:34"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Error Message"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="05/22/2013 07:40:34"
				   UPDATED_BY="SADMIN"
				   CREATED="05/22/2013 07:40:34"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderID"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/22/2013 07:40:34"
				   UPDATED_BY="SADMIN"
				   CREATED="05/22/2013 07:40:34"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="Hierarchy"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="SiebelMessage"
				   OPTIONAL="N"
				   STORAGE_TYPE="Hierarchy"
				   TYPE="Input / Output"
				   UPDATED="05/22/2013 07:40:34"
				   UPDATED_BY="SADMIN"
				   CREATED="05/22/2013 07:40:34"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="ManageResponsePortIn"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="05/22/2013 07:40:34"
				   UPDATED_BY="SADMIN"
				   CREATED="05/22/2013 07:40:34"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="ParseStringBIP"
			   UPDATED="04/18/2014 11:49:04"
			   UPDATED_BY="SADMIN"
			   CREATED="04/18/2014 11:49:04"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="EndChar"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="04/18/2014 11:49:04"
				   UPDATED_BY="SADMIN"
				   CREATED="04/18/2014 11:49:04"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="InpString"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="04/18/2014 11:49:04"
				   UPDATED_BY="SADMIN"
				   CREATED="04/18/2014 11:49:04"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="MidChar"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="04/18/2014 11:49:04"
				   UPDATED_BY="SADMIN"
				   CREATED="04/18/2014 11:49:04"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="ParseStringBIP"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="04/18/2014 11:49:04"
				   UPDATED_BY="SADMIN"
				   CREATED="04/18/2014 11:49:04"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="QueryProducts"
			   UPDATED="02/12/2013 03:16:13"
			   UPDATED_BY="SADMIN"
			   CREATED="02/12/2013 03:16:13"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ID"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input / Output"
				   UPDATED="02/12/2013 03:16:13"
				   UPDATED_BY="SADMIN"
				   CREATED="02/12/2013 03:16:13"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="QueryProducts"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="02/12/2013 03:16:13"
				   UPDATED_BY="SADMIN"
				   CREATED="02/12/2013 03:16:13"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="ReplaceString"
			   UPDATED="04/24/2012 09:03:33"
			   UPDATED_BY="SADMIN"
			   CREATED="04/23/2012 16:02:36"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="String"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input / Output"
				   UPDATED="04/24/2012 09:03:33"
				   UPDATED_BY="SADMIN"
				   CREATED="04/23/2012 16:03:06"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="ReplaceString"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="04/23/2012 16:08:19"
				   UPDATED_BY="SADMIN"
				   CREATED="04/23/2012 16:08:19"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="ResponseAssetWithRetentionEligibility"
			   UPDATED="10/16/2012 16:06:08"
			   UPDATED_BY="SADMIN"
			   CREATED="10/16/2012 15:44:00"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="BusinessComponent"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/16/2012 15:44:00"
				   UPDATED_BY="SADMIN"
				   CREATED="10/16/2012 15:44:00"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="BusinessObject"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/16/2012 15:44:00"
				   UPDATED_BY="SADMIN"
				   CREATED="10/16/2012 15:44:00"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Error Code"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="10/16/2012 15:44:00"
				   UPDATED_BY="SADMIN"
				   CREATED="10/16/2012 15:44:00"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Error Message"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="10/16/2012 15:44:00"
				   UPDATED_BY="SADMIN"
				   CREATED="10/16/2012 15:44:00"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="Hierarchy"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="RecomCachedOut"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Hierarchy"
				   TYPE="Output"
				   UPDATED="10/16/2012 16:05:23"
				   UPDATED_BY="SADMIN"
				   CREATED="10/16/2012 16:05:23"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="Hierarchy"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="SiebelMessage"
				   OPTIONAL="N"
				   STORAGE_TYPE="Hierarchy"
				   TYPE="Input"
				   UPDATED="10/16/2012 15:44:00"
				   UPDATED_BY="SADMIN"
				   CREATED="10/16/2012 15:44:00"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="listOfMsisdnAndID"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/16/2012 15:44:00"
				   UPDATED_BY="SADMIN"
				   CREATED="10/16/2012 15:44:00"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="ResponseAssetWithRetentionEligibility"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="10/16/2012 15:44:26"
				   UPDATED_BY="SADMIN"
				   CREATED="10/16/2012 15:44:00"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="RunShell"
			   UPDATED="11/27/2012 17:05:40"
			   UPDATED_BY="SADMIN"
			   CREATED="11/27/2012 17:05:40"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="RunShell"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="11/27/2012 17:05:40"
				   UPDATED_BY="SADMIN"
				   CREATED="11/27/2012 17:05:40"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="SetFieldValue"
			   UPDATED="05/02/2011 14:26:16"
			   UPDATED_BY="SADMIN"
			   CREATED="05/02/2011 14:01:48"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="BusComponent"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/02/2011 14:04:07"
				   UPDATED_BY="SADMIN"
				   CREATED="05/02/2011 14:04:07"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="BusObject"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/02/2011 14:04:17"
				   UPDATED_BY="SADMIN"
				   CREATED="05/02/2011 14:04:17"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="CabledValue"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/02/2011 14:26:05"
				   UPDATED_BY="SADMIN"
				   CREATED="05/02/2011 14:04:22"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ExpressionValue"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/02/2011 14:26:11"
				   UPDATED_BY="SADMIN"
				   CREATED="05/02/2011 14:04:26"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="FieldName"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/02/2011 14:04:30"
				   UPDATED_BY="SADMIN"
				   CREATED="05/02/2011 14:04:30"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ObjId"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/02/2011 14:26:12"
				   UPDATED_BY="SADMIN"
				   CREATED="05/02/2011 14:04:35"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="SearchExpression"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/02/2011 14:26:16"
				   UPDATED_BY="SADMIN"
				   CREATED="05/02/2011 14:04:40"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="UpdateValueFieldNull"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/02/2011 14:26:14"
				   UPDATED_BY="SADMIN"
				   CREATED="05/02/2011 14:04:44"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="SetFieldValue"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="05/02/2011 14:02:20"
				   UPDATED_BY="SADMIN"
				   CREATED="05/02/2011 14:02:20"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="SetFieldValueNLFL"
			   UPDATED="06/23/2014 06:42:23"
			   UPDATED_BY="SADMIN"
			   CREATED="06/23/2014 06:42:23"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="BusComponent"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="06/23/2014 06:42:23"
				   UPDATED_BY="SADMIN"
				   CREATED="06/23/2014 06:42:23"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="BusObject"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="06/23/2014 06:42:23"
				   UPDATED_BY="SADMIN"
				   CREATED="06/23/2014 06:42:23"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="CabledValue"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="06/23/2014 06:42:23"
				   UPDATED_BY="SADMIN"
				   CREATED="06/23/2014 06:42:23"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ExpressionValue"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="06/23/2014 06:42:23"
				   UPDATED_BY="SADMIN"
				   CREATED="06/23/2014 06:42:23"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="FieldName"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="06/23/2014 06:42:23"
				   UPDATED_BY="SADMIN"
				   CREATED="06/23/2014 06:42:23"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ObjId"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="06/23/2014 06:42:23"
				   UPDATED_BY="SADMIN"
				   CREATED="06/23/2014 06:42:23"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="SearchExpression"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="06/23/2014 06:42:23"
				   UPDATED_BY="SADMIN"
				   CREATED="06/23/2014 06:42:23"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="UpdateValueFieldNull"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="06/23/2014 06:42:23"
				   UPDATED_BY="SADMIN"
				   CREATED="06/23/2014 06:42:23"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="SetFieldValueNLFL"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="06/23/2014 06:42:23"
				   UPDATED_BY="SADMIN"
				   CREATED="06/23/2014 06:42:23"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="SetJobNum"
			   UPDATED="11/27/2012 17:05:40"
			   UPDATED_BY="SADMIN"
			   CREATED="11/27/2012 17:05:40"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Error Message"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="11/27/2012 17:05:40"
				   UPDATED_BY="SADMIN"
				   CREATED="11/27/2012 17:05:40"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="NumOfOrdersLOV"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/27/2012 17:05:40"
				   UPDATED_BY="SADMIN"
				   CREATED="11/27/2012 17:05:40"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Parallel_Jobs"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/27/2012 17:05:40"
				   UPDATED_BY="SADMIN"
				   CREATED="11/27/2012 17:05:40"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="RecordsForJob"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="11/27/2012 17:05:40"
				   UPDATED_BY="SADMIN"
				   CREATED="11/27/2012 17:05:40"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="RecordsToUpdate"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="11/27/2012 17:05:40"
				   UPDATED_BY="SADMIN"
				   CREATED="11/27/2012 17:05:40"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="SetJobNum"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="11/27/2012 17:05:40"
				   UPDATED_BY="SADMIN"
				   CREATED="11/27/2012 17:05:40"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="SetPromIntegId"
			   UPDATED="12/21/2012 09:28:32"
			   UPDATED_BY="SADMIN"
			   CREATED="12/21/2012 09:28:32"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Object Id"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/21/2012 09:28:32"
				   UPDATED_BY="SADMIN"
				   CREATED="12/21/2012 09:28:32"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="SetPromIntegId"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="12/21/2012 09:28:32"
				   UPDATED_BY="SADMIN"
				   CREATED="12/21/2012 09:28:32"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="GPG"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="TransferOwnership"
			   UPDATED="02/05/2014 10:04:43"
			   UPDATED_BY="SADMIN"
			   CREATED="02/05/2014 10:04:42"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="AcccountId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="02/05/2014 10:04:42"
				   UPDATED_BY="SADMIN"
				   CREATED="02/05/2014 10:04:42"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="PromoAssetId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="02/05/2014 10:04:43"
				   UPDATED_BY="SADMIN"
				   CREATED="02/05/2014 10:04:43"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="TransferOwnership"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="02/05/2014 10:04:43"
				   UPDATED_BY="SADMIN"
				   CREATED="02/05/2014 10:04:43"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="CR 55524"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="TruncateDecimal"
			   UPDATED="10/29/2014 14:26:13"
			   UPDATED_BY="SADMIN"
			   CREATED="08/18/2014 17:24:26"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="Number"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Amount"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input / Output"
				   UPDATED="08/18/2014 17:24:26"
				   UPDATED_BY="SADMIN"
				   CREATED="08/18/2014 17:24:26"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="Number"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="TruncateDecimal"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input / Output"
				   UPDATED="08/18/2014 17:24:26"
				   UPDATED_BY="SADMIN"
				   CREATED="08/18/2014 17:24:26"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="TruncateDecimal"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="08/18/2014 17:24:26"
				   UPDATED_BY="SADMIN"
				   CREATED="08/18/2014 17:24:26"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="UndoMonitoring"
			   UPDATED="03/22/2012 16:02:19"
			   UPDATED_BY="SADMIN"
			   CREATED="03/22/2012 16:02:19"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="UndoMonitoring"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="03/22/2012 16:02:19"
				   UPDATED_BY="SADMIN"
				   CREATED="03/22/2012 16:02:19"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="UpdateAccountChildren"
			   UPDATED="04/18/2014 11:49:04"
			   UPDATED_BY="SADMIN"
			   CREATED="04/18/2014 11:49:04"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Accoount Id"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="04/18/2014 11:49:04"
				   UPDATED_BY="SADMIN"
				   CREATED="04/18/2014 11:49:04"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Custom Error"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="04/18/2014 11:49:04"
				   UPDATED_BY="SADMIN"
				   CREATED="04/18/2014 11:49:04"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Order Id"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="04/18/2014 11:49:04"
				   UPDATED_BY="SADMIN"
				   CREATED="04/18/2014 11:49:04"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="UpdateAccountChildren"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="04/18/2014 11:49:04"
				   UPDATED_BY="SADMIN"
				   CREATED="04/18/2014 11:49:04"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="[AP]:7-Sept-2015:CR71178-Get_Retention_Eligibility: Added new method to update when there is TIL call"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="UpdateAssetWithCREResponse"
			   UPDATED="03/16/2016 16:55:27"
			   UPDATED_BY="SADMIN"
			   CREATED="12/11/2015 15:44:32"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="BusinessComponent"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/11/2015 15:44:32"
				   UPDATED_BY="SADMIN"
				   CREATED="12/11/2015 15:44:32"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="BusinessObject"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/11/2015 15:44:32"
				   UPDATED_BY="SADMIN"
				   CREATED="12/11/2015 15:44:32"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="EligibilityIndicator"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="12/11/2015 15:44:32"
				   UPDATED_BY="SADMIN"
				   CREATED="12/11/2015 15:44:32"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="EligibilityReason"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="12/11/2015 15:44:32"
				   UPDATED_BY="SADMIN"
				   CREATED="12/11/2015 15:44:32"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Error Code"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="12/11/2015 15:44:32"
				   UPDATED_BY="SADMIN"
				   CREATED="12/11/2015 15:44:32"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Error Message"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="12/11/2015 15:44:32"
				   UPDATED_BY="SADMIN"
				   CREATED="12/11/2015 15:44:32"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="Hierarchy"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="SiebelMessage"
				   OPTIONAL="N"
				   STORAGE_TYPE="Hierarchy"
				   TYPE="Input"
				   UPDATED="12/11/2015 15:44:32"
				   UPDATED_BY="SADMIN"
				   CREATED="12/11/2015 15:44:32"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="listOfMsisdnAndID"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/11/2015 15:44:32"
				   UPDATED_BY="SADMIN"
				   CREATED="12/11/2015 15:44:32"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="UpdateAssetWithCREResponse"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="12/11/2015 15:44:32"
				   UPDATED_BY="SADMIN"
				   CREATED="12/11/2015 15:44:32"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="[AP]:15-Sept-2015:CR71178-Get_Retention_Eligibility: Added new method to update when there is TIL call in FL FB and TV scenario"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="UpdateAssetWithCRE_FLFB_Response"
			   UPDATED="03/16/2016 16:55:27"
			   UPDATED_BY="SADMIN"
			   CREATED="12/11/2015 15:44:32"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="BusinessComponent"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/11/2015 15:44:32"
				   UPDATED_BY="SADMIN"
				   CREATED="12/11/2015 15:44:32"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="BusinessObject"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/11/2015 15:44:32"
				   UPDATED_BY="SADMIN"
				   CREATED="12/11/2015 15:44:32"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="EligibilityIndicator"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="12/11/2015 15:44:32"
				   UPDATED_BY="SADMIN"
				   CREATED="12/11/2015 15:44:32"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="EligibilityReason"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="12/11/2015 15:44:32"
				   UPDATED_BY="SADMIN"
				   CREATED="12/11/2015 15:44:32"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Error Code"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="12/11/2015 15:44:32"
				   UPDATED_BY="SADMIN"
				   CREATED="12/11/2015 15:44:32"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Error Message"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="12/11/2015 15:44:32"
				   UPDATED_BY="SADMIN"
				   CREATED="12/11/2015 15:44:32"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="Hierarchy"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="SiebelMessage"
				   OPTIONAL="N"
				   STORAGE_TYPE="Hierarchy"
				   TYPE="Input"
				   UPDATED="12/11/2015 15:44:32"
				   UPDATED_BY="SADMIN"
				   CREATED="12/11/2015 15:44:32"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="listOfMsisdnAndID"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/11/2015 15:44:32"
				   UPDATED_BY="SADMIN"
				   CREATED="12/11/2015 15:44:32"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="UpdateAssetWithCRE_FLFB_Response"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="12/11/2015 15:44:32"
				   UPDATED_BY="SADMIN"
				   CREATED="12/11/2015 15:44:32"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="UpdateAssetWithRetentionEligibilityResponse"
			   UPDATED="10/10/2012 15:23:05"
			   UPDATED_BY="SADMIN"
			   CREATED="10/05/2012 09:57:21"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="BusinessComponent"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/10/2012 15:22:54"
				   UPDATED_BY="SADMIN"
				   CREATED="10/10/2012 15:22:54"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="BusinessObject"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/10/2012 15:22:43"
				   UPDATED_BY="SADMIN"
				   CREATED="10/10/2012 15:22:43"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Error Code"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="10/05/2012 10:05:07"
				   UPDATED_BY="SADMIN"
				   CREATED="10/05/2012 09:57:55"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Error Message"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="10/05/2012 10:05:10"
				   UPDATED_BY="SADMIN"
				   CREATED="10/05/2012 09:58:18"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="Hierarchy"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="SiebelMessage"
				   OPTIONAL="N"
				   STORAGE_TYPE="Hierarchy"
				   TYPE="Input"
				   UPDATED="10/05/2012 11:11:27"
				   UPDATED_BY="SADMIN"
				   CREATED="10/05/2012 09:57:43"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="listOfMsisdnAndID"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/05/2012 09:58:36"
				   UPDATED_BY="SADMIN"
				   CREATED="10/05/2012 09:58:36"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="UpdateAssetWithRetentionEligibilityResponse"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="10/05/2012 09:57:30"
				   UPDATED_BY="SADMIN"
				   CREATED="10/05/2012 09:57:30"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="ValidateContact"
			   UPDATED="03/04/2014 05:18:55"
			   UPDATED_BY="SADMIN"
			   CREATED="12/30/2013 05:21:38"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ContactMatch"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="03/04/2014 05:18:55"
				   UPDATED_BY="SADMIN"
				   CREATED="03/04/2014 05:18:55"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="DOB"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/30/2013 05:21:38"
				   UPDATED_BY="SADMIN"
				   CREATED="12/30/2013 05:21:38"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="FirstName"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/30/2013 05:21:38"
				   UPDATED_BY="SADMIN"
				   CREATED="12/30/2013 05:21:38"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Id"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/30/2013 05:21:38"
				   UPDATED_BY="SADMIN"
				   CREATED="12/30/2013 05:21:38"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="LastName"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/30/2013 05:21:38"
				   UPDATED_BY="SADMIN"
				   CREATED="12/30/2013 05:21:38"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="PersonalPostalCode"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="12/30/2013 05:21:38"
				   UPDATED_BY="SADMIN"
				   CREATED="12/30/2013 05:21:38"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="ValidateContact"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="12/30/2013 05:21:38"
				   UPDATED_BY="SADMIN"
				   CREATED="12/30/2013 05:21:38"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="WriteMonitoring"
			   UPDATED="02/06/2012 20:23:25"
			   UPDATED_BY="SADMIN"
			   CREATED="02/06/2012 20:23:25"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="WriteMonitoring"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="02/06/2012 20:23:25"
				   UPDATED_BY="SADMIN"
				   CREATED="02/06/2012 20:23:25"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="WriteRequest"
			   UPDATED="09/09/2011 13:22:50"
			   UPDATED_BY="SADMIN"
			   CREATED="09/09/2011 13:22:50"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="WriteRequest"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="09/09/2011 13:22:50"
				   UPDATED_BY="SADMIN"
				   CREATED="09/09/2011 13:22:50"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="findOrderPending"
			   UPDATED="01/09/2013 07:31:16"
			   UPDATED_BY="SADMIN"
			   CREATED="01/09/2013 07:31:16"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="findOrderPending"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="01/09/2013 07:31:16"
				   UPDATED_BY="SADMIN"
				   CREATED="01/09/2013 07:31:16"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="formatToSiebelDate"
			   UPDATED="08/30/2011 11:12:05"
			   UPDATED_BY="SADMIN"
			   CREATED="08/30/2011 11:12:04"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="data"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input / Output"
				   UPDATED="08/30/2011 11:12:05"
				   UPDATED_BY="SADMIN"
				   CREATED="08/30/2011 11:12:05"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="formatToSiebelDate"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="08/30/2011 11:12:05"
				   UPDATED_BY="SADMIN"
				   CREATED="08/30/2011 11:12:05"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="(declarations)"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="var propName;
var parentPropName;"
			   SEQUENCE="1"
			   UPDATED="10/20/2016 05:36:12"
			   UPDATED_BY="ACN_PRIYANKAD"
			   CREATED="10/20/2016 05:36:12"
			   CREATED_BY="ACN_PRIYANKAD">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ActiveAssetAcc"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ActiveAssetAcc(Inputs, Outputs)
{
	var oApp,sAccntid,boAsset,bcAsset,sSearchSpec,sAddAccount;
	try
	{
		oApp = TheApplication();
		sAddAccount = &quot;N&quot;;
		sAccntid = Inputs.GetProperty(&quot;AccntId&quot;);
		if(sAccntid != null &amp;&amp; sAccntid != &quot;&quot;)
		{
			boAsset = oApp.GetBusObject(&quot;VFCB Collection OLI BO&quot;);
			bcAsset = boAsset.GetBusComp(&quot;VF Asset Mgmt - Asset Light&quot;);
			sSearchSpec = &quot;[Owner Account Id] = &apos;&quot;+sAccntid+&quot;&apos; AND ([Status] = &apos;Active&apos; OR [Status] = &apos;Suspended&apos;)&quot;;
			with(bcAsset)
			{
				ClearToQuery();
				SetViewMode(AllView);
				SetSearchExpr(sSearchSpec);
				ExecuteQuery(ForwardOnly);
				if(FirstRecord())
					sAddAccount = &quot;Y&quot;;
			}
		}
		Outputs.SetProperty(&quot;AddAccount&quot;,sAddAccount);	
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		bcAsset = null;
		boAsset = null;
		oApp = null;
	}
}"
			   SEQUENCE="2"
			   UPDATED="10/20/2016 05:36:12"
			   UPDATED_BY="ACN_PRIYANKAD"
			   CREATED="07/08/2015 18:21:02"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="AddItemConflictsResolve"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function AddItemConflictsResolve(Inputs, Outputs)
{
    try
    {
         var sIntObjName = Inputs.GetProperty(&quot;IntObjName&quot;);
         var sObjId = Inputs.GetProperty(&quot;ObjId&quot;);
         var sRootId = Inputs.GetProperty(&quot;RootId&quot;);
         var sInnerLog = Inputs.GetProperty(&quot;InnerLog&quot;);
         var oInp = TheApplication().NewPropertySet();
         var oOut = TheApplication().NewPropertySet();             
         var oBS = TheApplication().GetService(&quot;Remote Complex Object Instance Service&quot;); 

         oBS.InvokeMethod(&quot;AddItem&quot;,Inputs, Outputs);
    }
    catch(e)
    {
         var erroMess = e.toString();
         oInp.SetProperty(&quot;IntObjName&quot;, sIntObjName);
         oInp.SetProperty(&quot;ObjId&quot;,sObjId);
         oInp.SetProperty(&quot;RootId&quot;,sRootId);
         oBS.InvokeMethod(&quot;GetDetailedReqExpl&quot;,oInp,oOut);
         oBS.InvokeMethod(&quot;UndoLastRequest&quot;,oInp,oOut);
         sInnerLog += &quot;Error in AddItemConflictsResolve: &quot; +erroMess+ &quot;\n&quot;;
    }
    finally
    {
         oInp = null;
         oOut = null;
         oBS = null;
    }
    Outputs.SetProperty(&quot;InnerLog&quot;,sInnerLog);
}"
			   SEQUENCE="3"
			   UPDATED="10/20/2016 05:36:12"
			   UPDATED_BY="ACN_PRIYANKAD"
			   CREATED="12/19/2011 11:57:27"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="AddItems"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function AddItems(Input, Output)
{
	try
	{
		var sType = Input.GetProperty(&quot;Type&quot;);
		var sProdId = Input.GetProperty(&quot;ProductId&quot;);
		var HeaderNumber = Input.GetProperty(&quot;HeaderNumber&quot;);
		var sProdName = &quot;&quot;;
		var portNum = &quot;&quot;;
		var sRootItemId = Input.GetProperty(&quot;RootItemId&quot;);
		var sParentItemId = Input.GetProperty(&quot;ParentItemId&quot;);
		var sInnerLog = Input.GetProperty(&quot;sInnerLog&quot;);
		var VF_Is_Return = Input.GetProperty(&quot;VF_Is_Return&quot;);
		var AutoResolve = Input.GetProperty(&quot;AutoResolve&quot;);
		var CustomErrorMess = &quot;OK&quot;;
		var psAddItemInput = TheApplication().NewPropertySet();

		var BO = TheApplication().GetBusObject(&quot;VF_UK_BO_NoLink&quot;);
		var BC = null;

		if (sType == &quot;Quote&quot;)
		{
			BC = BO.GetBusComp(&quot;MACD Quote Item&quot;);
			psAddItemInput.SetProperty(&quot;RootQuoteItemId&quot;,sRootItemId);
			psAddItemInput.SetProperty(&quot;ParQuoteItemId&quot;,sParentItemId);
		}
		else
		{
			BC = BO.GetBusComp(&quot;VF Order Entry - Line Items Light&quot;);
			psAddItemInput.SetProperty(&quot;RootOrderItemId&quot;,sRootItemId);
			psAddItemInput.SetProperty(&quot;ParOrderItemId&quot;,sParentItemId);
		}
		psAddItemInput.SetProperty(&quot;VF_Is_Return&quot;,VF_Is_Return);
		psAddItemInput.SetProperty(&quot;AutoResolve&quot;,AutoResolve);
		psAddItemInput.SetProperty(&quot;Type&quot;,sType);
		psAddItemInput.SetProperty(&quot;sInnerLog&quot;,sInnerLog);
		psAddItemInput.SetProperty(&quot;ProductId&quot;,sProdId);
		
		var UpdatedItemId = &quot;&quot;;
		var retVal = &quot;&quot;;
		var errorMess = &quot;OK&quot;;
		var errorCode = &quot;000&quot;;
		var itemExists = false;
		var ItemId	= &quot;&quot;;
		var AssetIntId	= &quot;&quot;;
		
		with (BC)
		{
			ActivateField(&quot;Asset Integration Id&quot;);
			SetViewMode(3); // 3 - For AllView Mode
			ClearToQuery();
			SetSearchSpec(&quot;Product Id&quot;,sProdId);
			if (sType == &quot;Quote&quot;)
			{
				SetSearchSpec(&quot;Root Quote Item Id&quot;,sRootItemId);
			}
			else
			{
				SetSearchSpec(&quot;Root Order Item Id&quot;,sRootItemId);
			}
			ExecuteQuery(ForwardOnly);
			itemExists = FirstRecord();
			
			if (!itemExists)
			{
				AddOrderItem(psAddItemInput, Output);
				if(Output.GetProperty(&quot;Result&quot;) == &quot;KO&quot;)
				{
					errorCode = &quot;022&quot;;
					errorMess = Output.GetProperty(&quot;Error Description&quot;);
					sProdName = Output.GetProperty(&quot;sProdName&quot;);
					CustomErrorMess = TheApplication().LookupMessage(&quot;VF Leco Messages&quot;,errorCode,HeaderNumber,sProdId,sProdName);
					Output.SetProperty(&quot;Result&quot;,&quot;KO&quot;);
				}
				
				sInnerLog = Output.GetProperty(&quot;sInnerLog&quot;);
				ItemId = Output.GetProperty(&quot;ItemId&quot;);
				AssetIntId = Output.GetProperty(&quot;AssetIntId&quot;);
			}
			else
			{
				ItemId	= GetFieldValue(&quot;Id&quot;);
				AssetIntId	= GetFieldValue(&quot;Asset Integration Id&quot;);
				sInnerLog += &quot;Product &quot; +sProdId+ &quot; already exists for RootId &quot;+sRootItemId+ &quot;\n&quot;;
				if (VF_Is_Return == &quot;C&quot;)
				{
					RetrieveProdData(sProdId,sProdName,portNum,sInnerLog);
					Output.SetProperty(&quot;Result&quot;,&quot;KO&quot;);
					errorCode = &quot;023&quot;;
					errorMess = TheApplication().LookupMessage(&quot;VF Leco Messages&quot;,errorCode,HeaderNumber,sProdId,sProdName);
					//In order %1 product %2 / %3 has failed a product dependency rule. Please review and modify the order taking into account unique and dependant line items.
				}
			}
			Output.SetProperty(&quot;ItemId&quot;, ItemId);
			Output.SetProperty(&quot;AssetIntId&quot;, AssetIntId);
		}
	}
	catch(e)
	{
		errorMess = e.toString();
		sInnerLog += &quot;Error adding order item: &quot;+errorMess+ &quot;\n&quot;;
		Output.SetProperty(&quot;Error Description&quot;, errorMess);
		Output.SetProperty(&quot;Result&quot;, &quot;KO&quot;);
	}
	finally
	{
		BC = null;
		BO = null;
		psAddItemInput = null;
		Output.SetProperty(&quot;sInnerLog&quot;, sInnerLog);
		Output.SetProperty(&quot;Error Description&quot;, errorMess);
		Output.SetProperty(&quot;Error Code&quot;, errorCode);
		Output.SetProperty(&quot;CustomErrorMess&quot;, CustomErrorMess);
	}
}"
			   SEQUENCE="4"
			   UPDATED="10/20/2016 05:36:12"
			   UPDATED_BY="ACN_PRIYANKAD"
			   CREATED="05/04/2012 10:57:06"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="AddMonthsToDate"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function AddMonthsToDate(Inputs, Outputs)
{
	try
	{
		var sStartDate = Inputs.GetProperty(&quot;StartDate&quot;);
		var nMonths  = Inputs.GetProperty(&quot;Months&quot;);
		
		var retDate = new Date(sStartDate);
		retDate.setMonth(retDate.getMonth() + ToInteger(nMonths));
		var sNewDate = DateToString(retDate);
		
		Outputs.SetProperty(&quot;NewDate&quot;, sNewDate);
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		retDate = null;
	}
}"
			   SEQUENCE="5"
			   UPDATED="10/20/2016 05:36:12"
			   UPDATED_BY="ACN_PRIYANKAD"
			   CREATED="12/23/2013 08:17:17"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="AddNewLine"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function AddNewLine(Inputs, Outputs)
{
	try
	{
		var stringa  = Inputs.GetProperty(&quot;String&quot;);
		var pat = /(-RETURN-)/g;
		stringa = stringa.replace(pat, &quot;\n&quot;);
		Outputs.SetProperty(&quot;String&quot;, stringa);
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		stringa = null;
		pat = null;
	}
}"
			   SEQUENCE="6"
			   UPDATED="10/20/2016 05:36:12"
			   UPDATED_BY="ACN_PRIYANKAD"
			   CREATED="04/28/2011 11:51:02"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="AddOrderItem"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function AddOrderItem(Inputs, Outputs)
{
	try
	{
		var sType = Inputs.GetProperty(&quot;Type&quot;);
		var sProductId = Inputs.GetProperty(&quot;ProductId&quot;);
		var portNum = Inputs.GetProperty(&quot;Part#&quot;);
		var sInnerLog = Inputs.GetProperty(&quot;sInnerLog&quot;);
		var sProdName = Inputs.GetProperty(&quot;Name&quot;);
		var VF_Is_Return = Inputs.GetProperty(&quot;VF_Is_Return&quot;);
		var AutoResolve = Inputs.GetProperty(&quot;AutoResolve&quot;);
		if (AutoResolve != &quot;Y&quot;)
		{
			AutoResolve = &quot;N&quot;;
		}
		var rootItemId = &quot;&quot;;
		var parentItemId = &quot;&quot;;
		var oInp = TheApplication().NewPropertySet();
		var oOut = TheApplication().NewPropertySet();		
		var psIn = TheApplication().NewPropertySet();
		var psOut = TheApplication().NewPropertySet();
		var sSysdate = &quot;&quot;;
		var oboNoLink = TheApplication().GetBusObject(&quot;VF_UK_BO_NoLink&quot;);
		var obcItems = null;
		var fieldRootItemId = &quot;&quot;;
		var fieldHeaderId = &quot;&quot;;

		if (sType == &quot;Quote&quot;)
		{
			obcItems = oboNoLink.GetBusComp(&quot;MACD Quote Item&quot;);
			rootItemId = Inputs.GetProperty(&quot;RootQuoteItemId&quot;);
			parentItemId = Inputs.GetProperty(&quot;ParQuoteItemId&quot;);
			fieldRootItemId = &quot;Root Quote Item Id&quot;;
			fieldHeaderId = &quot;Quote Id&quot;;
			if (parentItemId == &quot;&quot; || parentItemId == null)
			{
				parentItemId = Inputs.GetProperty(&quot;RootQuoteItemId&quot;);
			}
		}
		else
		{
			obcItems = oboNoLink.GetBusComp(&quot;MACD Order Entry - Line Items&quot;);
			rootItemId = Inputs.GetProperty(&quot;RootOrderItemId&quot;);
			parentItemId = Inputs.GetProperty(&quot;ParOrderItemId&quot;);
			fieldRootItemId = &quot;Root Order Item Id&quot;;
			fieldHeaderId = &quot;Order Header Id&quot;;
			if (parentItemId == &quot;&quot; || parentItemId == null)
			{
				parentItemId = Inputs.GetProperty(&quot;RootOrderItemId&quot;);
			}
		}

		var CfgStateCodeEPI = TheApplication().InvokeMethod(&quot;LookUpValue&quot;,&quot;CFG_ITEM_STATE_CD&quot;,&quot;Engine Picked Item&quot;);
		var CfgStateCodeURI = TheApplication().InvokeMethod(&quot;LookUpValue&quot;,&quot;CFG_ITEM_STATE_CD&quot;,&quot;User Requested Item&quot;);
		var oBS;
		var sPortId = &quot;&quot;;
		var sParPortId = &quot;&quot;;
		var errorMess = &quot;&quot;;
		Clib.strftime(sSysdate, &quot;%m/%d/%Y %H:%M:%S&quot;, Clib.localtime(Clib.time()));
		sInnerLog += &quot;Start AddItem with Product Id: &quot; + sProductId + &quot; - &quot; + sSysdate + &quot;\n&quot;;
		
		if(!(sProductId != null &amp;&amp; sProductId != &quot;&quot; &amp;&amp; sProdName  != null &amp;&amp; sProdName  != &quot;&quot;))
		{
			RetrieveProdData(sProductId,sProdName,portNum,sInnerLog);
		}
		
		with(obcItems)
		{
			ClearToQuery();
			ActivateField(&quot;Product&quot;);
			ActivateField(&quot;Product Id&quot;);
			ActivateField(fieldRootItemId);
			SetViewMode(AllView);
			SetSearchSpec(&quot;Id&quot;, &quot;&apos;&quot; + parentItemId + &quot;&apos;&quot;);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				psIn.SetProperty(&quot;ParentProductId&quot;, GetFieldValue(&quot;Product Id&quot;));
				psIn.SetProperty(&quot;ProductId&quot;, sProductId);
				GetAllPortNew(psIn, psOut);
				sParPortId = psOut.GetProperty(&quot;ParentPortId&quot;);
				sPortId = psOut.GetProperty(&quot;PortId&quot;);
			
				if(sParPortId == &quot;&quot; || sParPortId == null)
				{
					if (sPortId != &quot;&quot; &amp;&amp; sPortId != null)
					{
						sParPortId = sPortId;
					}
					else
					{
						Outputs.SetProperty(&quot;Result&quot;,&quot;KO&quot;);
						Outputs.SetProperty(&quot;Error Description&quot;, &quot;Error in configurator: Port Id not found&quot;);
						return(CancelOperation);
					}					
				}

				sInnerLog += &quot;AddItem: ProductName = &quot; + sProdName + &quot;\n&quot;;
				sInnerLog += &quot;AddItem: PortId = &quot; + sPortId + &quot;\n&quot;;
				sInnerLog += &quot;AddItem: ParentPortId = &quot; + sParPortId + &quot;\n&quot;;

				if (sType == &quot;Quote&quot;)
				{
					oInp.SetProperty(&quot;ProcessName&quot;,				&quot;VF AddItem To Quote WF&quot;);
					oInp.SetProperty(&quot;QuoteId&quot;,					GetFieldValue(&quot;Quote Id&quot;));
					oInp.SetProperty(&quot;PathId&quot;,					GetFieldValue(&quot;Integration Id&quot;));
					oInp.SetProperty(&quot;ParentProdName&quot;,			GetFieldValue(&quot;Product&quot;));
					oInp.SetProperty(&quot;ProdPathId&quot;,				&quot;&quot;);
					oInp.SetProperty(&quot;Product Prod Item Id&quot;,	sPortId);
					oInp.SetProperty(&quot;Product Port Item Id&quot;,	sParPortId);
					oInp.SetProperty(&quot;Product Id&quot;,				sProductId);
					oInp.SetProperty(&quot;ProdName&quot;,				sProdName);
					oInp.SetProperty(&quot;Action&quot;,					&quot;Add&quot;);
				}
				else
				{
					TheApplication().SetProfileAttr(&quot;AEC Root Prod Prom Id&quot;, GetFieldValue(&quot;AEC Root Prod Prom Id&quot;));
					TheApplication().SetProfileAttr(&quot;AEC Root Prod Prom Instance Id&quot;, GetFieldValue(&quot;AEC Root Prod Prom Instance Id&quot;));
					TheApplication().SetProfileAttr(&quot;VF Billing Payment Type&quot;, GetFieldValue(&quot;VF Payment Type Calc&quot;)); 
					oInp.SetProperty(&quot;ProcessName&quot;,       &quot;VF OM AddItem WF&quot;);
					oInp.SetProperty(&quot;RowId&quot;,             GetFieldValue(fieldHeaderId));
					oInp.SetProperty(&quot;IntegrationId&quot;,     GetFieldValue(&quot;Integration Id&quot;));
					oInp.SetProperty(&quot;ProdItemId&quot;,        sPortId);
					oInp.SetProperty(&quot;PortItemId&quot;,        sParPortId);
					oInp.SetProperty(&quot;ProductId&quot;,         sProductId);
					oInp.SetProperty(&quot;ProductName&quot;,       sProdName);
					oInp.SetProperty(&quot;InnerLog&quot;,          sInnerLog);
					oInp.SetProperty(&quot;IntegrationObject&quot;, &quot;SIS OM Order&quot;);
					oInp.SetProperty(&quot;TriggerEvent&quot;,      &quot;Y&quot;);
				}
				if (VF_Is_Return == &quot;N&quot;)
				{
					oInp.SetProperty(&quot;AutoResolve&quot;,&quot;Y&quot;);
				}
				else
				{
					oInp.SetProperty(&quot;AutoResolve&quot;,AutoResolve);
				}
				oInp.SetProperty(&quot;RootId&quot;,            GetFieldValue(fieldRootItemId));
				oInp.SetProperty(&quot;Quantity&quot;,          &quot;1&quot;);
				oBS = TheApplication().GetService(&quot;Workflow Process Manager&quot;);
				oBS.InvokeMethod(&quot;RunProcess&quot;, oInp, oOut);
			} // END if(FirstRecord())

			var searchExpr = &quot;&quot;;
			if (sProductId != &quot;&quot; &amp;&amp; sProductId != null)
			{
				searchExpr = &quot;&apos;&quot; + fieldRootItemId + &quot;&apos; = &apos;&quot; + rootItemId + &quot;&apos; AND [Product Id] = &apos;&quot; + sProductId+ &quot;&apos;&quot;;
			}
			else
			{
				searchExpr = &quot;&apos;&quot; + fieldRootItemId + &quot;&apos; = &apos;&quot; + rootItemId + &quot;&apos; AND [Part Number] = &apos;&quot; + portNum+ &quot;&apos;&quot;;
			}
			errorMess = oOut.GetProperty(&quot;Error Message&quot;);
			if (errorMess != &quot;&quot; &amp;&amp; errorMess != null)
			{
				Outputs.SetProperty(&quot;Result&quot;,&quot;KO&quot;);
				Outputs.SetProperty(&quot;Error Description&quot;, &quot;Error in configurator: &quot; + errorMess);
				return(CancelOperation);
			}
			sInnerLog = oOut.GetProperty(&quot;InnerLog&quot;);
			ClearToQuery();
			SetViewMode(AllView);
			SetSearchExpr(searchExpr);
			SetSortSpec(&quot;Created(DESCENDING)&quot;);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				var isRecurringProd = isRecurring(portNum);
				sInnerLog += &quot;AddItem - Part Number: &quot; + portNum + &quot;\n&quot;;
				
				if (isRecurringProd)
				{
					SetFieldValue(&quot;Cfg State Code&quot;,CfgStateCodeEPI);
					sInnerLog += &quot;AddItem - Cfg State Code: &quot; + CfgStateCodeEPI + &quot;\n&quot;;
				}
				else
				{
					SetFieldValue(&quot;Cfg State Code&quot;,CfgStateCodeURI);
					sInnerLog += &quot;AddItem - Cfg State Code: &quot; + CfgStateCodeURI + &quot;\n&quot;;
				}
				WriteRecord();
				var sItemId = GetFieldValue(&quot;Id&quot;);
				var sAssetIntId = GetFieldValue(&quot;Asset Integration Id&quot;);
				Outputs.SetProperty(&quot;Result&quot;, &quot;OK&quot;);
				Outputs.SetProperty(&quot;AssetIntId&quot;, sAssetIntId);
				
				if (sType == &quot;Quote&quot;)
				{
					Outputs.SetProperty(&quot;QuoteItemId&quot;, sItemId);
					Outputs.SetProperty(&quot;ItemId&quot;, sItemId);
				}
				else
				{
					Outputs.SetProperty(&quot;OrderItemId&quot;, sItemId);
					Outputs.SetProperty(&quot;ItemId&quot;, sItemId);
				}
			}
			else
			{
				Outputs.SetProperty(&quot;Result&quot;, &quot;KO&quot;);
				Outputs.SetProperty(&quot;Error Description&quot;, &quot;Error in configurator: error adding order item&quot;);
			}
		}
	}	
	catch(e)
	{
		errorMess = e.toString();
		Outputs.SetProperty(&quot;Result&quot;,&quot;KO&quot;);
		Outputs.SetProperty(&quot;Error Description&quot;, errorMess);
	}
	finally
	{
		psIn = null;
		psOut = null;
		oBS = null;
		oInp = null;
		oOut = null;
		obcItems = null;
		oboNoLink = null;
		Clib.strftime(sSysdate, &quot;%m/%d/%Y %H:%M:%S&quot;, Clib.localtime(Clib.time()));
		sInnerLog += &quot;End AddItem with Product Id: &quot; + sProductId + &quot; - &quot; + sSysdate + &quot;\n&quot;;
		Outputs.SetProperty(&quot;sInnerLog&quot;, sInnerLog);
		Outputs.SetProperty(&quot;sProdName&quot;, sProdName);
	}
}"
			   SEQUENCE="7"
			   UPDATED="10/20/2016 05:36:12"
			   UPDATED_BY="ACN_PRIYANKAD"
			   CREATED="07/07/2011 10:33:14"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="AddProductInquireAll"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function AddProductInquireAll(Inputs,Outputs)
{
	try{
		var prodName = Inputs.GetProperty(&quot;ProductName&quot;);
		var ListValue = Inputs.GetProperty(&quot;ListValue&quot;).split(&quot;,&quot;);
		var ListStore = Inputs.GetProperty(&quot;ListStore&quot;).split(&quot;,&quot;);
		var field;
		var LOQueryCriteria = TheApplication().NewPropertySet();
		LOQueryCriteria = Inputs.GetChild(0);
		var valueExpr= TheApplication().NewPropertySet();
		var valueExprTemp;		
		FindTypeInSiebelMessage(Inputs,LOQueryCriteria,&quot;ListOfQueryCriteria&quot;);
			for(var i=0; i&lt;LOQueryCriteria.GetChildCount();i++){
				
			var prod = LOQueryCriteria.GetChild(i).GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetProperty(&quot;ElementPath&quot;);
			if(LOQueryCriteria.GetChild(i).GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetProperty(&quot;ElementPath&quot;)==&quot;PRODUCTCODE&quot;){

				valueExpr = LOQueryCriteria.GetChild(i).GetChild(0).GetChild(0).GetChild(0).GetChild(0); 
				LOQueryCriteria.GetChild(i).GetChild(0).GetChild(0).GetChild(0).RemoveChild(0); 
				for (field in ListValue){ 
					valueExprTemp = TheApplication().NewPropertySet();
					valueExprTemp = valueExpr.Copy();
					valueExprTemp.GetChild(0).GetChild(0).SetProperty(&quot;Value_0_Value&quot;,ListValue[field]);
					LOQueryCriteria.GetChild(i).GetChild(0).GetChild(0).GetChild(0).AddChild(valueExprTemp); 
					valueExprTemp = null;
				}  
			}  
			if(LOQueryCriteria.GetChild(i).GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetProperty(&quot;ElementPath&quot;)==&quot;SOURCEID&quot;){
			
				valueExpr = LOQueryCriteria.GetChild(i).GetChild(0).GetChild(0).GetChild(0).GetChild(0); 
				LOQueryCriteria.GetChild(i).GetChild(0).GetChild(0).GetChild(0).RemoveChild(0); 
				for (field in ListStore){ 
					valueExprTemp = TheApplication().NewPropertySet();
					valueExprTemp = valueExpr.Copy();
					valueExprTemp.GetChild(0).GetChild(0).SetProperty(&quot;Value_0_Value&quot;,ListStore[field]);  
					LOQueryCriteria.GetChild(i).GetChild(0).GetChild(0).GetChild(0).AddChild(valueExprTemp); 
					valueExprTemp = null;
				}  
			}  
		}
		
		FindTypeRemove(Inputs.GetChild(0),&quot;ListOfQueryCriteria&quot;);    
		
		FindTypeAdd(Inputs.GetChild(0),LOQueryCriteria,&quot;ListOfQueryCriteria&quot;);
		
		var Response = TheApplication().NewPropertySet();
		Response = Inputs.GetChild(0).Copy();    
		Outputs.AddChild(Response);	
	}
	catch(e){
		throw(e); 
	}
	finally{
		LOQueryCriteria = null;
		valueExprTemp = null;
		ListValue = null;
		Response =null;
		valueExpr = null;
	}
}"
			   SEQUENCE="8"
			   UPDATED="10/20/2016 05:36:12"
			   UPDATED_BY="ACN_PRIYANKAD"
			   CREATED="10/03/2011 05:38:15"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="AddProductPortIn"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function AddProductPortIn(Inputs,Outputs)
{
	try{
		var ListMSISDN = Inputs.GetProperty(&quot;ListMSISDN&quot;).split(&quot;,&quot;);
		var ListPac = Inputs.GetProperty(&quot;ListPac&quot;).split(&quot;,&quot;);
		var ListPortDt = Inputs.GetProperty(&quot;ListPortDt&quot;).split(&quot;,&quot;);		
		var field;
		var LOQueryCriteria = TheApplication().NewPropertySet();
		LOQueryCriteria = Inputs.GetChild(0);
		var PortInCluster;
		var PortInClusterTemp;		
		FindTypeInSiebelMessage(Inputs,LOQueryCriteria,&quot;ListOfClusterResponse&quot;);
					PortInCluster = TheApplication().NewPropertySet();
				PortInCluster = LOQueryCriteria.GetChild(0);
//				PortInCluster = LOQueryCriteria.GetChild(0);
				LOQueryCriteria.RemoveChild(0); 
				for (field in ListMSISDN)
				{ 
					PortInClusterTemp = TheApplication().NewPropertySet();
					PortInClusterTemp = PortInCluster.GetChild(0).Copy();
					PortInClusterTemp.SetProperty(&quot;CTN&quot;,ListMSISDN[field]);
					PortInClusterTemp.SetProperty(&quot;PAC&quot;,ListPac[field]);
					PortInClusterTemp.SetProperty(&quot;portDate&quot;,ListPortDt[field]);					
					PortInCluster.AddChild(PortInClusterTemp); 
					PortInClusterTemp = null;
				}  
		PortInCluster.RemoveChild(0); 
		LOQueryCriteria.AddChild(PortInCluster); 
		
		FindTypeRemove(Inputs.GetChild(0),&quot;DataArea&quot;);    
		
		FindTypeAdd(Inputs.GetChild(0),LOQueryCriteria,&quot;DataArea&quot;);
		
		var Response = TheApplication().NewPropertySet();
		Response = Inputs.GetChild(0).Copy();    
		Outputs.AddChild(Response);	
	}
	catch(e){
		throw(e); 
	}
	finally{
		LOQueryCriteria = null;
		PortInClusterTemp = null;
		ListMSISDN = null;
		Response =null;
		PortInCluster = null;
	}
}"
			   SEQUENCE="9"
			   UPDATED="10/20/2016 05:36:12"
			   UPDATED_BY="ACN_PRIYANKAD"
			   CREATED="05/22/2013 07:40:34"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="AddPropSet"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="/**************************************************
	NAME:              	AddPropSet		
	DESCRIPTION: 		Add a PropertySet in a SiebelMessage to the level indicated.
	INPUT PARAMETERS:	&quot;PropName&quot; to add, &quot;ParentPropName&quot; to find the level and  &quot;SiebelMessage&quot; in which to try level and add Property.
	OUTPUT PARAMETERS:	&quot;SiebelMessage&quot; with PropertySet added. 
	AUTHOR:				Pasqualina Coronato
	DATE CREATED:		06-12-2011 by ACN_CORONATOP
*************************************************/ 
function AddPropSet(Inputs, Outputs)
{
	try{
		if(Inputs.PropertyExists(&quot;PropName&quot;)){
			propName = Inputs.GetProperty(&quot;PropName&quot;);
			parentPropName = Inputs.GetProperty(&quot;ParentPropName&quot;);
		}
		 
		if(Inputs.GetType() == parentPropName){		
			Inputs.SetProperty(propName,&quot;&quot;);				
			return(CancelOperation);
		}
		for(var x=0; x&lt;Inputs.GetChildCount();x++){
			AddPropSet(Inputs.GetChild(x),Outputs);
		}
	}
	catch(e){
		throw(e);
	}
	finally{ 
	}
}"
			   SEQUENCE="10"
			   UPDATED="10/20/2016 05:36:12"
			   UPDATED_BY="ACN_PRIYANKAD"
			   CREATED="12/06/2011 16:47:49"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="AddQuoteItem"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function AddQuoteItem(Inputs, Outputs)
{
	try
	{
		var oboMACDNoLink = TheApplication().GetBusObject(&quot;VF_UK_BO_NoLink&quot;);
		var obcMACDQuoteItems = oboMACDNoLink.GetBusComp(&quot;MACD Quote Item&quot;);
		var obcInternalProduct = oboMACDNoLink.GetBusComp(&quot;Internal Product&quot;);
		var obcMACDQuoteItemsXA = oboMACDNoLink.GetBusComp(&quot;MACD Quote Item XA&quot;);
		var CfgStateCodeEPI = TheApplication().InvokeMethod(&quot;LookUpValue&quot;,&quot;CFG_ITEM_STATE_CD&quot;,&quot;Engine Picked Item&quot;);
		var CfgStateCodeURI = TheApplication().InvokeMethod(&quot;LookUpValue&quot;,&quot;CFG_ITEM_STATE_CD&quot;,&quot;User Requested Item&quot;);
		var oBS;
		var sPortId = &quot;&quot;;
		var sParPortId = &quot;&quot;;
		var sProductId = Inputs.GetProperty(&quot;ProductId&quot;);
		var sProdName = Inputs.GetProperty(&quot;Name&quot;);
		var portNum = Inputs.GetProperty(&quot;Part#&quot;);
		var oInp = TheApplication().NewPropertySet();
		var oOut = TheApplication().NewPropertySet();		
		var psIn = TheApplication().NewPropertySet();
		var psOut = TheApplication().NewPropertySet();
		var sInnerLog = Inputs.GetProperty(&quot;sInnerLog&quot;);
		var sSysdate = &quot;&quot;;
	
		Clib.strftime(sSysdate, &quot;%m/%d/%Y %H:%M:%S&quot;, Clib.localtime(Clib.time()));
		sInnerLog += &quot;Start AddQuoteItem with Product Id: &quot; + sProductId + &quot; - &quot; + sSysdate + &quot;\n&quot;;
		
		if(!(sProductId != null &amp;&amp; sProductId != &quot;&quot; &amp;&amp; sProdName  != null &amp;&amp; sProdName  != &quot;&quot;))
		{
			if(Inputs.GetProperty(&quot;ProductId&quot;) != &quot;&quot; &amp;&amp; Inputs.GetProperty(&quot;ProductId&quot;) != null)
			{
				with(obcInternalProduct)
				{
					ActivateField(&quot;Part #&quot;);
					ClearToQuery();
					SetViewMode(AllView);
					SetSearchSpec(&quot;Id&quot;, &quot;&apos;&quot; + Inputs.GetProperty(&quot;ProductId&quot;) + &quot;&apos;&quot;);
					ExecuteQuery(ForwardOnly);
					if(FirstRecord())
					{
						sProductId = GetFieldValue(&quot;Id&quot;);
						sProdName = GetFieldValue(&quot;Name&quot;);
						portNum = GetFieldValue(&quot;Part #&quot;);
					}
				}
			}
			else
			{
				with(obcInternalProduct)
				{
					ClearToQuery();
					SetViewMode(AllView);
					SetSearchSpec(&quot;Part #&quot;, &quot;&apos;&quot; + Inputs.GetProperty(&quot;Part#&quot;) + &quot;&apos;&quot;);
					ExecuteQuery(ForwardOnly);
					if(FirstRecord())
					{
						sProductId = GetFieldValue(&quot;Id&quot;);
						sProdName = GetFieldValue(&quot;Name&quot;);
					}
				}
			} // END else
		} // END if(!(sProductId != null &amp;&amp; sProductId != &quot;&quot; &amp;&amp; sProdName  != null &amp;&amp; sProdName  != &quot;&quot;))
		
		with(obcMACDQuoteItems)
		{
			ClearToQuery();
			//ActivateField(&quot;Asset Integration Id&quot;);
			ActivateField(&quot;Quote Id&quot;);
			ActivateField(&quot;Product&quot;);
			ActivateField(&quot;Product Id&quot;);
			SetViewMode(AllView);
			SetSearchSpec(&quot;Id&quot;, &quot;&apos;&quot; + Inputs.GetProperty(&quot;RootQuoteItemId&quot;) + &quot;&apos;&quot;);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				psIn.SetProperty(&quot;ParentProductId&quot;, GetFieldValue(&quot;Product Id&quot;));
				psIn.SetProperty(&quot;ProductId&quot;, sProductId);
				GetAllPortNew(psIn, psOut);
				sParPortId = psOut.GetProperty(&quot;ParentPortId&quot;);
				sPortId = psOut.GetProperty(&quot;PortId&quot;);
			
				if(sParPortId == &quot;&quot; || sParPortId == null)
				{
					sParPortId = sPortId;
				}
				sInnerLog += &quot;AddQuoteItem: ProductName = &quot; + sProdName + &quot;\n&quot;;
				sInnerLog += &quot;AddQuoteItem: PortId = &quot; + sPortId + &quot;\n&quot;;
				sInnerLog += &quot;AddQuoteItem: ParentPortId = &quot; + sParPortId + &quot;\n&quot;;
				
				oInp.SetProperty(&quot;ProcessName&quot;,				&quot;VF AddItem To Quote WF&quot;);
				oInp.SetProperty(&quot;QuoteId&quot;,					GetFieldValue(&quot;Quote Id&quot;));
				oInp.SetProperty(&quot;RootId&quot;,					GetFieldValue(&quot;Id&quot;));
				oInp.SetProperty(&quot;PathId&quot;,					GetFieldValue(&quot;Integration Id&quot;));
				oInp.SetProperty(&quot;ParentProdName&quot;,			GetFieldValue(&quot;Product&quot;));
				oInp.SetProperty(&quot;ProdPathId&quot;,				&quot;&quot;);
				oInp.SetProperty(&quot;Product Prod Item Id&quot;,	sPortId);
				oInp.SetProperty(&quot;Product Port Item Id&quot;,	sParPortId);
				oInp.SetProperty(&quot;Product Id&quot;,				sProductId);
				oInp.SetProperty(&quot;ProdName&quot;,				sProdName);
				oInp.SetProperty(&quot;Action&quot;,					&quot;Add&quot;);
				oInp.SetProperty(&quot;Quantity&quot;,          		&quot;1&quot;);
				oBS = TheApplication().GetService(&quot;Workflow Process Manager&quot;);
				oBS.InvokeMethod(&quot;RunProcess&quot;, oInp, oOut);
			} // END if(FirstRecord())

			ClearToQuery();
			SetViewMode(AllView);
			SetSearchExpr(&quot;[Root Quote Item Id] = &apos;&quot; + Inputs.GetProperty(&quot;RootQuoteItemId&quot;) + &quot;&apos; AND ([Product Id] = &apos;&quot; + Inputs.GetProperty(&quot;ProductId&quot;) + &quot;&apos; OR [Part Number] = &apos;&quot; + Inputs.GetProperty(&quot;Part#&quot;) + &quot;&apos;)&quot;);
			SetSortSpec(&quot;Created(DESCENDING)&quot;);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{				
				var isRecurringProd = isRecurring(portNum);
				sInnerLog += &quot;AddQuoteItem - Part Number: &quot; + portNum + &quot;\n&quot;;

				if (isRecurringProd)
				{
					SetFieldValue(&quot;Cfg State Code&quot;,CfgStateCodeEPI);
					sInnerLog += &quot;AddQuoteItem - Cfg State Code: &quot; + CfgStateCodeEPI + &quot;\n&quot;;
				}
				else
				{
					SetFieldValue(&quot;Cfg State Code&quot;,CfgStateCodeURI);
					sInnerLog += &quot;AddQuoteItem - Cfg State Code: &quot; + CfgStateCodeURI + &quot;\n&quot;;
				}
				WriteRecord(); 
				var sQuoteItemId = GetFieldValue(&quot;Id&quot;);
				var sAssetIntId = GetFieldValue(&quot;Asset Integration Id&quot;);
				Outputs.SetProperty(&quot;Result&quot;, &quot;OK&quot;);
				Outputs.SetProperty(&quot;QuoteItemId&quot;, sQuoteItemId);
				Outputs.SetProperty(&quot;ItemId&quot;, sQuoteItemId);
				Outputs.SetProperty(&quot;AssetIntId&quot;, sAssetIntId);
			}
			else
			{
				Outputs.SetProperty(&quot;Result&quot;, &quot;KO&quot;);
				Outputs.SetProperty(&quot;Error Description&quot;, &quot;Error in configurator: error adding quote item&quot;);
			}
		} // END with(obcMACDQuoteItems)
	} // END try
	catch(e)
	{
		Outputs.SetProperty(&quot;Result&quot;,&quot;KO&quot;);
		Outputs.SetProperty(&quot;Error Description&quot;, e.errText);
	}
	finally
	{
		psIn = null;
		psOut = null;
		oBS = null;
		oInp = null;
		oOut = null;
		obcMACDQuoteItemsXA = null;
		obcInternalProduct = null;
		obcMACDQuoteItems = null;
		oboMACDNoLink = null;
		Clib.strftime(sSysdate, &quot;%m/%d/%Y %H:%M:%S&quot;, Clib.localtime(Clib.time()));
		sInnerLog += &quot;End AddQuoteItem with Product Id: &quot; + sProductId + &quot; - &quot; + sSysdate + &quot;\n&quot;;
		Outputs.SetProperty(&quot;sInnerLog&quot;, sInnerLog);
	}
}"
			   SEQUENCE="11"
			   UPDATED="10/20/2016 05:36:12"
			   UPDATED_BY="ACN_PRIYANKAD"
			   CREATED="03/05/2012 17:43:35"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="AddWorkingDays"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function AddWorkingDays(Inputs, Outputs)
{
    try
    {
			var DateSet	= new Date();
			var nDays = Inputs.GetProperty (&quot;NumberOfDays&quot;);
			nDays = ToNumber(nDays);
		//	nDays=1;
		//	var LOVDateval= FieldValue + &quot; 00:00:00&quot;;
		//	var Dateholiday = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_HOLIDAY&quot;,LOVDateval);
			DateSet.setDate(DateSet.getDate()+nDays); 	
			var Dateholiday;
			var dtArray;// Oracle Review Memory Leak Deallocation 31/07/2014
			do 
			{
				var strDate = DateToString(DateSet);
				dtArray = strDate.split(&quot; &quot;); // Oracle Review Memory Leak Deallocation 31/07/2014
				strDate = dtArray[0];
				Dateholiday =&quot;&quot;;
				Dateholiday = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_HOLIDAY&quot;,strDate);
				if (Dateholiday !=&quot;&quot;)
					DateSet.setDate(DateSet.getDate()+1);
				var day = DateSet.getDay();
		//	DateSet=DateSet+ToNumber(nDays);
				if (ToNumber(day) == 0) 
				{
					Dateholiday = &quot;Y&quot;
					DateSet.setDate(DateSet.getDate()+1); 
				}
				if (ToNumber(day) == 6) 
				{
					DateSet.setDate(DateSet.getDate()+2); 
					Dateholiday = &quot;Y&quot;
				}
			} while (Dateholiday!=&quot;&quot;);
			
			var retDate = DateToString(DateSet);	
			dtArray = retDate.split(&quot; &quot;);
				retDate = dtArray[0];
			Outputs.SetProperty(&quot;OutputDate&quot;,retDate);	
			
    }
    catch(e)
    {
         var erroMess = e.toString();
         
    }
    finally
    {
		DateSet = null;// Oracle Review Memory Leak Deallocation 31/07/2014
		dtArray = null;// Oracle Review Memory Leak Deallocation 31/07/2014
    }
 
}"
			   SEQUENCE="12"
			   UPDATED="10/20/2016 05:36:12"
			   UPDATED_BY="ACN_PRIYANKAD"
			   CREATED="09/03/2013 14:25:31"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CalcDueDate"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CalcDueDate(Inputs, Outputs)
{
	try
	{
		var id = Inputs.GetProperty(&quot;RowId&quot;);
		var oBO = TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);
		var oliBC = oBO.GetBusComp(&quot;BIP_Order_Entry_Line_Items&quot;);
		var oBC = oBO.GetBusComp(&quot;Order Entry - Orders&quot;);
		var action;
		var effectenddate;
		var plname;
		var store;
		var delivery;
		var portin;
//		var atpstat;
		var today;// = new Date();
		var today75;
//		var portdate;
//		var recvdate;
//		var calcdate;
		var orderid;
		var frec;
		var mbs;
		
		with(oliBC)
		{
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(&quot;BIP_VFPortIn&quot;);
			ActivateField(&quot;Previous Contract End Date&quot;);
			ActivateField(&quot;VF MBS Id&quot;);
			ActivateField(&quot;VF SubAction&quot;);
	//		ActivateField(&quot;VF_StoreCheck&quot;);
			ActivateField(&quot;VF_Check_PL&quot;);
	//		ActivateField(&quot;ATP Status&quot;);
	//		ActivateField(&quot;VF_Carrier_Priority&quot;);
	//		ActivateField(&quot;VF Port In Date&quot;);
	//		ActivateField(&quot;VF_Order_Due_Date&quot;);
			ActivateField(&quot;VF Date Calc&quot;);
			ActivateField(&quot;VF_Today&quot;);
			SetSearchSpec(&quot;Id&quot;, id);
			ExecuteQuery();
			frec = FirstRecord();
			if (frec)
			{
				action = GetFieldValue(&quot;VF SubAction&quot;);
				effectenddate = GetFieldValue(&quot;Previous Contract End Date&quot;);
				plname = GetFieldValue(&quot;VF_Check_PL&quot;);
				mbs = GetFieldValue(&quot;VF MBS Id&quot;);
	//			store = GetFieldValue(&quot;VF_StoreCheck&quot;);
	//			delivery = GetFieldValue(&quot;VF_Carrier_Priority&quot;);
				portin = GetFieldValue(&quot;BIP_VFPortIn&quot;);
	//			atpstat = GetFieldValue(&quot;ATP Status&quot;);
	//			portdate = GetFieldValue(&quot;VF Port In Date&quot;);
	//			recvdate = GetFieldValue(&quot;VF_Order_Due_Date&quot;);
				today = GetFieldValue(&quot;VF_Today&quot;);
				today75 = GetFieldValue(&quot;VF Date Calc&quot;);
				orderid = GetFieldValue(&quot;Order Header Id&quot;);
				if((effectenddate == &quot;&quot; || effectenddate == null) &amp;&amp; (action == &quot;C&quot; || action == &quot;Upgrade&quot; || action == &quot;U&quot;) &amp;&amp; (mbs != &quot;&quot; &amp;&amp; mbs != &quot;null&quot;))
				{
					ClearToQuery();
					SetSearchSpec(&quot;Id&quot;, mbs);
					ExecuteQuery();
					if(FirstRecord())
						effectenddate = GetFieldValue(&quot;Previous Contract End Date&quot;);
					ClearToQuery();
					SetSearchSpec(&quot;Id&quot;, id);
					ExecuteQuery();
				}
			}
		}
		
		with(oBC)
		{
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(&quot;Carrier Priority&quot;);
			ActivateField(&quot;VF_StoreCheck&quot;);
			SetSearchSpec(&quot;Id&quot;, orderid);
			ExecuteQuery();
			if (FirstRecord())
			{
				store = GetFieldValue(&quot;VF_StoreCheck&quot;);
				delivery = GetFieldValue(&quot;Carrier Priority&quot;);
	//			action = GetFieldValue(&quot;VF_Sub_Action_Calc&quot;);
			}
		}
		
/*		if(effectenddate &gt; recvdate)
			calcdate = effectenddate;
		else
			calcdate = recvdate;
*/
		if(delivery == &quot;Week day noon - 6pm&quot; || delivery == &quot;Week day 8am - 10am&quot; 
			|| delivery == &quot;Week day 8am - noon&quot; || delivery == &quot;Week day 8am - 6pm&quot;
			|| delivery == &quot;Royal Mail Saturday 8am - 1pm&quot; || delivery == &quot;Remote area 2Weekdays 8am-6pm&quot;
			|| delivery == &quot;Royal Mail 1st Class Post&quot;)
			
			delivery = &quot;Delivery to Address&quot;;
		
		
		if(portin == &quot;Y&quot;)
		//	Outputs.SetProperty(&quot;DueDate&quot;, portdate);
			Outputs.SetProperty(&quot;DueDate&quot;, &quot;on the day your number transfers&quot;);
		//else if((action == &quot;New Connection&quot; || action == &quot;N&quot;) &amp;&amp; plname == &quot;N&quot;)
		else if(((action == &quot;New Connection&quot; || action == &quot;N&quot;) || (action == &quot;PretoPost&quot; || action == &quot;Q&quot;))) //&amp;&amp; plname == &quot;N&quot;) //GPG:[30-Sep-14 Defect#51301]  [ASP 13-Oct-14 QC 51776 plname]
			{
				if(store == &quot;Retail Store&quot;)// &amp;&amp; atpstat == &quot;Reserved&quot;)
				{
					if(delivery == &quot;Collect in store&quot;)
		//				Outputs.SetProperty(&quot;DueDate&quot;, recvdate);
						Outputs.SetProperty(&quot;DueDate&quot;, &quot;when you receive your order and you&apos;re connected to the network&quot;);
					else
		//				Outputs.SetProperty(&quot;DueDate&quot;, today);
						Outputs.SetProperty(&quot;DueDate&quot;, &quot;today&quot;);
				}
				else if(store == &quot;Warehouse&quot; &amp;&amp; delivery == &quot;Deliver to store&quot;)// &amp;&amp; atpstat == &quot;ANY&quot;)
		//				Outputs.SetProperty(&quot;DueDate&quot;, recvdate);
						Outputs.SetProperty(&quot;DueDate&quot;, &quot;when you receive your order and you&apos;re connected to the network&quot;);
				else if (store == &quot;Warehouse&quot; &amp;&amp; delivery == &quot;Delivery to Address&quot;)// &amp;&amp; atpstat == &quot;ANY&quot;)
		//				Outputs.SetProperty(&quot;DueDate&quot;, recvdate);
						Outputs.SetProperty(&quot;DueDate&quot;, &quot;on the expected delivery date of your order&quot;);
		
				else
		//			Outputs.SetProperty(&quot;DueDate&quot;, recvdate);
					Outputs.SetProperty(&quot;DueDate&quot;, &quot;&quot;);
			}
		else if((action == &quot;C&quot; || action == &quot;Upgrade&quot; || action == &quot;U&quot;) &amp;&amp; plname == &quot;N&quot;)
			{
				if(today &gt; effectenddate)
				{
					if(store == &quot;Retail Store&quot;)// &amp;&amp; atpstat == &quot;Reserved&quot;)
					{
						if(delivery == &quot;Collect in store&quot;)
		//					Outputs.SetProperty(&quot;DueDate&quot;, recvdate);
							Outputs.SetProperty(&quot;DueDate&quot;, &quot;when you receive your order&quot;);
						else
		//					Outputs.SetProperty(&quot;DueDate&quot;, today);
							Outputs.SetProperty(&quot;DueDate&quot;, &quot;today&quot;);
					}
					else if(store == &quot;Warehouse&quot; &amp;&amp; delivery == &quot;Deliver to store&quot;)// &amp;&amp; atpstat == &quot;ANY&quot;)
		//				Outputs.SetProperty(&quot;DueDate&quot;, recvdate);
						Outputs.SetProperty(&quot;DueDate&quot;, &quot;when you receive your order&quot;);
					else if(store == &quot;Warehouse&quot; &amp;&amp; delivery == &quot;Delivery to Address&quot;)// &amp;&amp; atpstat == &quot;ANY&quot;)
		//				Outputs.SetProperty(&quot;DueDate&quot;, recvdate);
						Outputs.SetProperty(&quot;DueDate&quot;, &quot;on the expected delivery date of your order&quot;);

					else
		//			Outputs.SetProperty(&quot;DueDate&quot;, recvdate);
					Outputs.SetProperty(&quot;DueDate&quot;, &quot;&quot;);
				}
				
				else if (today75 &gt;= effectenddate &amp;&amp; effectenddate &gt;= today)
					{
						if(store == &quot;Retail Store&quot;)// &amp;&amp; atpstat == &quot;Reserved&quot;)
						{
							if(delivery == &quot;Collect in store&quot;)
		//						Outputs.SetProperty(&quot;DueDate&quot;, calcdate);
								Outputs.SetProperty(&quot;DueDate&quot;, &quot;the day you receive your order or on the day your current contract ends; whichever is later&quot;);							
							else
		//						Outputs.SetProperty(&quot;DueDate&quot;, effectenddate);
								Outputs.SetProperty(&quot;DueDate&quot;, &quot;on the day your current contract ends&quot;);
						}
						else if(store == &quot;Warehouse&quot; &amp;&amp; delivery == &quot;Deliver to store&quot;)// &amp;&amp; atpstat == &quot;ANY&quot;)
		//					Outputs.SetProperty(&quot;DueDate&quot;, recvdate);
							Outputs.SetProperty(&quot;DueDate&quot;, &quot;the day you receive your order or on the day your current contract ends; whichever is later&quot;);
						else if(store == &quot;Warehouse&quot; &amp;&amp; delivery == &quot;Delivery to Address&quot;)// &amp;&amp; atpstat == &quot;ANY&quot;)
		//					Outputs.SetProperty(&quot;DueDate&quot;, recvdate);
							Outputs.SetProperty(&quot;DueDate&quot;, &quot;on the expected delivery date of your order or on the day your current contract ends; whichever is later&quot;);						
						else
		//					Outputs.SetProperty(&quot;DueDate&quot;, calcdate);
							Outputs.SetProperty(&quot;DueDate&quot;, &quot;&quot;);
					}
				else
		//			Outputs.SetProperty(&quot;DueDate&quot;, recvdate);
					Outputs.SetProperty(&quot;DueDate&quot;, &quot;&quot;);
			}

			else if((action == &quot;C&quot; || action == &quot;Upgrade&quot; || action == &quot;U&quot;) &amp;&amp; plname == &quot;Y&quot;)
			{	
				if(store == &quot;Retail Store&quot;)// &amp;&amp; atpstat == &quot;Reserved&quot;)
					{
						if(delivery == &quot;Collect in store&quot;)
		//					Outputs.SetProperty(&quot;DueDate&quot;, recvdate);
							Outputs.SetProperty(&quot;DueDate&quot;, &quot;when you receive your order&quot;);
						else
		//					Outputs.SetProperty(&quot;DueDate&quot;, today);
							Outputs.SetProperty(&quot;DueDate&quot;, &quot;today&quot;);
					}
				else if(store == &quot;Warehouse&quot; &amp;&amp; delivery == &quot;Deliver to store&quot;)// &amp;&amp; atpstat == &quot;ANY&quot;)
		//				Outputs.SetProperty(&quot;DueDate&quot;, recvdate);
						Outputs.SetProperty(&quot;DueDate&quot;, &quot;when you receive your order&quot;);
				else
		//			Outputs.SetProperty(&quot;DueDate&quot;, recvdate);
					Outputs.SetProperty(&quot;DueDate&quot;, &quot;&quot;);
			}
			//[APhadnaik]:Start:QC:71026: Added below conditions for TV
			else if((action == &quot;C&quot; || action == &quot;Upgrade&quot; || action == &quot;U&quot;) &amp;&amp; plname == &quot;TV&quot;)
			{
				if(store == &quot;Retail Store&quot;)
				{
					if(delivery == &quot;Collect in store&quot;)
							Outputs.SetProperty(&quot;DueDate&quot;, &quot;when you receive your order&quot;);
					else
							Outputs.SetProperty(&quot;DueDate&quot;, &quot;today&quot;);
				}
				else if(store == &quot;Warehouse&quot;)
				{
					if(delivery == &quot;Deliver to store&quot;)
							Outputs.SetProperty(&quot;DueDate&quot;, &quot;when you receive your order&quot;);
					else if(delivery == &quot;Delivery to Address&quot;)
							Outputs.SetProperty(&quot;DueDate&quot;, &quot;on the expected delivery date of your order&quot;);
					else
						Outputs.SetProperty(&quot;DueDate&quot;, &quot;&quot;);
				}
			}//[APhadnaik]:End
			else
		//		Outputs.SetProperty(&quot;DueDate&quot;, recvdate);
				Outputs.SetProperty(&quot;DueDate&quot;, &quot;&quot;);
				
	}

	catch(e)
	{
		throw e;
	}
	
	finally
	{
		id = null;
		oBC = null;
		oliBC = null;
		oBO = null;
	}
}"
			   SEQUENCE="13"
			   UPDATED="10/20/2016 05:36:12"
			   UPDATED_BY="ACN_PRIYANKAD"
			   CREATED="02/27/2014 04:21:15"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CalculateDisconnectDiscount"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CalculateDisconnectDiscount(Inputs,Outputs)
{
	try{
		var DiscountTypeD1 = Inputs.GetProperty(&quot;DiscountTypeD1&quot;);
		//var percentage = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_PERCENTAGE&quot;, &quot;DISC_PERCENTAGE&quot;);	
		var percentage = &quot;0&quot;;	//[VF Jinesh R15.3 08-04-2016] updated for Defect 68330
		var Promotion = Inputs.GetProperty(&quot;Promotion&quot;);
		if(DiscountTypeD1 == &quot;GBP&quot;)
		{ 
			var DisconnectionMonths = ToNumber(Inputs.GetProperty(&quot;DisconnectionMonths&quot;));
			var DiscountAmount = Inputs.GetProperty(&quot;DiscountAmountD1&quot;);
			var AttributeValMonthsD1 = Inputs.GetProperty(&quot;AttributeValMonthsD1&quot;);
			var ParentOrderItemIdD1 = Inputs.GetProperty(&quot;ParentOrderItemIdD1&quot;);
			AttributeValMonthsD1 = ToNumber(AttributeValMonthsD1);
			DiscountAmount = DiscountAmount.replace(&quot;,&quot;, &quot;.&quot;);
			DiscountAmount = ToNumber(DiscountAmount);
			var sDispName = &quot;&quot;;
			var sCharVal = &quot;&quot;;
			var sNum = &quot;&quot;;
			//DiscountAmount = DiscountAmount*10;
			var MonthsRemaininWithDiscount = AttributeValMonthsD1 - DisconnectionMonths;
			if(Promotion == 0)
			{

					var oBO = TheApplication().GetBusObject(&quot;VF_UK_BO_NoLink&quot;);
					var oBC = oBO.GetBusComp(&quot;VF Asset Mgmt - Asset XA&quot;);
					with(oBC)
					{
						
							SetViewMode(AllView);
							ClearToQuery();
							
							ActivateField(&quot;Display Name&quot;);
							ActivateField(&quot;Text Value&quot;);
				
							ActivateField(&quot;Numeric Value&quot;);
							ActivateField(&quot;Object Id&quot;);
							SetSearchSpec(&quot;Object Id&quot;, ParentOrderItemIdD1);
							ExecuteQuery();
var rec = CountRecords();

							var frec = FirstRecord();
							while(frec)
							{
								 sDispName = GetFieldValue(&quot;Display Name&quot;);
								if (sDispName == &quot;DurationUnitOfMeasure&quot;)
								{
								 sCharVal = GetFieldValue(&quot;Text Value&quot;);
								 }
								 else if (sDispName == &quot;Duration&quot;)
								 {
								 sNum = GetFieldValue(&quot;Numeric Value&quot;);
								 sNum = ToNumber(sNum);
								 }
								frec = NextRecord();
							}

							if (sCharVal == &quot;Months&quot;)
							{
								if ((sNum &gt; DisconnectionMonths) &amp;&amp; (sNum &lt; AttributeValMonthsD1))
								{
									MonthsRemaininWithDiscount = sNum - DisconnectionMonths;
								}
								else if ((sNum &gt; AttributeValMonthsD1) || (sNum = AttributeValMonthsD1))
								{
									MonthsRemaininWithDiscount = AttributeValMonthsD1 - DisconnectionMonths;

								}									
							}
						
					}	
				var DiscountD1 = (MonthsRemaininWithDiscount * DiscountAmount);

			}
			
			Outputs.SetProperty(&quot;ChargeAmountUpgrade&quot;,DiscountD1);
		}
		else if(DiscountTypeD1 == &quot;Percentage&quot;)
		{
			var LineRentalCostD1 = ToNumber(Inputs.GetProperty(&quot;LineRentalCostD1&quot;));
			var DisconnectionMonths = ToNumber(Inputs.GetProperty(&quot;DisconnectionMonths&quot;));
			var ParentOrderItemIdD1 = Inputs.GetProperty(&quot;ParentOrderItemIdD1&quot;);
			var DiscountAmount = Inputs.GetProperty(&quot;DiscountAmountD1&quot;);	
			var AttributeValMonthsD1 = Inputs.GetProperty(&quot;AttributeValMonthsD1&quot;);
			AttributeValMonthsD1 = ToNumber(AttributeValMonthsD1);
			DiscountAmount = DiscountAmount/100;
			DiscountAmount = ToNumber(DiscountAmount); 
			LineRentalCostD1 = ToNumber(LineRentalCostD1);
			var DiscountAmount2 = (LineRentalCostD1 * DiscountAmount);

			var MonthsRemaininWithDiscount = &quot;&quot;;
			if (Promotion == 0)
			{
				
				//DiscountD1 = DiscountD1 - ((percentage / 100)* (MonthsRemaininWithDiscount * DiscountAmount2));
				var oBO = TheApplication().GetBusObject(&quot;VF_UK_BO_NoLink&quot;);
					var oBC = oBO.GetBusComp(&quot;VF Asset Mgmt - Asset XA&quot;);
					with(oBC)
					{						
							SetViewMode(AllView);
							ClearToQuery();
							ActivateField(&quot;Display Name&quot;);
							ActivateField(&quot;Text Value&quot;);
							ActivateField(&quot;Numeric Value&quot;);
							ActivateField(&quot;Object Id&quot;);
							SetSearchSpec(&quot;Object Id&quot;, ParentOrderItemIdD1);
							ExecuteQuery();
							var frec = FirstRecord();
							while(frec)
							{
								 sDispName = GetFieldValue(&quot;Display Name&quot;);
								if (sDispName == &quot;DurationUnitOfMeasure&quot;)
								{
								 sCharVal = GetFieldValue(&quot;Text Value&quot;);
								 }
								 else if (sDispName == &quot;Duration&quot;)
								 {
								 sNum = GetFieldValue(&quot;Numeric Value&quot;);
								 sNum = ToNumber(sNum);
								 }
								frec = NextRecord();
							}
							if (sCharVal == &quot;Months&quot;)
							{
								if ((sNum &gt; DisconnectionMonths) &amp;&amp; (sNum &lt; AttributeValMonthsD1))
								{
									MonthsRemaininWithDiscount = sNum - DisconnectionMonths;
								}
								else if ((sNum &gt; AttributeValMonthsD1) || (sNum = AttributeValMonthsD1))
								{
									MonthsRemaininWithDiscount = AttributeValMonthsD1 - DisconnectionMonths;
								}									
							}

					}
						var DiscountD1 = (MonthsRemaininWithDiscount * DiscountAmount2);

				DiscountD1 = DiscountD1 - ((percentage / 100)* (MonthsRemaininWithDiscount * DiscountAmount2));
		//	TheApplication().RaiseErrorText(DiscountD1);
			}
			
			
			Outputs.SetProperty(&quot;ChargeAmountUpgrade&quot;,DiscountD1);
		}
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
	
	}
}"
			   SEQUENCE="14"
			   UPDATED="10/20/2016 05:36:12"
			   UPDATED_BY="ACN_PRIYANKAD"
			   CREATED="01/05/2016 16:11:03"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CalculateDiscountWU"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CalculateDiscountWU(Inputs, Outputs)
{
	try{
		var DiscountTypeD1 = Inputs.GetProperty(&quot;DiscountTypeD1&quot;);
		var percentage = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_PERCENTAGE&quot;, &quot;DISC_PERCENTAGE&quot;);	
		var Promotion = Inputs.GetProperty(&quot;Promotion&quot;);
		var DiscountIdD1 = Inputs.GetProperty(&quot;DiscountIdD1&quot;); //[AP]:R15.3 QC#68758
		if(DiscountTypeD1 == &quot;GBP&quot;)
		{
			var DisconnectionMonths = ToNumber(Inputs.GetProperty(&quot;DisconnectionMonths&quot;));
			var DiscountAmount = Inputs.GetProperty(&quot;DiscountAmountD1&quot;);
			var AttributeValMonthsD1 = Inputs.GetProperty(&quot;AttributeValMonthsD1&quot;);
			AttributeValMonthsD1 = ToNumber(AttributeValMonthsD1);
			DiscountAmount = DiscountAmount.replace(&quot;,&quot;, &quot;.&quot;);
			DiscountAmount = ToNumber(DiscountAmount);
			//DiscountAmount = DiscountAmount*10;
			var MonthsRemaininWithDiscount = AttributeValMonthsD1 - DisconnectionMonths;
			if(Promotion == 0)
			{
      		//[AP]:R15.3 QC#68758 Start
               var sDispName = &quot;&quot;;
               var sCharVal = &quot;&quot;;
               var sNum = &quot;&quot;;
               var oBO = TheApplication().GetBusObject(&quot;VF_UK_BO_NoLink&quot;);
               var oBC = oBO.GetBusComp(&quot;VF Asset Mgmt - Asset XA&quot;);
               with(oBC)
               {
	               SetViewMode(AllView);
	               ClearToQuery();
	               ActivateField(&quot;Display Name&quot;);
	               ActivateField(&quot;Text Value&quot;);
	               ActivateField(&quot;Numeric Value&quot;);
	               ActivateField(&quot;Object Id&quot;);
	               SetSearchSpec(&quot;Object Id&quot;, DiscountIdD1);
	               ExecuteQuery();
	               var frec = FirstRecord();
	               while(frec)
	               {
	                   sDispName = GetFieldValue(&quot;Display Name&quot;);
	                   if (sDispName == &quot;DurationUnitOfMeasure&quot;)
	                   {
	                   		sCharVal = GetFieldValue(&quot;Text Value&quot;);
	                   }
	                   else if (sDispName == &quot;Duration&quot;)
	                   {
                           sNum = GetFieldValue(&quot;Numeric Value&quot;);
                           sNum = ToNumber(sNum);
	                   }
	                   frec = NextRecord();
	               	}
                    if (sCharVal == &quot;Months&quot;)
                    {
	                     if ((sNum &gt; DisconnectionMonths) &amp;&amp; (sNum &lt; AttributeValMonthsD1))
	                     {
	                                     MonthsRemaininWithDiscount = sNum - DisconnectionMonths;
	                     }
	                     else if ((sNum &gt; AttributeValMonthsD1) || (sNum = AttributeValMonthsD1))
	                     {
	                                     MonthsRemaininWithDiscount = AttributeValMonthsD1 - DisconnectionMonths;
	                     }
                    }
    			}
               //[AP]:R15.3 QC#68758 End

				var DiscountD1 = (MonthsRemaininWithDiscount * DiscountAmount);
			}
			else if (Promotion == 1)
			{
				var DiscountD1 = (DisconnectionMonths	* DiscountAmount);	
			}
			Outputs.SetProperty(&quot;ChargeAmountUpgrade&quot;,DiscountD1);
		}
		else if(DiscountTypeD1 == &quot;Percentage&quot;)
		{
			var LineRentalCostD1 = ToNumber(Inputs.GetProperty(&quot;LineRentalCostD1&quot;));
			var DisconnectionMonths = ToNumber(Inputs.GetProperty(&quot;DisconnectionMonths&quot;));
			var DiscountAmount = Inputs.GetProperty(&quot;DiscountAmountD1&quot;);	
			var AttributeValMonthsD1 = Inputs.GetProperty(&quot;AttributeValMonthsD1&quot;);
			AttributeValMonthsD1 = ToNumber(AttributeValMonthsD1);
			DiscountAmount = DiscountAmount/100;
			DiscountAmount = ToNumber(DiscountAmount); 
			//var DiscountAmount2 = LineRentalCostD1 - (LineRentalCostD1 * DiscountAmount);
			var DiscountAmount2 = LineRentalCostD1 * DiscountAmount; //[AP:24-03-2016:R15.3:Added for defect 67668]
			var MonthsRemaininWithDiscount = AttributeValMonthsD1 - DisconnectionMonths;
			if (Promotion == 0)
			{
				//[AP]:R15.3 QC#68758 Start
	           var sDispName = &quot;&quot;;
	           var sCharVal = &quot;&quot;;
	           var sNum = &quot;&quot;;
	           var oBO = TheApplication().GetBusObject(&quot;VF_UK_BO_NoLink&quot;);
	           var oBC = oBO.GetBusComp(&quot;VF Asset Mgmt - Asset XA&quot;);
	           with(oBC)
				{
					SetViewMode(AllView);
					ClearToQuery();
					ActivateField(&quot;Display Name&quot;);
					ActivateField(&quot;Text Value&quot;);
					ActivateField(&quot;Numeric Value&quot;);
					ActivateField(&quot;Object Id&quot;);
					SetSearchSpec(&quot;Object Id&quot;, DiscountIdD1);
					ExecuteQuery();
					var frec = FirstRecord();
					while(frec)
					{
						sDispName = GetFieldValue(&quot;Display Name&quot;);
						if (sDispName == &quot;DurationUnitOfMeasure&quot;)
						{
							sCharVal = GetFieldValue(&quot;Text Value&quot;);
						}
						else if (sDispName == &quot;Duration&quot;)
						{
							sNum = GetFieldValue(&quot;Numeric Value&quot;);
							sNum = ToNumber(sNum);
						}
						frec = NextRecord();
					}
                                                                
					if (sCharVal == &quot;Months&quot;)
					{
		              if ((sNum &gt; DisconnectionMonths) &amp;&amp; (sNum &lt; AttributeValMonthsD1))
		              {
		              	MonthsRemaininWithDiscount = sNum - DisconnectionMonths;
		              }
		              else if ((sNum &gt; AttributeValMonthsD1) || (sNum = AttributeValMonthsD1))
		              {
		               	MonthsRemaininWithDiscount = AttributeValMonthsD1 - DisconnectionMonths;
		              }
					}
                }
                //[AP]:R15.3 QC#68758 End

				var DiscountD1 = (MonthsRemaininWithDiscount * DiscountAmount2);
				//DiscountD1 = DiscountD1 - ((percentage / 100)* (MonthsRemaininWithDiscount * DiscountAmount2));
				DiscountD1 = (1 - (percentage / 100)) * DiscountD1; //[AP:24-03-2016:R15.3:Added for defect 67668]
			} 
			else if (Promotion == 1)
			{
				var DiscountD1 = (DisconnectionMonths * DiscountAmount2);	
				//DiscountD1 = DiscountD1 - ((percentage / 100)* (DisconnectionMonths * DiscountAmount2))
				DiscountD1 = (1 - (percentage / 100)) * DiscountD1; //[AP:24-03-2016:R15.3:Added for defect 67668]
			}	
			
			Outputs.SetProperty(&quot;ChargeAmountUpgrade&quot;,DiscountD1);
		}
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
	
	}
}"
			   SEQUENCE="15"
			   UPDATED="10/20/2016 05:36:12"
			   UPDATED_BY="ACN_PRIYANKAD"
			   CREATED="05/22/2013 07:40:34"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CalculateMonths"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CalculateMonths(Inputs,Outputs)
{
	try
	{
		var Promotion = Inputs.GetProperty(&quot;Promotion&quot;);
		var InpDueDate = Inputs.GetProperty(&quot;DueDate&quot;);
		var InpUpgradeDate = Inputs.GetProperty(&quot;UpgradeDate&quot;);
		var UpgradeDate,DueDate;// Oracle Review Memory Leak Deallocation 31/07/2014
		if(Promotion == 0)
		{
			//var DueDate = new Date(InpDueDate);
			//var UpgradeDate = new Date(InpUpgradeDate);
			var CalculationD1 =&quot;N&quot;;
			//Modified below code for CST R2.3 - 47
			
			/*var yearDueDate = ToInteger(DueDate.getFullYear());
			var yearUpgradeDate = ToInteger(UpgradeDate.getFullYear());
			var monthDueDate = ToInteger(DueDate.getMonth());
			var monthUpgradeDate = ToInteger(UpgradeDate.getMonth());
			var multiplier = yearDueDate - yearUpgradeDate;
			var calculatedMonth	 = finalmonthdiff + 12 * multiplier;*/	

			var DueDateCalc = Date.parse(InpDueDate);
			var UpgradeDateCalc = Date.parse(InpUpgradeDate);
			var iDiff = Math.ceil((DueDateCalc - UpgradeDateCalc)/86400000);
			var calculatedMonth = iDiff/30;
			
			if (calculatedMonth &gt; 0)
				CalculationD1 = &quot;Y&quot;;
		}
		else if(Promotion == 1)
		{
			UpgradeDate = new Date(InpUpgradeDate);// Oracle Review Memory Leak Deallocation 31/07/2014
			var monthUpgradeDate = ToInteger(UpgradeDate.getMonth());
			var AttributeValMonthsD1 = ToInteger(Inputs.GetProperty(&quot;AttributeValMonthsD1&quot;));
			//var agreementDate = Inputs.GetProperty(&quot;AgreementEndDate1&quot;);
			//agreementDate = new Date(agreementDate);
			//var monthagreementdate = ToInteger(agreementDate.getMonth());
			//var yearagreementDate =  ToInteger(agreementDate.getFullYear());
			DueDate = new Date(InpDueDate);// Oracle Review Memory Leak Deallocation 31/07/2014
			var yearDueDate = ToInteger(DueDate.getFullYear());
			var yearUpgradeDate =  ToInteger(UpgradeDate.getFullYear());
			
			var multiplier = yearDueDate - yearUpgradeDate ;
			var monthDueDate = ToInteger(DueDate.getMonth());
			//var calculatedMonth	 = ((monthagreementdate - monthDueDate) + 12 * multiplier) - monthUpgradeDate;
			var calculatedMonth	 = AttributeValMonthsD1 - ((monthDueDate - monthUpgradeDate) + 12 * multiplier) ;
			if (calculatedMonth &gt; 0)
				CalculationD1 = &quot;Y&quot;;
		}
			
		Outputs.SetProperty(&quot;DisconnectionMonths&quot;,calculatedMonth);
		Outputs.SetProperty(&quot;CalculateDiscountYN&quot;,CalculationD1);
		
	}
	catch(e)
	{
		throw(e);
	}	
	finally
	{
		var UpgradeDate = null;// Oracle Review Memory Leak Deallocation 31/07/2014
		var DueDate = null;// Oracle Review Memory Leak Deallocation 31/07/2014
	}
}"
			   SEQUENCE="16"
			   UPDATED="10/20/2016 05:36:12"
			   UPDATED_BY="ACN_PRIYANKAD"
			   CREATED="05/22/2013 07:40:34"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckAddOn"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckAddOn(Inputs, Outputs)
{
	try
	{
	 var sAccountId = Inputs.GetProperty(&quot;Object Id&quot;);
	 var PromoIntegId = Inputs.GetProperty(&quot;PromId&quot;);
	 var daysOfCommBroken = &quot;0&quot;;
	 var calculateDiscount = Inputs.GetProperty(&quot;DiscountEnableFlg&quot;);
		var BO = TheApplication().GetBusObject(&quot;VF_UK_BO_NoLink&quot;);
		var AssetBCLight = BO.GetBusComp(&quot;VF Asset Mgmt - Asset (Order Mgmt) Light&quot;);
		var ActiveStatus = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Active&quot;);
		var rootAssetId = &quot;&quot;;
		var isRecord = false;
		//var productClass = &quot;&quot;;
		var addOnId = &quot;&quot;;
		var productId = &quot;&quot;;
		var addOnAmount = 0;
		var discountAmount = 0;
		var amount = 0;
		var totalAmount = 0;
		var isAddOnProduct = false;	
		var julianDueDate = new Date();
	daysOfCommBroken = checkDaysOfCommBroken(PromoIntegId,julianDueDate);
		with (AssetBCLight)
		{
			SetViewMode(AllView);
			ClearToQuery();
			SetSearchSpec(&quot;Prod Prom Instance Id&quot;, &quot;&apos;&quot; + PromoIntegId + &quot;&apos;&quot;);
			SetSearchSpec(&quot;Status&quot;,&quot;&apos;&quot; + ActiveStatus + &quot;&apos;&quot;);
			SetSearchSpec(&quot;Owner Account Id&quot;, &quot;&apos;&quot; + sAccountId + &quot;&apos;&quot;);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				rootAssetId = GetFieldValue(&quot;Id&quot;);
			}
		} // end with (AssetBCLight)
		
		with (AssetBCLight)
		{
			ActivateField(&quot;VF Calculate Discount Enable flag&quot;);
			ActivateField(&quot;Fulfilment Item Code&quot;);
			SetViewMode(AllView);
			ClearToQuery();
			SetSearchSpec(&quot;Root Asset Id&quot;, &quot;&apos;&quot; + rootAssetId + &quot;&apos;&quot;);
			SetSearchSpec(&quot;Status&quot;,&quot;&apos;&quot; + ActiveStatus + &quot;&apos;&quot;);
			SetSearchSpec(&quot;Owner Account Id&quot;, &quot;&apos;&quot; + sAccountId + &quot;&apos;&quot;);
			ExecuteQuery(ForwardBackward);
			isRecord = FirstRecord();
			while(isRecord)
			{
				productId = GetFieldValue(&quot;Product Id&quot;);
				isAddOnProduct = checkProductLine(productId,&quot;Penalty Addon&quot;);
				//isAddOnProduct = true;
				amount = 0;
				discountAmount = 0;
				if (isAddOnProduct)	//if(productLine == &quot;Penalty Add On&quot;)
				{
					addOnId = GetFieldValue(&quot;Id&quot;);
					productId = GetFieldValue(&quot;Product Id&quot;);
					addOnAmount = GetPriListAmount(productId);
					addOnAmount = (Math.round(addOnAmount*100))/100;
					if (calculateDiscount == &quot;Y&quot;)
					{
						discountAmount = GetTotalDiscountAmount(sAccountId,addOnId);
					}
					amount = ToNumber(addOnAmount) - ToNumber(discountAmount);
					amount = amount / 30,5;
				}
				
				totalAmount = ToNumber(totalAmount) + ToNumber(amount);
				isRecord = NextRecord();
			}
			
			totalAmount = ToNumber(totalAmount)*daysOfCommBroken;
			
		} // end with (AssetBCLight)
		Outputs.SetProperty(&quot;TotalPenalty&quot;,totalAmount);
		}
    catch(e)
    {
       
    }
    finally
    {
       
    }
}"
			   SEQUENCE="17"
			   UPDATED="10/20/2016 05:36:12"
			   UPDATED_BY="ACN_PRIYANKAD"
			   CREATED="01/05/2016 16:11:03"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckAddressHistory"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="/**************************************************
	NAME:              	CheckAddressHistory		
	DESCRIPTION: 		To Check Address History for Addresses.
	INPUT PARAMETERS:	Account Id &amp; Address Type.
	OUTPUT PARAMETERS:	Check Address Flag &amp; Counter Flag
	AUTHOR:				Hemant Yadav
	DATE CREATED:		12-05-2015 by ACN_HAYADAV
*************************************************/ 
function CheckAddressHistory(Inputs,Outputs)
{
	try
	{
		var sAccntId = Inputs.GetProperty(&quot;Account Id&quot;);
		var sNewType = Inputs.GetProperty(&quot;New Type&quot;);
		var sBO = TheApplication().GetBusObject(&quot;Account&quot;);
		var sCUTAdd = sBO.GetBusComp(&quot;CUT Address for Account/Contact&quot;);
		var sCurr = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;ADDR_TYPE&quot;, &quot;Current address&quot;);
		var sPrev = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;ADDR_TYPE&quot;, &quot;Previous Address&quot;);
		var sPrev1 = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;ADDR_TYPE&quot;, &quot;Previous-1 address&quot;);
		var strSearch = &quot;&quot;;
		var vSumMonth = 0;
		var vSumYear = 0;
		var CheckAddressFlag = &quot;&quot;;
		var CheckAddressFlag2 = &quot;&quot;;
		var sCount = 0;
		var Count = 0;
		var sMon = 0;
		var sYear = 0;
		var a =1;
		var sCountCurr = 0;
		var sCountPrev = 0;
		var sCountPrev1 = 0;
		var sCountflg = &quot;N&quot;;
		var flag1 = &quot;&quot;;
        var flag2 = &quot;&quot;;
        var flag3 = &quot;&quot;;

		
	if (sAccntId != null &amp;&amp; sAccntId != &quot;&quot;)
	{	
		with(sCUTAdd)
		{
			ClearToQuery();
			SetViewMode(AllView);
			ActivateField(&quot;VF Months at Address&quot;);
			ActivateField(&quot;VF Years at Address&quot;);
			ActivateField(&quot;Account Id&quot;);			
			ActivateField(&quot;Type&quot;);
			SetSearchSpec(&quot;Account Id&quot;,sAccntId);
			
            ExecuteQuery();
            var record = FirstRecord();

			while(record)
			{
				var sType = GetFieldValue(&quot;Type&quot;);
				//start [27/07/2016][Khushboo][Release CCS 2.0][PBI94224][Credit Vetting]
                                                                if(sType == sCurr)
                              {
                                 flag1 = &quot;C&quot;; //C = Current Address is present
                              } 
                            if(sType == sPrev)
                              {
                                  flag2 = &quot;P&quot;; //P = Previous Address is present
                              }
                            if(sType == sPrev1)
                              {
                                  flag3 = &quot;P1&quot;; //P1 = Previous-1 Address is present
                              }
                                    
                               //end [27/07/2016][Khushboo][Release CCS 2.0][PBI94224][Credit Vetting]

				
				if(sType == sPrev || sType == sPrev1 || sType == sCurr)
				{

					sMon = GetFieldValue(&quot;VF Months at Address&quot;);
					sYear = GetFieldValue(&quot;VF Years at Address&quot;);
					vSumMonth = vSumMonth + ToNumber(sMon);
	                vSumYear = vSumYear + ToNumber(sYear);
	                //sCount = Count+a ;
	                sCount = sCount+a ; //[05/19/2016][Avinash][Release CCS Pilot][PBI93334][QC:69462][Credit vetting address history errors]
	                if(sType == sCurr &amp;&amp; sType == sNewType)
	                {
	                	sCountflg = &quot;Y&quot;;
	                	sCountCurr = sCountCurr++;
	                }
	                else if(sType == sPrev &amp;&amp; sType == sNewType)
	                {
	                	sCountflg = &quot;Y&quot;;
	                	sCountPrev = sCountPrev++;
	                }
	                if(sType == sPrev1 &amp;&amp; sType == sNewType)
	                {
	                	sCountflg = &quot;Y&quot;;
	                	sCountPrev1 = sCountPrev1++;
	                }
	             }
	                record = NextRecord();			
			}
		}
	}//[End If]
	
			//start [27/07/2016][Khushboo][Release CCS 2.0][PBI94224][Credit Vetting]
              if(flag2 == &quot;P&quot; &amp;&amp; flag1 != &quot;C&quot;)
              {              
                              CheckAddressFlag2 = &quot;N&quot;;
                              
              }
              
              if(flag3 == &quot;P1&quot; &amp;&amp; flag2 != &quot;P&quot; &amp;&amp; flag1 != &quot;C&quot;)
              {
                              CheckAddressFlag2 = &quot;N&quot;;
              }
              
              if(flag2 == &quot;P&quot; &amp;&amp; flag3 == &quot;P1&quot; &amp;&amp; flag1 != &quot;C&quot;)
              {
                              CheckAddressFlag2 = &quot;N&quot;;
                              
              }
              
              if(flag1 == &quot;C&quot; &amp;&amp; flag3 == &quot;P1&quot; &amp;&amp; flag2 != &quot;P&quot;)
              {
                              CheckAddressFlag2 = &quot;N&quot;;
                              
              }
              //end [27/07/2016][Khushboo][Release CCS 2.0][PBI94224][Credit Vetting]

			
			var sResult = (vSumYear*12)+ (vSumMonth);
			if (sCount &lt;3 &amp;&amp; sResult &lt;36)
			{
				 CheckAddressFlag = &quot;N&quot;;
			}
			
			if ((sCount &gt;= 3 || sResult &gt;36) &amp;&amp; CheckAddressFlag2 !=&quot;N&quot;)
			{
				 CheckAddressFlag = &quot;Y&quot;;
			}
			
			Outputs.SetProperty(&quot;CheckAddressFlag&quot;, CheckAddressFlag);
			Outputs.SetProperty(&quot;sCountflg&quot;, sCountflg);			
			
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		sCUTAdd = null;
		sBO = null;
	}
	
}"
			   SEQUENCE="18"
			   UPDATED="10/20/2016 05:36:12"
			   UPDATED_BY="ACN_PRIYANKAD"
			   CREATED="05/13/2015 17:07:19"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckAddressType"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckAddressType(Inputs,Outputs)
{
	try
	{
		var sAccntId = Inputs.GetProperty(&quot;Account Id&quot;);
		var sBO = TheApplication().ActiveBusObject();
		var sCUTAdd = sBO.GetBusComp(&quot;CUT Address for Account/Contact&quot;);
		var sCurr = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;ADDR_TYPE&quot;, &quot;Current address&quot;);
		var sPrev = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;ADDR_TYPE&quot;, &quot;Previous Address&quot;);
		var sPrev1 = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;ADDR_TYPE&quot;, &quot;Previous-1 address&quot;);
		var strSearch = &quot;&quot;;
		var sCount = 0;
		var Count = 0;
		var a =1;
		var sCountCurr = 0;
		var sCountPrev = 0;
		var sCountPrev1 = 0;
		var sCountCurrflg = &quot;N&quot;;
		var sCountPrevflg = &quot;N&quot;;
		var sCountPrev1flg = &quot;N&quot;;
		var sCurrDate = &quot;&quot;;
		var sPrevDate = &quot;&quot;;
		var sPrev1Date = &quot;&quot;;		
		
	if (sAccntId != null &amp;&amp; sAccntId != &quot;&quot;)
	{	
		with(sCUTAdd)
		{
			ClearToQuery();
			SetViewMode(AllView);
			ActivateField(&quot;Account Id&quot;);			
			ActivateField(&quot;Type&quot;);
			SetSearchSpec(&quot;Account Id&quot;,sAccntId);
			
            ExecuteQuery();
            var record = FirstRecord();

			while(record)
			{
				var sType = GetFieldValue(&quot;Type&quot;);
				
				if(sType == sPrev || sType == sPrev1 || sType == sCurr)
				{					 
	                if(sType == sCurr)
	                {
	                	sCountCurrflg = &quot;Y&quot;;
	                	sCountCurr = sCountCurr++;
	                	sCurrDate = GetFieldValue(&quot;VF_Date_Moved_In&quot;);
	                }
	                else if(sType == sPrev)
	                {
	                	sCountPrevflg = &quot;Y&quot;;
	                	sCountPrev = sCountPrev++;
	                	sPrevDate = GetFieldValue(&quot;VF_Date_Moved_In&quot;);
	                }
	                if(sType == sPrev1)
	                {
	                	sCountPrev1flg = &quot;Y&quot;;
	                	sCountPrev1 = sCountPrev1++;
	                	sPrev1Date = GetFieldValue(&quot;VF_Date_Moved_In&quot;);
	                }
	             }
        		      record = NextRecord();			
			}
		}
	}//[End If]
			Outputs.SetProperty(&quot;CountCurrflg&quot;, sCountCurrflg);
			Outputs.SetProperty(&quot;CountPrevflg&quot;, sCountPrevflg);
			Outputs.SetProperty(&quot;CountPrev1flg&quot;, sCountPrev1flg);
			Outputs.SetProperty(&quot;CurrDate&quot;, sCurrDate);			
			Outputs.SetProperty(&quot;PrevDate&quot;, sPrevDate);	
			Outputs.SetProperty(&quot;Prev1Date&quot;, sPrev1Date);			
			
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		sCUTAdd = null;
		sBO = null;
	}
}"
			   SEQUENCE="19"
			   UPDATED="10/20/2016 05:36:12"
			   UPDATED_BY="ACN_PRIYANKAD"
			   CREATED="05/25/2015 15:37:42"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckCurrentAddress"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckCurrentAddress(Inputs, Outputs)
{
try
	{
		var sAccntId = Inputs.GetProperty(&quot;Account Id&quot;);
		var sBO = TheApplication().GetBusObject(&quot;Account&quot;);
		var sCUTAdd = sBO.GetBusComp(&quot;CUT Address for Account/Contact&quot;);
		var sCurr = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;ADDR_TYPE&quot;, &quot;Current address&quot;);
		var sPrev = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;ADDR_TYPE&quot;, &quot;Previous Address&quot;);
		var sPrev1 = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;ADDR_TYPE&quot;, &quot;Previous-1 address&quot;);
		var sCount = 0;
		var sYear = 0;
		
		if (sAccntId != null &amp;&amp; sAccntId != &quot;&quot;)
		{		
		with(sCUTAdd)	
				{
					
					ClearToQuery();
					SetViewMode(AllView);
					ActivateField(&quot;VF Years at Address&quot;);
					ActivateField(&quot;Account Id&quot;);			
					ActivateField(&quot;Type&quot;);
					SetSearchSpec(&quot;Account Id&quot;,sAccntId);
					ExecuteQuery();
					//CountBC = CountRecords();
					var record = FirstRecord();
					while(record)				
					{
						var sType = GetFieldValue(&quot;Type&quot;);
						sCount = CountRecords();
						if(sType == sCurr)
						{
							sYear = GetFieldValue(&quot;VF Years at Address&quot;);
							sCount = sCount++;
							if(sType == sCurr &amp;&amp; sYear &lt; &quot;3&quot;)
							{
								Outputs.SetProperty(&quot;Please enter a minimum of 3 addresses as the address history is less than 3 years for the customer. This can be done by entering &apos;Previous&apos; address and &apos;Previous-1&apos; address information&quot;);
								
								break;
							}
						}
							record = NextRecord();
					}
				}
			}
		}
			catch(e)
			{
				throw(e);
			}
			finally
			{
			}
	
}"
			   SEQUENCE="20"
			   UPDATED="10/20/2016 05:36:12"
			   UPDATED_BY="ACN_PRIYANKAD"
			   CREATED="05/20/2015 15:01:40"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckLineRental"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckLineRental(Inputs, Outputs)
{ //[08/11/2016][RITESH][QC:73044][New Function] 
	try
	{     	var RootAssetId = Inputs.GetProperty(&quot;RootAssetId&quot;);
			var boAsset1 = TheApplication().GetBusObject(&quot;Account&quot;);
			var bcAsset1 = boAsset1.GetBusComp(&quot;VF Asset RRU&quot;);
            var sLineRentalAmt = &quot;&quot;;
            var isLineRental = &quot;N&quot;;
			var sPartNum1;
			var dataSharerChild;
			var VAT;
			var adjPrice;
			var search2;
			
			bcAsset1.ClearToQuery();
			bcAsset1.SetViewMode(AllView); 
			var search1 = &quot;[Root Asset Id] = &apos;&quot; + RootAssetId + &quot;&apos; AND ([Status] = &apos;Active&apos;)&quot;;
			bcAsset1.SetSearchExpr(search1);
			bcAsset1.ExecuteQuery();
		    var Rec = bcAsset1.FirstRecord();
			while(Rec)
		   	{
				bcAsset1.ActivateField(&quot;Adjusted Price&quot;);
				bcAsset1.ActivateField(&quot;VAT&quot;);
				bcAsset1.ActivateField(&quot;Product Part Number&quot;);
				sPartNum1 = bcAsset1.GetFieldValue(&quot;Product Part Number&quot;);
				dataSharerChild = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_PART_NUMBERS&quot;, sPartNum1);
				if (dataSharerChild == &quot;LINE_RENTAL&quot;)
				{
				 isLineRental = &quot;Y&quot;;
				 VAT = bcAsset1.GetFieldValue(&quot;VAT&quot;);
				 adjPrice = bcAsset1.GetFieldValue(&quot;Adjusted Price&quot;);
				 sLineRentalAmt = adjPrice*VAT;
				 break;
				}			
				Rec = bcAsset1.NextRecord();
			}
			if (isLineRental == &quot;N&quot;)
			{
			  bcAsset1.ClearToQuery();
			  bcAsset1.ActivateField(&quot;Adjusted Price&quot;);
			  bcAsset1.ActivateField(&quot;VAT&quot;)
			  bcAsset1.SetViewMode(AllView); 
			  var search2 = &quot;[Id] = &apos;&quot; + RootAssetId + &quot;&apos; AND ([Status] = &apos;Active&apos;)&quot;;
			  bcAsset1.SetSearchExpr(search2);
			  bcAsset1.ExecuteQuery();
			  VAT = bcAsset1.GetFieldValue(&quot;VAT&quot;);
		      adjPrice = bcAsset1.GetFieldValue(&quot;Adjusted Price&quot;);
			  sLineRentalAmt = adjPrice*VAT; 
			}		  
		Outputs.SetProperty(&quot;LineRentaltot&quot;,sLineRentalAmt);		
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
//		bcAsset = null;
//		boAsset = null;
//		oApp = null;
	}
}"
			   SEQUENCE="21"
			   UPDATED="11/11/2016 10:38:56"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="11/08/2016 06:04:17"
			   CREATED_BY="ACN_SENGARR">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckMandateFieldsPremise"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckMandateFieldsPremise(Inputs,Outputs)
{
/*-------------------------------------------------------------------------------------------------
Method: CheckMandatoryFields
Called From: WF: VF LECO Create Premise
Purpose: This method checks the Mandatory fields for premise are present or not when created from interface.
CR: CR#75380
Date: 02-06-2015 
Author: PKHOT
---------------------------------------------------------------------------------------------------*/
	var msgInputs	= TheApplication().NewPropertySet();
	var msgOutputs 	= TheApplication().NewPropertySet();
	var PremiseInputs	= TheApplication().NewPropertySet();
	var PremiseOutputs 	= TheApplication().NewPropertySet();
	var AccountInputs	= TheApplication().NewPropertySet();
	var AccountOutputs 	= TheApplication().NewPropertySet();
	var sPremise 	= &quot;ListOfCUT Premise&quot;;
	var sAccount	= &quot;VF Account Integration BC&quot;;
	var countPremise	= &quot;&quot;;
	var p			= 0;
	
	try
	{	
			GetChild(Inputs, sPremise, PremiseOutputs);
			GetChild(Inputs, sAccount, AccountOutputs);
			AccountInputs = AccountOutputs.GetChild(0);
			
			var AccountNumber = AccountInputs.GetProperty(&quot;VF Customer Code&quot;);
			if(AccountNumber == &quot;&quot; || AccountNumber == null)
			{
				Outputs.SetProperty(&quot;Error Code&quot;,&quot;SBL_CUSTOM_1&quot;);
				Outputs.SetProperty(&quot;Error Message&quot;,&quot;Mandatory Fields are not provided in input&quot;);
				return(CancelOperation);
			}
			
			if(AccountNumber != null &amp;&amp; AccountNumber != &quot;&quot;)
			{
				var sBO = TheApplication().GetBusObject(&quot;VF Account Integration BO&quot;);
				var sBC = sBO.GetBusComp(&quot;VF Account Integration BC&quot;);
				with(sBC)
				{
					ClearToQuery();
					SetViewMode(AllView);
					ActivateField(&quot;VF Customer Code&quot;);
					SetSearchSpec(&quot;VF Customer Code&quot;,AccountNumber);
					ExecuteQuery(ForwardOnly);
					if (FirstRecord())
					{
						//do nothing
					}
					else
					{
						Outputs.SetProperty(&quot;Error Code&quot;,&quot;SBL_CUSTOM_2&quot;);
						Outputs.SetProperty(&quot;Error Message&quot;,&quot;Account does not exist in Siebel&quot;);
						return(CancelOperation);
					}
				}
			}		
			
			countPremise = PremiseOutputs.GetChild(0).GetChildCount();
			if(countPremise&gt;0)
			{
				while(p&lt;countPremise)
				{
					PremiseInputs = PremiseOutputs.GetChild(0).GetChild(p);
					var sAddressLine1 = PremiseInputs.GetProperty(&quot;Address&quot;);
					var sAddressReference = PremiseInputs.GetProperty(&quot;Address Name&quot;);
					var sKeyType = PremiseInputs.GetProperty(&quot;Key Type&quot;);
					var sPostalCode = PremiseInputs.GetProperty(&quot;Postal Code&quot;);
					var CustomerType = PremiseInputs.GetProperty(&quot;Customer Type&quot;);
								
					//Check for Blank values
					if (sAddressLine1 == &quot;&quot; || sAddressLine1 == null || sAddressReference == &quot;&quot; || sAddressReference == null || sKeyType == &quot;&quot; || sKeyType == null || sPostalCode == null || sPostalCode == &quot;&quot; || CustomerType == null || CustomerType == &quot;&quot;)
					{			
						Outputs.SetProperty(&quot;Error Code&quot;,&quot;SBL_CUSTOM_1&quot;);
						Outputs.SetProperty(&quot;Error Message&quot;,&quot;Mandatory Fields are not provided in input&quot;);
						return(CancelOperation);
					}
					p++;
				}//end while
				
			}//end if	
			Outputs.SetProperty(&quot;Error Code&quot;,&quot;&quot;);
			Outputs.SetProperty(&quot;DescrizioneEsito&quot;,&quot;&quot;);
			Outputs.SetProperty(&quot;AddrRef&quot;,sAddressReference);
			return(CancelOperation);
	}
	catch(e)
	{
		var sErrMsg = &quot;Operation not correctly executed. Error: Method CheckMandateFieldsPremise &quot; + e.errText;	
		Outputs.SetProperty(&quot;Error Code&quot;,&quot;999&quot;);
  		Outputs.SetProperty(&quot;Error Message&quot;,sErrMsg);
		return(CancelOperation);
	}
	finally
	{
		msgInputs		= null;
		msgOutputs 		= null;
		PremiseInputs	= null;
		PremiseOutputs	= null;
		AccountInputs	= null;
		AccountOutputs	= null;
	}
}"
			   SEQUENCE="22"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="06/08/2015 15:35:59"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckOriginalOrder"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckOriginalOrder(Inputs, Outputs)
{
	try
    {
	    var oBO = TheApplication().GetBusObject(&quot;PDS Asset&quot;);            
	    var oBCAsset = oBO.GetBusComp(&quot;Asset Mgmt - Asset - Header&quot;);
	    var oBCOrder = oBO.GetBusComp(&quot;Order Entry - Orders&quot;);
	    var sAssetId = Inputs.GetProperty(&quot;AssetId&quot;);
	    var sOriginalOrderId = &quot;&quot;;
	    var sOrderOrigin = &quot;&quot;;                                         
        	with(oBCAsset)
            {                       
	            ClearToQuery();
	            SetViewMode(AllView);
	            ActivateField(&quot;Original Order Id&quot;);
	            SetSearchSpec(&quot;Id&quot;, &quot;&apos;&quot; + sAssetId + &quot;&apos;&quot;);
	            ExecuteQuery(ForwardOnly);
	            	if(FirstRecord()){
                	sOriginalOrderId = GetFieldValue(&quot;Original Order Id&quot;);
               			with(oBCOrder){
                        	ClearToQuery();
                           	SetViewMode(AllView);
                            SetSearchSpec(&quot;Id&quot;, &quot;&apos;&quot; + sOriginalOrderId + &quot;&apos;&quot;);
                            ExecuteQuery(ForwardOnly);
                            if(FirstRecord())
                            {
                          		sOrderOrigin = GetFieldValue(&quot;VF Order Origin&quot;);
                            }
                    	        if (sOrderOrigin == TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_DIVISION_ORIGIN&quot;, TheApplication().GetProfileAttr(&quot;Primary Division Name&quot;)))
                        	    {
                            	    Outputs.SetProperty(&quot;Result&quot;, &quot;OK&quot;);
                                }
                                else
                                {
                                	Outputs.SetProperty(&quot;Result&quot;, &quot;KO&quot;);
                                }
                            }
                                
                        }
                }
        }
               
catch(e)
	{
    	Outputs.SetProperty(&quot;Result&quot;,&quot;KO&quot;);        
    }
            
finally{
        oBCAsset = null;
        oBCOrder = null;
        oBO = null;   
        }  
}"
			   SEQUENCE="23"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="10/20/2011 05:17:06"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckPhoneNumber"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckPhoneNumber(Inputs,Outputs) //[09/07/2016][Khushboo][Release CCS 1.1][INC 2020961][Contact number in delivery tab is mandatory]
{
	try
	{
		
					var sPhoneNo = Inputs.GetProperty(&quot;PhoneNo&quot;);
					var sFirstChar, sRestofStr;
		        	var PhoneNumberFlag = &quot;&quot;;
		        
		        	sFirstChar = sPhoneNo.substring(0,1); 	//var sCurValue = FieldValue;
		        	sRestofStr = sPhoneNo.substring(1,sPhoneNo.length);
		        	if(sFirstChar == &quot;+&quot;)
		        	{
		        		if(isNaN(sRestofStr))
		        			{
				 				PhoneNumberFlag = &quot;A&quot;;
							}
							
						if((sRestofStr.length&lt;10) || (sRestofStr.length&gt;16))
							{
				 				PhoneNumberFlag = &quot;B&quot;;
							}
					
					   }//if(sFirstChar == &quot;+&quot;)
					else
					{
						if(isNaN(sPhoneNo))
							{
				 				PhoneNumberFlag = &quot;C&quot;;
							}
						if((sPhoneNo.length&lt;10) || (sPhoneNo.length&gt;16))
							{
				 				PhoneNumberFlag = &quot;D&quot;;
							}
					  }//else
		       
		Outputs.SetProperty(&quot;PhoneNumberFlag&quot;, PhoneNumberFlag);
       }
       
catch(e)
	{
		throw(e);
	}
	finally
	{

	}
}"
			   SEQUENCE="24"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="07/13/2016 14:38:51"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckReconnectionItems"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckReconnectionItems(Inputs,Outputs)
{
/*------------------------------------------------------------------------------------
CR: 99867- Reconnection Orders
Release: 3.0
Author: Piyusha K
Purpose:Identifying the Disconnection line items which needs to be added in reconnection 
		 with there details.
--------------------------------------------------------------------------------------*/
	var sDisPartNum = &quot;&quot;;
	var sDisServiceId = &quot;&quot;;
	var sIMEINumer = &quot;&quot;;
	var curRootItem = &quot;&quot;;
	var sFlag = &quot;&quot;;
	var sCurPromIntegId = &quot;&quot;;
	try
	{
		var sIntId = Inputs.GetProperty(&quot;AssetIntId&quot;);
		var sServiceId = Inputs.GetProperty(&quot;ServiceId&quot;);
		var sDiscOrderId = Inputs.GetProperty(&quot;DiscOrderId&quot;);
		var sCurOrderId = Inputs.GetProperty(&quot;Active Document Id&quot;);
		var sDiscMPSId = Inputs.GetProperty(&quot;DiscMPSId&quot;);
		var curRootItem = Inputs.GetProperty(&quot;curRootItem&quot;);
		var discArr = new Array();
		var CurArr = new Array();
		var FinalArr = new Array();
		
		var sToday = &quot;&quot;;
		var sToday1 = &quot;&quot;;//[QC:72748]
		var sBO = TheApplication().GetBusObject(&quot;VF_UK_BO_NoLink&quot;);
		var sBCItem = sBO.GetBusComp(&quot;VF Order Entry - Line Items Light&quot;);
		var sSearchStr = &quot;[Root Order Item Id] = &apos;&quot;+sDiscMPSId+&quot;&apos; AND [Order Header Id] = &apos;&quot;+sDiscOrderId+&quot;&apos;&quot;;
		
		with(sBCItem)
		{
			ClearToQuery();
			SetViewMode(AllView);
			ActivateField(&quot;Order Header Id&quot;);
			ActivateField(&quot;Root Order Item Id&quot;);
			ActivateField(&quot;Part Number&quot;);
			ActivateField(&quot;Service Id&quot;);
			ActivateField(&quot;Effective End Date&quot;);
			ActivateField(&quot;Product Type&quot;);
			ActivateField(&quot;Fulfillment Item&quot;);
			ActivateField(&quot;VF_Today_Date&quot;);
			SetSearchExpr(sSearchStr);
			ExecuteQuery();
			var disRec = FirstRecord();
			var i = 0;
			while(disRec)
			{
				var sPartNum = GetFieldValue(&quot;Part Number&quot;);
				var sProdType = GetFieldValue(&quot;Product Type&quot;);
				var sFulItem = GetFieldValue(&quot;Fulfillment Item&quot;);
				
				var sTBO = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_RECONNECTION_TBO&quot;,sProdType);
				var sBar = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_RECONNECTION_PROHIBIT&quot;,sFulItem);
			
				if(sBar != &quot;Y&quot;)
				{
					if(sTBO == &quot;Y&quot;)
					{
						var sEndDate1 = GetFieldValue(&quot;Effective End Date&quot;);
						var sEndDate = new Date(sEndDate1);//[QC:72748]
						sToday1 = GetFieldValue(&quot;VF_Today_Date&quot;);
						sToday = new Date(sToday1);//[QC:72748]
						if((sEndDate &gt; sToday) &amp;&amp; sEndDate != null &amp;&amp; sEndDate != &quot;&quot;)//changed as part of Review comments from Alpesh
						{
							discArr[i] = sPartNum;
							i++;
						}
					}
					else
					{
						if(sFulItem == &quot;SIM Card&quot;)
						{
							sIMEINumer = GetFieldValue(&quot;Service Id&quot;);
						}
						discArr[i] = sPartNum;
						i++;
					}
				}
				disRec = NextRecord();	
			}//end while
		}//end with
		
		sSearchStr = &quot;[Order Header Id] = &apos;&quot;+sCurOrderId+&quot;&apos;&quot;;
		with(sBCItem)
		{
			ClearToQuery();
			SetViewMode(AllView);
			ActivateField(&quot;Order Header Id&quot;);
			ActivateField(&quot;Root Order Item Id&quot;);
			ActivateField(&quot;Part Number&quot;);
			ActivateField(&quot;Service Id&quot;);
			ActivateField(&quot;Effective End Date&quot;);
			ActivateField(&quot;Product Type&quot;);
			ActivateField(&quot;Fulfillment Item&quot;);
			ActivateField(&quot;VF Reservation Type&quot;);
			ActivateField(&quot;VF CreateReason&quot;);//[QC:71943:R3.0:6-9-16]
			ActivateField(&quot;Prod Prom Instance Id&quot;);
			SetSearchExpr(sSearchStr);
			ExecuteQuery();
			var curRec = FirstRecord();
			var j = 0;
			while(curRec)
			{
				var sPartNum1 = GetFieldValue(&quot;Part Number&quot;);
				var sProdType1 = GetFieldValue(&quot;Product Type&quot;);
				var sFulItem1 = GetFieldValue(&quot;Fulfillment Item&quot;);
				var sEnable = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_ENABLE_AUTO_RECONNECTION&quot;,sPartNum1);
				
				if(sEnable == &quot;Y&quot;)//changed as part of Review comments from Alpesh
				{
					SetFieldValue(&quot;Service Id&quot;,sServiceId);
					SetFieldValue(&quot;VF Reservation Type&quot;,TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_RESERVATION_TYPE&quot;,&quot;Reconnection&quot;));
					SetFieldValue(&quot;VF CreateReason&quot;,TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_RESERVATION_TYPE&quot;,&quot;Reconnection&quot;));//[QC:71943:R3.0:6-9-16]
					curRootItem = GetFieldValue(&quot;Id&quot;);
					sCurPromIntegId = GetFieldValue(&quot;Prod Prom Instance Id&quot;);
					WriteRecord();
				}
				if(sFulItem1 == &quot;SIM Card&quot;)
				{
					SetFieldValue(&quot;Service Id&quot;,sIMEINumer);
					WriteRecord();
				}
				CurArr[j] = sPartNum1;
				j++;
				//WriteRecord();
				curRec = NextRecord();	
			}//end while
		//WriteRecord();
		}//end with
		
		for(i=0; i&lt;discArr.length; i++)
		{
			sFlag = &quot;N&quot;;
			for(j=0; j&lt;CurArr.length; j++)
			{
				if(discArr[i] == CurArr[j])
				{
					sFlag = &quot;Y&quot;;
				}
			}
			if(sFlag != &quot;Y&quot;)
			{
				//FinalArr[i] = discArr[i];
				
				var sWF = TheApplication().GetService(&quot;Workflow Process Manager&quot;);
				var vIn = TheApplication().NewPropertySet();
				var vOut = TheApplication().NewPropertySet();
				with(vIn)
				{
					SetProperty(&quot;VFIsReturn&quot;,&quot;N&quot;);
					SetProperty(&quot;RootItemId&quot;,curRootItem);
					SetProperty(&quot;PartNum&quot;,discArr[i]);
					SetProperty(&quot;ProcessName&quot;,&quot;VF Add Order Item Reconnection&quot;)
				}
				sWF.InvokeMethod(&quot;RunProcess&quot;,vIn,vOut);
			}
		}
		Outputs.SetProperty(&quot;CurrentRootItem&quot;,curRootItem);
		Outputs.SetProperty(&quot;CurPromIntegId&quot;,sCurPromIntegId);
		
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		sBCItem = null;
		sBO = null;
		vOut = null;
		vIn = null;
		sWF = null;
	}
}"
			   SEQUENCE="25"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="08/26/2016 13:56:30"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckReservedItemOnLOV"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckReservedItemOnLOV(status)
{	
	try
	{
		var reserved = &quot;&quot;;		
		var oBSInputs = TheApplication().NewPropertySet();
		var oBSOutputs = TheApplication().NewPropertySet();
		
		oBSInputs.SetProperty(&quot;Type&quot;,&quot;VF_RESERVATION_RESPONSE&quot;);
		oBSInputs.SetProperty(&quot;Name&quot;,status);
		oBSInputs.SetProperty(&quot;Field&quot;,&quot;High&quot;);
		LookupCustom(oBSInputs,oBSOutputs);
		reserved = oBSOutputs.GetProperty(&quot;Lookup&quot;);	
	}
	catch(e)
	{
		throw(e);
	}
	finally 
	{
		oBSInputs = null;
		oBSOutputs = null;
		return(reserved);
	}	
}"
			   SEQUENCE="26"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="05/09/2013 06:09:57"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckServiceRequest"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckServiceRequest(Inputs, Outputs)
{
/*----------------------------------------------------------------------------------------------------------
Purpose: This function is created to Pop Up message on account summary if there is any open complaints sr in customers 
account.
Called From: Applets: VF Interaction Activity Form Applet and VF SIS Account Entry Applet No Insert
[NROUT][CR:PBI82326][Porting][21-10-2015][New Method created for: PBI82326]
------------------------------------------------------------------------------------------------------------*/
try
	{
		var sAccntId = Inputs.GetProperty(&quot;Account Id&quot;);
		var sBO = TheApplication().GetBusObject(&quot;Service Request&quot;);
		var sServReqBC = sBO.GetBusComp(&quot;Service Request&quot;);
		var sServStat = &quot;&quot;;
		var sArea = &quot;&quot;;
		var sCountflg = &quot;&quot;;
		var sAreaVal = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;SR_AREA&quot;, &quot;Complaint&quot;);
		var sServStat = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;SR_STATUS&quot;, &quot;Open&quot;);
		var sServStat_1 = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;SR_STATUS&quot;, &quot;In Progress&quot;);
		var sServStat_2 = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;SR_STATUS&quot;, &quot;Completed&quot;); //[RITESH][QC:68998][INC][30-04-2016] 
		var searchExpr = &quot;&quot;;
		with(sServReqBC)
		{
		
     		ClearToQuery();
			SetViewMode(AllView);
			ActivateField(&quot;Account Id&quot;);
			ActivateField(&quot;Status&quot;);
			ActivateField(&quot;Area&quot;);
			//SetSearchSpec(&quot;Account Id&quot;, sAccntId);
			//SetSearchSpec(&quot;Status&quot;, sServStat);
			//SetSearchSpec(&quot;Area&quot;, sAreaVal);
			//searchExpr = &quot;([Status] = &apos;&quot; + sServStat + &quot;&apos; OR [Status] = &apos;&quot; + sServStat_1 + &quot;&apos;) AND [Account Id] = &apos;&quot; + sAccntId + &quot;&apos; AND [Area] = &apos;&quot; + sAreaVal + &quot;&apos;&quot;;
			//[RITESH][QC:68998][INC][30-04-2016][New Condition Added for Completed SRs]
			searchExpr = &quot;([Status] = &apos;&quot; + sServStat + &quot;&apos; OR [Status] = &apos;&quot; + sServStat_1 + &quot;&apos; OR [Status] = &apos;&quot; + sServStat_2 + &quot;&apos;) AND [Account Id] = &apos;&quot; + sAccntId + &quot;&apos; AND [Area] = &apos;&quot; + sAreaVal + &quot;&apos;&quot;; 
			SetSearchExpr(searchExpr);
			ExecuteQuery(ForwardOnly);
		    

		if(FirstRecord())
			{
				sCountflg = &quot;Y&quot;;		
			}
		
		}
		Outputs.SetProperty(&quot;sCountflg&quot;, sCountflg);
		
	}
			catch(e)
			{
				throw(e);
			}
			finally
			{
			}
	
}"
			   SEQUENCE="27"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="12/11/2015 15:44:32"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckTotalAmount"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckTotalAmount(Inputs, Outputs)
//VF Jinesh [11Spt2015]:- Created for Customer Experience Enhancement R15.2 Drop D.
{

	try
	{
			var sAcccountId = Inputs.GetProperty(&quot;AcccountId&quot;);
			var sAddAccount=&quot;&quot;;
			var sLRAmt = &quot;0&quot;;
//			sLRAmt = ToInteger(LRAmt);
			var sPromoAssetId = Inputs.GetProperty(&quot;PromoAssetId&quot;);
				var sNeetu = &quot;0&quot;;

			var boAsset1 = TheApplication().GetBusObject(&quot;Account&quot;);
//			var bcAsset1 = boAsset1.GetBusComp(&quot;VF Asset RRU Ligth&quot;);
			var bcAsset1 = boAsset1.GetBusComp(&quot;VF Asset RRU&quot;);
			var bcAccount;// Oracle Review Memory Leak Deallocation 31/07/2014
			var LookupVal = &quot;&quot;;
			var RootPromo = &quot;&quot;;
			var boAsset = &quot;&quot;;
			var bcAsset = &quot;&quot;;
			var dataSharerParent = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_SHARER_LEAD_PARTNUM&quot;, &quot;DataSharerParent&quot;);
			var taxval = &quot;0.2&quot;;
			var sPercentDiscount = &quot;0&quot;;
			taxval = ToNumber(taxval);
				var sFinalAmt =&quot;0&quot;;
			bcAsset1.ClearToQuery();

			bcAsset1.SetViewMode(AllView); 
			
			var search1 = &quot;[Root Asset Id] = &apos;&quot; + sAcccountId + &quot;&apos; AND ([Status] = &apos;Active&apos;)&quot;;
			bcAsset1.SetSearchExpr(search1);
			
		   	bcAsset1.ExecuteQuery();
		    var Rec3 = bcAsset1.FirstRecord();
			while(Rec3)//Search for Mobile phone service under selected Promotion		   	
		   	{

		   		var sRootId = bcAsset1.GetFieldValue(&quot;Id&quot;);
				bcAsset1.ActivateField(&quot;Fixed Line Price&quot;);
				bcAsset1.ActivateField(&quot;Product Part Number&quot;);
				var sLineRentalAmt = bcAsset1.GetFieldValue(&quot;Fixed Line Price&quot;);
				var sPartNum1 = bcAsset1.GetFieldValue(&quot;Product Part Number&quot;);
				var dataSharerChild = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_RRU_LINE_RENTAL&quot;, sPartNum1);
				var sBBProduct = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_BLACKBERRY_PRODUCT&quot;, sPartNum1);
				var isIMEI1 = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_LINE_RENTAL_DISCOUNT&quot;,sPartNum1);
    			var isBBDiscount1 = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BLACKBERRY_DISCOUNT&quot;,sPartNum1);
	    				
				var sProdPrimLine = bcAsset1.GetFieldValue(&quot;VF Product Class&quot;);
				var sLineRentalAmt1 = &quot;0&quot;;
				var sBBAmount = &quot;0&quot;;

				//sFinalAmt = ToInteger(sFinalAmt);
			var TaxAmt = &quot;0&quot;;
			var DiscountDone = &quot;N&quot;;
//				if(dataSharerChild == &quot;Y&quot; || sBBProduct == &quot;Y&quot; || sLineRentalAmt != &quot;0&quot; || sLineRentalAmt != &quot;&quot; || sLineRentalAmt )
				if(dataSharerChild == &quot;Y&quot; || sBBProduct == &quot;Y&quot;)
				{
					if(dataSharerChild == &quot;Y&quot;)
					{
						sLineRentalAmt1 = sLineRentalAmt;
					}
					else
					{
						sBBAmount = sLineRentalAmt;
					}
					var boAsset2 = TheApplication().GetBusObject(&quot;Account&quot;);
//					var bcAsset2 = boAsset2.GetBusComp(&quot;VF Asset RRU Ligth&quot;);
					var bcAsset2 = boAsset2.GetBusComp(&quot;VF Asset RRU&quot;);
					bcAsset2.ClearToQuery();
					bcAsset2.SetViewMode(AllView); 
//					var search4 = &quot;[Root Asset Id] = &apos;&quot; + sAcccountId + &quot;&apos; AND [VF Discount] = &apos;GBP&apos;&quot;;
					var search4 = &quot;[Root Asset Id] = &apos;&quot; + sAcccountId + &quot;&apos; AND ([Status] = &apos;Active&apos;)&quot;;
					bcAsset2.SetSearchExpr(search4);
					bcAsset2.InvokeMethod(&quot;SetAdminMode&quot;, &quot;TRUE&quot;);
					bcAsset2.ExecuteQuery();
					var Rec4 = bcAsset2.FirstRecord();
					while(Rec4)//Search for Lead Sharer Product under selected Promotion
					{
						bcAsset2.ActivateField(&quot;Product Part Number&quot;);
						var PartNum = bcAsset2.GetFieldValue(&quot;Product Part Number&quot;);
	    				var isIMEI = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_LINE_RENTAL_DISCOUNT&quot;,PartNum);
    					var isBBDiscount = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BLACKBERRY_DISCOUNT&quot;,PartNum);
	    				
	    				if((isIMEI == &quot;Y&quot; &amp;&amp; dataSharerChild == &quot;Y&quot;) || (isBBDiscount == &quot;Y&quot; &amp;&amp; sBBProduct == &quot;Y&quot;))
//	    				if((isBBDiscount == &quot;Y&quot;) || (isBBDiscount != &quot;&quot;))
	    			//	if(PartNum == &quot;106382&quot;)
		    				{
							var sParAssetId = bcAsset2.GetFieldValue(&quot;Parent Asset Id&quot;);
							 bcAsset2.ActivateField(&quot;VF Discount 1&quot;);
	  						 bcAsset2.ActivateField(&quot;VF Discount&quot;);
							var sDiscountVal = bcAsset2.GetFieldValue(&quot;VF Discount 1&quot;);
							var sDiscountType = bcAsset2.GetFieldValue(&quot;VF Discount&quot;);
							var sbcRowId = bcAsset2.GetFieldValue(&quot;Id&quot;);
											DiscountDone = &quot;Y&quot;;
								if(sDiscountType == &quot;GBP&quot;)
								{

									sDiscountVal = ToNumber(sDiscountVal);
									sLineRentalAmt = ToNumber(sLineRentalAmt);
									//TaxAmt = (sLineRentalAmt * taxval);
								//	sLineRentalAmt = sLineRentalAmt;
									sLRAmt = sLineRentalAmt - sDiscountVal;
									var CHECK = sLRAmt;
//TheApplication().RaiseErrorText(CHECK);
								
								}
								else if(sDiscountType == &quot;Percentage&quot;)
								{
									sLineRentalAmt = ToNumber(sLineRentalAmt);
									//sLineRentalAmt = sLineRentalAmt + (sLineRentalAmt * taxval);
									sDiscountVal = sDiscountVal/100;
									sPercentDiscount = (sLineRentalAmt * sDiscountVal);
									sLRAmt = sLineRentalAmt - sPercentDiscount;
								
								}
								isIMEI == &quot;&quot;;
								isBBDiscount == &quot;&quot;;
								DiscountDone = &quot;P&quot;;
							}
												
						Rec4 = bcAsset2.NextRecord(); 
					}

				 	if(DiscountDone == &quot;N&quot; || DiscountDone == &quot;P&quot;)
					{
						//	sLineRentalAmt = ToInteger(sLineRentalAmt);
							//TaxAmt = (sLineRentalAmt * taxval);
							//sLineRentalAmt = sLineRentalAmt;
							sLRAmt = sLineRentalAmt;
					}
					DiscountDone = &quot;N&quot;;

				}

				else if(isIMEI1 != &quot;Y&quot; || isBBDiscount1 != &quot;Y&quot;)
				{
					
							sLineRentalAmt = ToNumber(sLineRentalAmt);
							//TaxAmt = (sLineRentalAmt * taxval) ;
							//sLineRentalAmt = sLineRentalAmt + TaxAmt ;
							sLRAmt = sLineRentalAmt;
				}
				sFinalAmt  = ToNumber(sFinalAmt);
			 sLRAmt = ToNumber(sLRAmt);
//				sFinalAmt = sLRAmt + sFinalAmt;
				sFinalAmt = sFinalAmt + sLRAmt;

							
				Rec3 = bcAsset1.NextRecord();
			}
//TheApplication().RaiseErrorText(sLRAmt);	
				  
		Outputs.SetProperty(&quot;AddAccount&quot;,sFinalAmt);	
//Outputs.SetProperty(&quot;AddAccount&quot;,sLineRentalAmt);	
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
//		bcAsset = null;
//		boAsset = null;
//		oApp = null;
	}
}"
			   SEQUENCE="28"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="09/11/2015 15:41:54"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckValidComms"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckValidComms(Inputs, Outputs)
{
 //QC:64256, RITESH: ADDED NEW CODE TO FETCH CUST COMM ID
	var oApp,sAccnt_id,boCustComs,bcCustComs,sExpr,sServNum,sValidFlg, boAsset, bcAsset;
	try
	{
		oApp = TheApplication();
		var sbill = &quot;&quot;;
		sValidFlg = &quot;N&quot;;
		sAccnt_id = Inputs.GetProperty(&quot;AcntId&quot;);
		sServNum =  Inputs.GetProperty(&quot;SerialNum&quot;);
		boCustComs = oApp.GetBusObject(&quot;Action&quot;);
		bcCustComs = boCustComs.GetBusComp(&quot;Action&quot;);
		boAsset = oApp.GetBusObject(&quot;VF PDS Asset Management Light&quot;);
		bcAsset = boAsset.GetBusComp(&quot;VF Asset Mgmt - Asset Light&quot;);
		with(bcAsset)
		{
			ClearToQuery();
			SetViewMode(AllView);
            ActivateField(&quot;Billing Type&quot;);
			SetSearchSpec(&quot;Serial Number&quot;, sServNum);
 		  	//SetSortSpec(&quot;Created(DESCENDING)&quot;);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
				sbill = GetFieldValue(&quot;Billing Type&quot;);
		}
		if (sbill == &quot;Service Bundle&quot;)
		{
			//sExpr = &quot;[Account Id] = &apos;&quot;+sAccnt_id+&quot;&apos; AND [VF DPA Validation] = &apos;Passed&apos; AND [Status] = &apos;In Progress&apos; AND [Serial Number] = &apos;&quot;+sServNum+&quot;&apos;&quot;;
			sExpr = &quot;[Account Id] = &apos;&quot;+sAccnt_id+&quot;&apos; AND ([VF DPA Validation] IS NOT NULL AND [VF DPA Validation] &lt;&gt; &apos;&apos;) AND [Status] = &apos;In Progress&apos; AND [Serial Number] = &apos;&quot;+sServNum+&quot;&apos;&quot;;
			with(bcCustComs)
			{
				ClearToQuery();
				SetViewMode(AllView);
				SetSearchExpr(sExpr);
	 		  	SetSortSpec(&quot;Created(DESCENDING)&quot;);
				ExecuteQuery(ForwardOnly);
				if(FirstRecord())
				{
					var sDPAValid = GetFieldValue(&quot;VF DPA Validation&quot;);
					var lookupBS = TheApplication().GetService(&quot;VF_Utility_BS&quot;);
					var lookupInputs = TheApplication().NewPropertySet();
				    var lookupOutputs = TheApplication().NewPropertySet();
				    lookupInputs.SetProperty(&quot;LOVType&quot;, &quot;VF_DPA_VALIDATION&quot;);
				    lookupInputs.SetProperty(&quot;LOVValue&quot;, sDPAValid);
				    lookupInputs.SetProperty(&quot;LOVField&quot;,&quot;Low&quot;);
				    lookupBS.InvokeMethod(&quot;LookupLOVDetails&quot;,lookupInputs,lookupOutputs);
					var sDPALow = lookupOutputs.GetProperty(&quot;LOVDetails&quot;);
					if(sDPALow == &quot;Y&quot;)
					{
						sValidFlg = &quot;Y&quot;;
					}
				}
			}
			Outputs.SetProperty(&quot;ValidFlg&quot;,sValidFlg);
		}
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
	//	bcCustComs = null;
	//	boCustComs = null;
	//	bcAsset = null;
	//	boAsset = null;
	//	oApp = null;
	}
}"
			   SEQUENCE="29"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="12/11/2015 15:44:32"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CompareDates"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="/* Function to compare two dates. Will return D1 if it is greater than D2 else will return D2 */
function CompareDates (Inputs, Outputs)
{
	try
	{
		var dDate1 = new Date(Inputs.GetProperty(&quot;D1&quot;));
		var dDate2 = new Date(Inputs.GetProperty(&quot;D2&quot;));

		var sMonthD1 = ToInteger(dDate1.getMonth()+1);
		var sDayD1 = ToInteger(dDate1.getDate());
		var sYearD1 = ToInteger(dDate1.getFullYear());
		var sMonthD2 = ToInteger(dDate2.getMonth()+1);
		var sDayD2 = ToInteger(dDate2.getDate());
		var sYearD2 = ToInteger(dDate2.getFullYear());

		if ((sYearD1 &lt; sYearD2) || ((sYearD1 == sYearD2) &amp;&amp; (sMonthD1 &lt; sMonthD2)) || ((sYearD1 == sYearD2) &amp;&amp; (sMonthD1 == sMonthD2) &amp;&amp; (sDayD1 &lt;= sDayD2)))
			Outputs.SetProperty(&quot;GDate&quot;, Inputs.GetProperty(&quot;D2&quot;));
		else 
			Outputs.SetProperty(&quot;GDate&quot;, Inputs.GetProperty(&quot;D1&quot;));
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		dDate1 = null;
		dDate2 = null;
	}
}"
			   SEQUENCE="30"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="12/23/2013 08:17:17"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CompareDatesInInterval"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="/* Function to compare two dates in interval. Will return : 
   0  if D2 is in interval
   -1 if D2 &lt; D1 
   -2 if D2 is out of interval 
  */
function CompareDatesInInterval (Inputs, Outputs)
{
	try
	{
		var sD1 = Inputs.GetProperty(&quot;D1&quot;);
		var sD2 = Inputs.GetProperty(&quot;D2&quot;);
		var pat = /(\/)/g;
		sD1 = sD1.replace(pat, &quot;-&quot;);
		sD2 = sD2.replace(pat, &quot;-&quot;);
		var dStart = new Date(sD1);		
		var dEnd = new Date(sD2);		
		
		//start date is greater then end date
		if (dStart &gt; dEnd) 
		{
			Outputs.SetProperty(&quot;return&quot;, &quot;-1&quot;);
		}
		else  
		{
			var Interval = ToInteger(Inputs.GetProperty(&quot;Interval&quot;));
			var Days = (dEnd.getTime() - dStart.getTime())/(1000*60*60*24);
			//end date is out of interval
			if (Days &gt; Interval)
			{
				Outputs.SetProperty(&quot;return&quot;, &quot;-2&quot;);
			}
			else //end date is in interval
			{
				Outputs.SetProperty(&quot;return&quot;, &quot;0&quot;);
			}
		}
		
		
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		dStart = null;
		dEnd = null;
	}
}"
			   SEQUENCE="31"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="02/24/2014 03:48:03"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ConcatFixedBIP"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="//GPG: [8-Dec-14] New method added for CR 65405
function ConcatFixedBIP(Inputs, Outputs)
{
	try
	{
		var BO = TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);
		var OhBC = BO.GetBusComp(&quot;Order Entry - Orders&quot;);
		var PBC = BO.GetBusComp(&quot;Order Entry - Line Items&quot;);
		//var BC = BO.GetBusComp(&quot;BIP_Order_Entry_Line_Items&quot;);
		var BC = BO.GetBusComp(&quot;BIP_Order_Entry_Line_Items_Fixed&quot;);
		var promInstanceId = &quot;&quot;;
		promInstanceId =Inputs.GetProperty(&quot;Id&quot;);
		var type = Inputs.GetProperty(&quot;Type&quot;);
		var ohId = Inputs.GetProperty(&quot;OHId&quot;);
		OhBC.ClearToQuery();
		OhBC.SetViewMode(AllView);
		OhBC.SetSearchSpec(&quot;Id&quot;, ohId);
 		var RetVal =&quot;&quot;;
 		var RetVal1 = 0;
 		var RetVal2 = &quot;&quot;;
		var concatFlg = &quot;N&quot;;
		var actionCode = &quot;Delete&quot;;
		//var prodn =  &quot;Fixed Broadband Service&quot;;
		OhBC.ExecuteQuery(ForwardOnly);
		var disUnit = &apos;&apos;;
		var disValue = &apos;&apos;;
		
		
		var ohFd = OhBC.FirstRecord();
		if (ohFd)
		{
			PBC.ClearToQuery();
			PBC.SetViewMode(AllView);
			PBC.SetSearchSpec(&quot;Order Header Id&quot;, ohId);
			PBC.SetSearchSpec(&quot;Prod Prom Instance Id&quot;, promInstanceId);
	
			 
			PBC.ExecuteQuery(ForwardOnly);
			var Fd = PBC.FirstRecord();
			while (Fd)
			{
			
				var rootItemId = PBC.GetFieldValue(&quot;Root Order Item Id&quot;);
				var prodName = PBC.GetFieldValue(&quot;Product&quot;); 
				var ItemId = PBC.GetFieldValue(&quot;Id&quot;);
				var STBDesc = PBC.GetFieldValue(&quot;Product Description&quot;);
				
				var strSearchExpr = &quot;&quot;;
				strSearchExpr = &quot;[Order Header Id]=&apos;&quot;+ohId+&quot;&apos; AND [Root Order Item Id]=&apos;&quot;+rootItemId+&quot;&apos; AND [Action Code]&lt;&gt;&apos;&quot;+actionCode+&quot;&apos;&quot;; 
			
				BC.ClearToQuery();
				BC.ActivateField(&quot;VF Monthly Calc&quot;);
				BC.ActivateField(&quot;Product Id&quot;); 
				BC.SetViewMode(AllView);
				BC.SetSearchExpr(strSearchExpr);
				
				BC.ExecuteQuery(&quot;ForwardOnly&quot;);
				var FdFlg = BC.FirstRecord();
				 

				while (FdFlg)
				{
					var prodId = BC.GetFieldValue(&quot;Product Id&quot;); 
					var mprice = BC.GetFieldValue(&quot;VF Monthly Calc&quot;);
					
					if (type == &quot;Plan&quot; ||  type == &quot;PlanMonthly&quot;)//Your Calling Package Includes &amp; Monthly Charge of your Line
					{
						if (prodName == &quot;Fixed Line Service&quot;)
						{
							//var planBO = TheApplication().GetBusObject(&quot;Admin ISS Product Definition&quot;);
							//var planBC = planBO.GetBusComp(&quot;Internal Product - ISS Admin&quot;);
							with(PBC)
							{
								ClearToQuery();
								SetViewMode(AllView);
								ActivateField(&quot;Product Line&quot;);
						        ActivateField(&quot;VF Monthly Calc&quot;);
						        ActivateField(&quot;Product&quot;);
								SetSearchSpec(&quot;Parent Order Item Id&quot;, ItemId);
								SetSearchSpec(&quot;Product Line&quot;, &quot;Line Rental&quot;);
								ExecuteQuery(&quot;ForwardOnly&quot;);
								var planRec = FirstRecord();
							    
							    
							   
								if(planRec)                                                     //Porting: Neetu Rout:30/4/2015:R2.4.2:Defect Id = 57084:Broadband Details are getting Fetched.
								{
								   var OLmprice = GetFieldValue(&quot;VF Monthly Calc&quot;);
							       //var itemName = GetFieldValue(&quot;Product&quot;);
										if(type == &quot;Plan&quot;)	
											RetVal = GetFieldValue(&quot;Product&quot;); //Product with line = &apos;Line Rental&apos;
										if(type == &quot;PlanMonthly&quot;)
											RetVal = &quot; £&quot; + OLmprice; //Monthly Cost of Line rental
									
									//planRec = NextRecord();
							    }
							 } 
						}						 						 
					}
					
					if ( type == &quot;PlanB&quot; || type == &quot;PlanBMonthly&quot;)//Your broadband service Includes &amp; Monthly Charge of your broadband
					{
						if (prodName == &quot;Fixed Broadband Service&quot;)
						{
							//var planbBO = TheApplication().GetBusObject(&quot;Admin ISS Product Definition&quot;);
							//var planbBC = planbBO.GetBusComp(&quot;Internal Product - ISS Admin&quot;);
							with(PBC)
							{
								ClearToQuery();
								SetViewMode(AllView);
								ActivateField(&quot;Product Line&quot;);
						        ActivateField(&quot;VF Monthly Calc&quot;);
								ActivateField(&quot;Product&quot;);
								SetSearchSpec(&quot;Parent Order Item Id&quot;, ItemId);
								SetSearchSpec(&quot;Product Line&quot;, &quot;Line Rental&quot;);
								ExecuteQuery(&quot;ForwardOnly&quot;);
								var planbRec = FirstRecord();
							    
								if(planbRec)                                           //Porting:Neetu Rout:30/4/2015:R2.4.2:Defect Id = 57084:Broadband Details are getting Fetched.
								{
																
									var OLmprice = GetFieldValue(&quot;VF Monthly Calc&quot;);                 
								//	var itemName = GetFieldValue(&quot;Product&quot;);
										if (type == &quot;PlanB&quot;)
											RetVal = GetFieldValue(&quot;Product&quot;); //Product with class = &apos;Data Bundle&apos;
										if(type == &quot;PlanBMonthly&quot;)
											RetVal = &quot; £&quot; + OLmprice;//Monthly Charge of your broadband
									
							    }
							 }
						  }
					}					
					
					if(type == &quot;DiscountFix&quot; || type == &quot;Extra&quot;) //The discount in your plan &amp; The monthly charge for your extras
					{
						if (prodName == &quot;Fixed Line Service&quot;)
						{
							var discBO = TheApplication().GetBusObject(&quot;Admin ISS Product Definition&quot;);
							var discBC = discBO.GetBusComp(&quot;Internal Product - ISS Admin&quot;);
							with(discBC)
							{
								ClearToQuery();
								SetViewMode(AllView);
								ActivateField(&quot;Product Line&quot;);
								ActivateField(&quot;Part #&quot;);
								ActivateField(&quot;Name&quot;);
								
								SetSearchSpec(&quot;Id&quot;, prodId);
								ExecuteQuery(&quot;ForwardOnly&quot;);
								var discRec = FirstRecord();
								if(discRec)
								{
									var discName =  GetFieldValue(&quot;XA Class Name&quot;);	
									var partNum =  GetFieldValue(&quot;Part #&quot;);						
									if(discName==&quot;Discount&quot; &amp;&amp; type == &quot;DiscountFix&quot;)//The discount in your plan
									{
										RetVal = BC.GetFieldValue(&quot;Product&quot;);
									}
								//	if((discName!=&quot;Discount&quot; || discName!=&quot;Service Type&quot; || discName!=&quot;Line Rental&quot;) &amp;&amp; type == &quot;Extra&quot;)//The monthly charge for your extras
									if(((partNum &gt;=107561 &amp;&amp; partNum &lt;=107572)|| (partNum &gt;= 107598 &amp;&amp; partNum &lt;= 107601)) &amp;&amp; type == &quot;Extra&quot;)//The monthly charge for your extras
									{
										if (concatFlg == &quot;Y&quot;)
										{
											RetVal = RetVal + &quot;, &quot;;
											concatFlg = &quot;N&quot;;
										}
										concatFlg = &quot;Y&quot;;
										RetVal = RetVal+ BC.GetFieldValue(&quot;Product&quot;) + &quot; £&quot; + mprice;
									}
									//discRec = NextRecord();
								}
							}
						}
					}
					
					if( type == &quot;DiscountBB&quot; || type == &quot;ExtraB&quot;) //The discount in your broadband &amp; The monthly charge for your broadband extras
					{
						if (prodName == &quot;Fixed Broadband Service&quot;)
						{
							var discbBO = TheApplication().GetBusObject(&quot;Admin ISS Product Definition&quot;);
							var discbBC = discbBO.GetBusComp(&quot;Internal Product - ISS Admin&quot;);
							with(discbBC)
							{
								ClearToQuery();
								SetViewMode(AllView);
								ActivateField(&quot;Product Line&quot;);
								ActivateField(&quot;Part #&quot;);
								ActivateField(&quot;Name&quot;);
								
								SetSearchSpec(&quot;Id&quot;, prodId);
								ExecuteQuery(&quot;ForwardOnly&quot;);
								var discbRec = FirstRecord();
								if(discbRec)
								{
									var discbName =  GetFieldValue(&quot;XA Class Name&quot;);
									var partNum =  GetFieldValue(&quot;Part #&quot;);							
									if(discbName==&quot;Discount&quot; &amp;&amp; type == &quot;DiscountBB&quot;)//The discount in your broadband
									{
										RetVal = BC.GetFieldValue(&quot;Product&quot;);
									}
									//if((discName!=&quot;Discount&quot; || discName!=&quot;Service Type&quot; || discName!=&quot;Line Rental&quot;) &amp;&amp; type == &quot;ExtraB&quot;)//The monthly charge for your broadband extras
									if((partNum &gt;= 107584 &amp;&amp; partNum &lt;= 107603 ) &amp;&amp; type == &quot;ExtraB&quot;)//The monthly charge for your broadband extras
									{
										if (concatFlg == &quot;Y&quot;)
										{
											RetVal = RetVal + &quot;, &quot;;
											concatFlg = &quot;N&quot;;
										}
										concatFlg = &quot;Y&quot;;
										RetVal = RetVal+ BC.GetFieldValue(&quot;Product&quot;) + &quot; £&quot; + mprice;
									}
									//discbRec = NextRecord();
								}
							}
						}
					}
					var PartnumSTB = PBC.GetFieldValue(&quot;Part Number&quot;);//Shivani|QC:70750,70751|Updated below STB code.
					var STBname = TheApplication().InvokeMethod(&quot;LookUpValue&quot;,&quot;VF_TV_STB&quot;,PartnumSTB);
					
					if (type == &quot;STBDetail&quot; ||  type == &quot;STBServ&quot; ||  type == &quot;STBCount&quot; )  //NR: [3-AUG-15] Code added for Defect 60578
					{
						if (STBname == &quot;Y&quot;)
						{
							with(PBC)
							{
								ClearToQuery();
								SetViewMode(AllView);
								ActivateField(&quot;Product Description&quot;);
						        ActivateField(&quot;Service Id&quot;);
								SetSearchSpec(&quot;Product Description&quot;, STBDesc);
								SetSearchSpec(&quot;Action Code&quot;,&quot;Add&quot;);//[APhadnaik]:QC:70944:To have STB only in action code Add
								ExecuteQuery(&quot;ForwardOnly&quot;);
								var planRec = FirstRecord();
								
								
								while(planRec)                                                     
								{
								   
								   //if (STBDesc == &quot;Set Top Box&quot;)
								   //{ 
								    if (RetVal1 == 0) // [PPUJARI: As Part of Porting of QC 62551]
										{ 
											RetVal = GetFieldValue(&quot;Service Id&quot;);
										}
										else
										{
											RetVal = RetVal + &quot;,&quot; + GetFieldValue(&quot;Service Id&quot;);
										}
										RetVal1 = RetVal1 + 1;
								   //}
									planRec = NextRecord();
								}
								if(type == &quot;STBDetail&quot;)	
											RetVal = GetFieldValue(&quot;Product Description&quot;); 
								/*	if(type == &quot;STBServ&quot;)
											RetVal = GetFieldValue(&quot;Service Id&quot;);*/ //[PPUJARI: As Part of Porting of QC 62551]
								if(type == &quot;STBCount&quot;)	
											RetVal = RetVal1; 	
								
							} 
						}						 						 
					}
					
					
					if ( type == &quot;STBAddon&quot;)//NR: [3-AUG-15] Code added for Defect 60578
					{
						if (prodName == &quot;TV Service&quot;)
						{
					     	if(RetVal2 == &quot;&quot;)
					     	  {
								with(PBC)
								{
									ClearToQuery();
									SetViewMode(AllView);
							        ActivateField(&quot;Fulfilment Item Code&quot;);
									SetSearchSpec(&quot;Parent Order Item Id&quot;, ItemId);
									SetSearchSpec(&quot;Fulfilment Item Code&quot;, &quot;Add On&quot;);
									ExecuteQuery(&quot;ForwardOnly&quot;);
									var planRec = FirstRecord();
								    
									while(planRec)                                                     
									{
										if(RetVal2 == &quot;&quot;)
											RetVal2 = GetFieldValue(&quot;Product&quot;);
										else
											RetVal2 = RetVal2 + &quot;, &quot;+GetFieldValue(&quot;Product&quot;); 
									   planRec = NextRecord();
								    }
									if(RetVal2 == &quot;&quot;)
		                               RetVal = &quot;&quot;;
	                              else 
		                              RetVal = &quot;Add-ons: &quot; + RetVal2 ;								
								 } 
						   }
						}
												 						 
					}
					FdFlg = BC.NextRecord();
					
				}
				Fd = PBC.NextRecord();
			}
		}
		
		Outputs.SetProperty(&quot;Ret&quot;, RetVal);		
	} 
	catch(e)
	{
		Outputs.SetProperty(&quot;Result&quot;, e.toString());
	}
	finally
	{
		discBC = null;
		discBO = null;
		OhBC = null;
		PBC = null;
		BC = null;
		BO = null;
	}
}"
			   SEQUENCE="32"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="12/08/2014 17:15:15"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ConcatProductBIP"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ConcatProductBIP(Inputs, Outputs)
{
	try
	{
		var BO = TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);
		var OhBC = BO.GetBusComp(&quot;Order Entry - Orders&quot;);
		var PBC = BO.GetBusComp(&quot;Order Entry - Line Items&quot;);
		var BC = BO.GetBusComp(&quot;BIP_Order_Entry_Line_Items&quot;);
		var promInstanceId = &quot;&quot;;
		promInstanceId =Inputs.GetProperty(&quot;Id&quot;);
		var type = Inputs.GetProperty(&quot;Type&quot;);
		var ohId = Inputs.GetProperty(&quot;OHId&quot;);
		OhBC.ClearToQuery();
		OhBC.SetViewMode(AllView);
		OhBC.SetSearchSpec(&quot;Id&quot;, ohId);
 		var RetVal =&quot;&quot;;
		var orderingFlg =&quot;N&quot;;
	  //var actionCode = &quot;Add&quot;; //[ASP] [QC 51814][2.4.2 17-oct-14]
		var actionCode = &quot;Delete&quot;;
		OhBC.ExecuteQuery(ForwardOnly);
		var disUnit = &apos;&apos;;
		var disValue = &apos;&apos;;
		
		
		var ohFd = OhBC.FirstRecord();
		if (ohFd)
		{
			PBC.ClearToQuery();
			PBC.SetViewMode(AllView);
			PBC.SetSearchSpec(&quot;Order Header Id&quot;, ohId);
			PBC.SetSearchSpec(&quot;Prod Prom Instance Id&quot;, promInstanceId);
	
			 
			PBC.ExecuteQuery(ForwardOnly);
			var Fd = PBC.FirstRecord();
			while (Fd)
			{
			
				var rootItemId = PBC.GetFieldValue(&quot;Root Order Item Id&quot;);

				var strSearchExpr = &quot;&quot;;
		//		strSearchExpr = &quot;[Order Header Id]=&apos;&quot;+ohId+&quot;&apos; AND [Root Order Item Id]=&apos;&quot;+rootItemId+&quot;&apos; AND [Action Code]=&apos;&quot;+actionCode+&quot;&apos;&quot;;
				strSearchExpr = &quot;[Order Header Id]=&apos;&quot;+ohId+&quot;&apos; AND [Root Order Item Id]=&apos;&quot;+rootItemId+&quot;&apos; AND [Action Code]&lt;&gt;&apos;&quot;+actionCode+&quot;&apos;&quot;; //[ASP] [QC 51814][2.4.2 17-oct-14]
			
				BC.ClearToQuery();
				BC.ActivateField(&quot;Fulfilment Item Code&quot;);
				BC.ActivateField(&quot;VF UnDiscounted MRC CxTotal - Display&quot;);
				BC.ActivateField(&quot;VF Monthly Calc&quot;);
				BC.ActivateField(&quot;Product Id&quot;); //QC#41019Fix
				BC.SetViewMode(AllView);
				BC.SetSearchExpr(strSearchExpr);
				
				BC.ExecuteQuery(&quot;ForwardOnly&quot;);
				var FdFlg = BC.FirstRecord();
				 

				while (FdFlg)
				{
					var nOrdering = BC.GetFieldValue(&quot;VF Ordering&quot;);
					var fulfilCode = BC.GetFieldValue(&quot;Fulfilment Item Code&quot;);
					var prodId = BC.GetFieldValue(&quot;Product Id&quot;); //QC#41019Fix
					var mprice = BC.GetFieldValue(&quot;VF Monthly Calc&quot;);
					//QC#41019Fix
					if( type == &quot;Discount&quot; &amp;&amp; fulfilCode == &quot;Discount&quot;)
					{
						var disBO = TheApplication().GetBusObject(&quot;SWI Admin ISS Product Definition&quot;);
						var disBC = disBO.GetBusComp(&quot;SWI Product User Defined Attribute&quot;);
						with(disBC)
						{
							ClearToQuery();
							SetViewMode(AllView);
							ActivateField(&quot;Product Id&quot;);
							ActivateField(&quot;Name&quot;);
							ActivateField(&quot;Value&quot;);
							SetSearchSpec(&quot;Product Id&quot;, prodId);
							ExecuteQuery(&quot;ForwardOnly&quot;);
							var disRec = FirstRecord();
							while(disRec)
							{
								var disName =  GetFieldValue(&quot;Name&quot;);
								var disVal = GetFieldValue(&quot;Value&quot;);
								if(disName==&apos;Discount Type&apos;)
								{
									disUnit = disVal;
								}
								else
								{
									disValue = disVal;
								}
								disRec = NextRecord();
							}
							
						}
						if (((nOrdering&gt;=33300 &amp;&amp; nOrdering&lt;=33400) || nOrdering == 40994) &amp;&amp; fulfilCode == &quot;Discount&quot; &amp;&amp; disUnit != &quot;&quot; &amp;&amp; disValue != &quot;&quot;)//Shivani|Added for secure net product requirement
							{
								if (orderingFlg == &quot;Y&quot;)
								{
									RetVal = RetVal + &quot;, &quot;;
									orderingFlg = &quot;N&quot;;
								}
								if(disUnit == &apos;Percentage&apos;) {
								
									RetVal = RetVal+BC.GetFieldValue(&quot;Product&quot;)+&quot; &quot;+disValue+&quot;%&quot;;
								}
								else {
									RetVal = RetVal+BC.GetFieldValue(&quot;Product&quot;)+&quot; £&quot;+disValue;
								}
								orderingFlg = &quot;Y&quot;;
							
							}
					}
					
					//QC#41019Fix ends
					
					if ( type == &quot;Plan&quot;)
					{
						if ((nOrdering&gt;=1000 &amp;&amp; nOrdering&lt;=3410) || (nOrdering&gt;=8200 &amp;&amp; nOrdering&lt;=10000 &amp;&amp; fulfilCode == &quot;Data Bundle&quot;) || (nOrdering&gt;=82000 &amp;&amp; nOrdering&lt;=83000) || (nOrdering&gt;=6000 &amp;&amp; nOrdering&lt;=7000))
						{
							if (orderingFlg == &quot;Y&quot;)
							{
								RetVal = RetVal + &quot;, &quot;;
								orderingFlg = &quot;N&quot;;
							}
							orderingFlg = &quot;Y&quot;;
							RetVal = RetVal+ &quot;UK &quot; + BC.GetFieldValue(&quot;Product&quot;);

						}
					}
					if ( type == &quot;EverythingElse&quot;)

					{
						if ((fulfilCode ==&quot;Data Add On&quot; || fulfilCode ==&quot;Add On&quot;) || (fulfilCode ==&quot;Insurance&quot; || fulfilCode ==&quot;Post-pay Roaming Add On&quot;) ||(fulfilCode == &quot;Data Bundle&quot; &amp;&amp; (nOrdering&gt;10000 || nOrdering&lt;8200)) || (fulfilCode == &quot;Secure Network&quot; &amp;&amp; nOrdering == 80200))//Added for defects# 40253, 41017//Shivani|Added for secure net product requirement
						{
							if (orderingFlg == &quot;Y&quot;)
							{
								RetVal = RetVal + &quot;, &quot;;
								orderingFlg = &quot;N&quot;;
							}
							orderingFlg = &quot;Y&quot;;
							RetVal = RetVal+ BC.GetFieldValue(&quot;Product&quot;) + &quot; £&quot; + mprice;

						}
					
					}
					FdFlg = BC.NextRecord();
					
				}
				Fd = PBC.NextRecord();
			}
		}
/*		if (type != &quot;Plan&quot;)
			RetVal = RetVal1;*/
		Outputs.SetProperty(&quot;Ret&quot;, RetVal);
		
		

} 
	catch(e)
	{
		Outputs.SetProperty(&quot;Result&quot;, e.toString());
	}
	finally
	{
		disBC = null;
		disBO = null;
		OhBC = null;
		PBC = null;

		BC = null;
		BO = null;
	}
}"
			   SEQUENCE="33"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="02/27/2014 04:21:15"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ConvertDate"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="//GPG:[12/16/2013] Added for defect 28016, To convert Seconds into hh:mm:ss format
function ConvertDate(Inputs, Outputs)
{
	try
	{		
		var sField = Inputs.GetProperty(&quot;Duration&quot;);
		
		
		var sec = sField % 60;
		var min = (Math.floor(sField/60)) % 60;
		var hr = Math.floor(sField / 3600);
		
		if (hr &lt;10)
			hr = &quot;0&quot;+hr;
		if(min&lt;10)
			min = &quot;0&quot;+min;
		if(sec&lt;10)
			sec = &quot;0&quot;+sec;
			
		Outputs.SetProperty(&quot;DurationCalc1&quot;, hr + &quot;:&quot; + min +&quot;:&quot;+ sec);

	}

	catch(e)
	{
		var errorMessage = e.toString();
		Outputs.SetProperty(&quot;ErrorMessage&quot;, errorMessage);
	}
	finally
	{		
		sField = null;
	}
}"
			   SEQUENCE="34"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="12/23/2013 08:17:17"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ConvertDateFormat"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ConvertDateFormat(Inputs, Outputs)
{ //[QC65934][RITESH][12JAN16]
 try
	{	
	 	
		var OldDate = Inputs.GetProperty(&quot;Ndate&quot;);
		if (OldDate != &quot;&quot; &amp;&amp; OldDate != null &amp;&amp; OldDate != &quot;undefined&quot;)
		{
			var sDate = new Date(OldDate);
			
			var sMonthD1 = ToInteger(sDate.getMonth()+1);
			if (sMonthD1 &lt;10)
			{
			 sMonthD1  = &quot;0&quot;+sMonthD1;
			}
					var sDayD1 = ToInteger(sDate.getDate());
			if (sDayD1 &lt;10)
			{
			 sDayD1 = &quot;0&quot;+sDayD1;
			}
			var sYearD1 = ToInteger(sDate.getFullYear());
	        var day2 = sDayD1 +&quot;/&quot; +sMonthD1+ &quot;/&quot; + sYearD1;	
			
				
			Outputs.SetProperty(&quot;Ndate1&quot;, day2);
		}
	   else
	   { 
	    Outputs.SetProperty(&quot;Ndate1&quot;, &quot;&quot;);
	   }

	}

	catch(e)
	{
		var errorMessage = e.toString();
		Outputs.SetProperty(&quot;ErrorMessage&quot;, errorMessage);
	}
	finally
	{		
		OldDate = null;
	}
}"
			   SEQUENCE="35"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="03/16/2016 16:55:27"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CountRecordsOnBC"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CountRecordsOnBC(Inputs,Outputs)
{
	try
	{
		var BO = TheApplication().GetBusObject(Inputs.GetProperty(&quot;BusinessObject&quot;));
		var BC = BO.GetBusComp(Inputs.GetProperty(&quot;BusinessComponent&quot;));
		var NumOfRecords = 0;
		
		with(BC)
		{
			SetViewMode(AllView);
			ClearToQuery();
	
			if (Inputs.GetProperty(&quot;SearchExpr&quot;)!= &quot;&quot;)
			{
				SetSearchExpr(Inputs.GetProperty(&quot;SearchExpr&quot;));
			}
	
			ExecuteQuery(ForwardBackward);
	
			NumOfRecords = CountRecords();
			Outputs.SetProperty(&quot;NumOfRecords&quot;,NumOfRecords);
		}
	}
	catch (e)
	{
		Outputs.SetProperty(&quot;Custom Error&quot;,e.errText);
		throw(e);
	}
	finally
	{
		BC = null;
		BO = null;
	}
}"
			   SEQUENCE="36"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="11/27/2012 17:05:40"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CreateAccount"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CreateAccount(Inputs,Outputs)
{
	try
	{
		var AccountBO = TheApplication().GetBusObject(&quot;VF Account BO&quot;);
		var AccountBC = AccountBO.GetBusComp(&quot;Account&quot;);
		var ProfileBC = AccountBO.GetBusComp(&quot;Com Invoice Profile&quot;);
		TheApplication().SetProfileAttr(&quot;VF_PREACT_SKIP_REFRESH&quot;, &quot;Y&quot;);
		var vType   = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACCOUNT_TYPE&quot;,&quot;Residential&quot;);
		var vCateg  = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_ACCOUNT_CATEGORY&quot;,&quot;Individual&quot;);
		var vSubCat = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_ACCOUNT_SUB_CATEGORY&quot;,&quot;Consumer&quot;);	
		
		with(AccountBC)
		{
			NewRecord(NewAfter);
			TheApplication().SetProfileAttr(&quot;Skip Profile Dummy&quot;,&quot;Y&quot;);
			var AccountId = GetFieldValue(&quot;Id&quot;);
			SetFieldValue(&quot;Public&quot;, &quot;Y&quot;);
			SetFieldValue(&quot;VF Preact Account flag&quot;, &quot;Y&quot;);
			SetFieldValue(&quot;Type&quot;, vType);
			SetFieldValue(&quot;VFCategory&quot;, vCateg);
			SetFieldValue(&quot;VFSubCategory&quot;, vSubCat);
			WriteRecord();
			Outputs.SetProperty(&quot;AccountId&quot;, AccountId);
			with(ProfileBC)
			{
				TheApplication().SetProfileAttr(&quot;Skip Profile Dummy&quot;,&quot;&quot;);
				NewRecord(NewAfter);
				var PrifileId = GetFieldValue(&quot;Id&quot;);
				var None = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;PAYMENT_METHOD&quot;, &quot;None&quot;);
				var Prepaid = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;BILL_PAYMENT_TYPE&quot;,&quot;Prepaid&quot;);
				SetFieldValue(&quot;Payment Type&quot;, Prepaid);
				SetFieldValue(&quot;Payment Method&quot;, None);
				WriteRecord();
				Outputs.SetProperty(&quot;BillingAccountId&quot;, PrifileId);
			}
		}
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		ProfileBC = null;
		AccountBC = null;
		AccountBO = null;	
	}
}"
			   SEQUENCE="37"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="02/24/2012 17:43:44"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CreateDateRecurring"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CreateDateRecurring(Inputs,Outputs)
{
	try
	{
		var today = new Date();
		today.setDate((today.getDate())+30);  
		var d = today.getDate();
		if(ToString(d).length == 1){
			d = &quot;0&quot;+d;
		}
		var m = (ToInteger(today.getMonth()) + 1);
		if(ToString(m).length == 1){
			m = &quot;0&quot;+m;
		}
		today = d + &quot;/&quot; + m + &quot;/&quot; + today.getFullYear() + &quot; &quot; + today.getHours() + &quot;:&quot; + today.getMinutes() + &quot;:&quot; + &quot;00&quot;;
		Outputs.SetProperty(&quot;effectiveDate&quot;, today);
	}

	finally
	{
		today = null;// Oracle Review Memory Leak Deallocation 31/07/2014
	}
}"
			   SEQUENCE="38"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="07/09/2013 08:05:18"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CreateLineItemDelayReason"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="/**************************************************
	NAME:              	CreateLineItemDelayReason		
	DESCRIPTION: 		Create Delay Reason for Line Item
	INPUT PARAMETERS:	Id and Status Context of Line Item
	OUTPUT PARAMETERS:	NA 
	AUTHOR:				Ashish Kumar
	DATE CREATED:		21/09/2015 R15.2.3
*************************************************/ 
function CreateLineItemDelayReason(Inputs,Outputs)
{
	try
	{
		
		var sId = Inputs.GetProperty(&quot;Id&quot;);
		var statusContext 	= &quot;&quot;;
		statusContext 	= Inputs.GetProperty(&quot;Status Context&quot;);
		var statusDelayed = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;FS_ORDER_STATUS&quot;, &quot;Delayed&quot;);
		var delayReason = &quot;&quot;;
		var prodName = &quot;&quot;;
		
		if(statusContext != &quot;&quot;)
		{
			try
			{
				var delayBO = TheApplication().GetBusObject(&quot;VF_UK_BO_NoLink&quot;);
				
				var ItemBC = delayBO.GetBusComp(&quot;VF Order Entry - Line Items Light&quot;);
				var lovBC = delayBO.GetBusComp(&quot;List Of Values&quot;);
				var delayBC = delayBO.GetBusComp(&quot;VF Order Item Delay Reasons BC&quot;);
				
				with(ItemBC)
				{
					ActivateField(&quot;Product&quot;);
					SetViewMode(AllView);
					SetSearchSpec(&quot;Id&quot;, sId);
					ExecuteQuery(ForwardOnly);
					if(FirstRecord())
					{
						prodName = GetFieldValue(&quot;Product&quot;);
					}
					if(prodName == &apos;Fixed Broadband Service&apos;|| prodName == &apos;Fixed Line Service&apos;)
					{
						with(lovBC)
						{
							ActivateField(&quot;Description&quot;);
							ActivateField(&quot;Active&quot;);
							ActivateField(&quot;Name&quot;);
							ActivateField(&quot;Type&quot;);
							ClearToQuery();
							SetViewMode(AllView);
							SetSearchSpec(&quot;Type&quot;, &quot;VF_FL_DELAY_REASON&quot;);
							SetSearchSpec(&quot;Name&quot;, statusContext);
							ExecuteQuery(ForwardOnly);
							if(FirstRecord())
							{
								delayReason = GetFieldValue(&quot;Description&quot;);
							}
						}
						if(delayReason != &quot;&quot;)
						{
							with(delayBC)
							{
								ActivateField(&quot;Order Item Id&quot;);
								ActivateField(&quot;Note Type&quot;);
								ActivateField(&quot;Note&quot;);
								NewRecord(NewAfter);
								SetFieldValue(&quot;Order Item Id&quot;,sId);
								SetFieldValue(&quot;Note Type&quot;,statusDelayed);
								SetFieldValue(&quot;Note&quot;,delayReason);
								WriteRecord();
							}
						}
					}
				}
			}
			catch(e)
			{
				var err1 = e.errText;
			}
			finally
			{
				lovBC = null;
				delayBC = null;
				ItemBC = null;
				delayBO = null;
			}
							
		}
	}
	catch(e)
	{
		var err = e.errText;
	}
	finally
	{
		
	}
}"
			   SEQUENCE="39"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="03/16/2016 16:55:27"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CreateSR"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CreateSR(strType,strArea,strSubArea,strAccountId,strContactId, strDescription,strOwnerGroup, strOwner)
{
	try
	{
		var boServiceReq = TheApplication().GetBusObject(&quot;Service Request&quot;);
		var bcServiceReq = boServiceReq.GetBusComp(&quot;Service Request&quot;);
		var srId = &quot;&quot;;
		
		with(bcServiceReq)
		{
		//Commented as a part of code review,force activated in BC.
		//	ActivateField(&quot;INS Product&quot;);   // Type of the Service Request
		//	ActivateField(&quot;INS Sub-Area&quot;);  // Sub-Area of the Service Request
		//	ActivateField(&quot;INS Area&quot;); 	    // Area of the Service Request
		//	ActivateField(&quot;Account Id&quot;);
		//	ActivateField(&quot;VF Abstract&quot;);
		//	ActivateField(&quot;Owner Group&quot;);
		//	ActivateField(&quot;Owner&quot;);
		//	ActivateField(&quot;Sub-Status Copy&quot;);
			bcServiceReq.SetViewMode(AllView);
			bcServiceReq.NewRecord(NewAfter);
			srId = bcServiceReq.GetFieldValue(&quot;Id&quot;);
			bcServiceReq.SetFieldValue(&quot;INS Product&quot;, strType);
			bcServiceReq.SetFieldValue(&quot;INS Area&quot;, strArea);
			bcServiceReq.SetFieldValue(&quot;INS Sub-Area&quot;, strSubArea);
			bcServiceReq.SetFieldValue(&quot;VF Abstract&quot;, strDescription);

			if (strAccountId != null &amp;&amp; strAccountId != &quot;&quot;)
			{
				bcServiceReq.SetFieldValue(&quot;Account Id&quot;, strAccountId);
			}
			
			if (strContactId != null &amp;&amp; strContactId != &quot;&quot;)
			{
				bcServiceReq.SetFieldValue(&quot;Contact Id&quot;, strContactId);
			}
			
			if (strOwnerGroup != &quot;&quot;)
			{
				bcServiceReq.SetFieldValue(&quot;Owner Group&quot;, strOwnerGroup);
			}
			
			bcServiceReq.WriteRecord();
			
			if (strOwner!= &quot;&quot;)
			{
				var strSubStatus = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;SR_SUB_STATUS&quot;, &quot;Assigned&quot;);
				bcServiceReq.SetFieldValue(&quot;Sub-Status Copy&quot;, strSubStatus);
				bcServiceReq.SetFieldValue(&quot;Owner&quot;, strOwner);
			}
			
			bcServiceReq.WriteRecord();
		}	
	}
	
	catch(e)
	{
		throw(e);
		
	}
	
	finally
	{
		bcServiceReq = null;
		boServiceReq = null;
		
	
	}
}"
			   SEQUENCE="40"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="06/30/2011 14:28:33"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CreateSR_TT"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CreateSR_TT(Inputs,Outputs)
{

	try
	{
		var strSR_Type = &quot;&quot;;
		var ErrorCode = Inputs.GetProperty(&quot;ErrorCode&quot;);
		var strAccountId = Inputs.GetProperty(&quot;AccountId&quot;);
		var strContactId = Inputs.GetProperty(&quot;ContactId&quot;);	
		var strArea = &quot;&quot;;
		var strType = &quot;&quot;;
		var strSubArea = &quot;&quot;;
		var strDescription = &quot;&quot;;
		var strOwnerGroup = &quot;&quot;;
		var strOwner = &quot;&quot;;
		var srId = &quot;&quot;;

		if (strContactId == &quot;&quot;)
		{
			var boAccount = TheApplication().GetBusObject(&quot;Account&quot;);
			var bcAccount = boAccount.GetBusComp(&quot;Account&quot;);
			with(bcAccount)
			{
				ClearToQuery();		
				SetSearchSpec(&quot;Id&quot;, strAccountId);
				ExecuteQuery(ForwardOnly);
				if(FirstRecord())
				{
					strContactId = GetFieldValue(&quot;Primary Contact Id&quot;);
				}
			}
		}

		var boErrorCodeSR = TheApplication().GetBusObject(&quot;VF SLA BO&quot;);
		var bcErrorCodeSR = boErrorCodeSR.GetBusComp(&quot;VF ErrorCode SR BC&quot;);
		with(bcErrorCodeSR)
		{
			ClearToQuery();
			ActivateField(&quot;Owner Group&quot;);			
			SetSearchSpec(&quot;VF_ErrorCode&quot;, ErrorCode);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				strSR_Type = GetFieldValue(&quot;VF_SR Type&quot;);
				strType = GetFieldValue(&quot;VF_Type&quot;);
				strArea = GetFieldValue(&quot;VF_Area&quot;);
				strSubArea = GetFieldValue(&quot;VF_Subarea&quot;);
				strDescription = GetFieldValue(&quot;VF_Description&quot;);
				strOwnerGroup = GetFieldValue(&quot;Owner Group&quot;);
				//strOwnerGroup = GetFieldValue(&quot;Owned By Group Id&quot;);
				strOwner = GetFieldValue(&quot;VF Onwer&quot;);
				//strOwner = GetFieldValue(&quot;Owned By Id&quot;);
				switch(strSR_Type)
				{
				 case &quot;SR&quot;:					
				 	CreateSR(strType,strArea,strSubArea,strAccountId,strContactId, strDescription,strOwnerGroup, strOwner);
					break;
				 case &quot;TT&quot;:
					srId = CreateTT(strType, strArea, strSubArea, strAccountId, strContactId, strDescription,strOwnerGroup, strOwner);
					break;
				 default :
				 	break;
				}
			}
		}
	}
	
	catch(e)
	{
		var sErrMsg = &quot;Error:&quot; + e.errText;	
        Outputs.SetProperty(&quot;ErrorDescription&quot;,sErrMsg);
		throw(e);
	}
	
	finally
	{
		Outputs.SetProperty(&quot;SR Id&quot;, srId);
		bcErrorCodeSR = null;
		bcAccount = null;
		boErrorCodeSR = null;
		boAccount = null;
		strSR_Type = &quot;&quot;;
		ErrorCode = &quot;&quot;;
		strAccountId = &quot;&quot;;
		strArea = &quot;&quot;;
		strType = &quot;&quot;;
		strSubArea = &quot;&quot;;
	}


}"
			   SEQUENCE="41"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="09/09/2011 13:22:50"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CreateTT"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CreateTT(strType, strArea, strSubArea, strAccountId, strContactId, strDescription,strOwnerGroup, strOwner)
{

try
{
	var boServiceReq = TheApplication().GetBusObject(&quot;VF Trouble Ticket BO&quot;);
	var bcServiceReq = boServiceReq.GetBusComp(&quot;VF Trouble Tickets BC&quot;);
	with(bcServiceReq)
	{
	//  Commented as a part of code review,force activated in BC.
	//	ActivateField(&quot;INS Product&quot;);   // Type of the Service Request
	//	ActivateField(&quot;INS Sub-Area&quot;);  // Sub-Area of the Service Request
	//	ActivateField(&quot;INS Area&quot;); 	    // Area of the Service Request
	//	ActivateField(&quot;Account Id&quot;);	
	//	ActivateField(&quot;Abstract&quot;);
	//	ActivateField(&quot;Owner Group&quot;);
	//	ActivateField(&quot;Owner&quot;);
		bcServiceReq.SetViewMode(AllView);				
		bcServiceReq.NewRecord(NewAfter);
		bcServiceReq.SetFieldValue(&quot;INS Product&quot;, strType);
		bcServiceReq.SetFieldValue(&quot;INS Area&quot;, strArea);
		bcServiceReq.SetFieldValue(&quot;INS Sub-Area&quot;, strSubArea);
		bcServiceReq.SetFieldValue(&quot;Abstract&quot;, strDescription);
		if (strOwnerGroup != &quot;&quot;)
		{
			bcServiceReq.SetFieldValue(&quot;Owner Group&quot;, strOwnerGroup);
		}
		if (strOwner!= &quot;&quot;)
		{
			bcServiceReq.SetFieldValue(&quot;Owner&quot;, strOwner);
		}
		if (strAccountId != null &amp;&amp; strAccountId != &quot;&quot;)
		{
			bcServiceReq.SetFieldValue(&quot;Account Id&quot;, strAccountId);
		}
		
		if (strContactId != null &amp;&amp; strContactId != &quot;&quot;)
		{
			bcServiceReq.SetFieldValue(&quot;Contact Id&quot;, strContactId);
		}
		
		
		bcServiceReq.WriteRecord();
	}
}
catch(e)
{
	throw(e);
}

finally
{
	bcServiceReq = null;
	boServiceReq = null;

}

}"
			   SEQUENCE="42"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="06/30/2011 14:28:51"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CustomQueryListOnBC"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CustomQueryListOnBC(Inputs,Outputs)
{
try{
		Outputs.SetProperty(&quot;ErrorMsg&quot;,&quot;&quot;);
		Outputs.SetProperty(&quot;ErrorCode&quot;,&quot;&quot;);
		var BO = TheApplication().GetBusObject(Inputs.GetProperty(&quot;BusinessObject&quot;));
		var BC = BO.GetBusComp(Inputs.GetProperty(&quot;BusinessComponent&quot;));
		var DebugMode =Inputs.GetProperty(&quot;DebugMode&quot;);
		var ListaField = Inputs.GetProperty(&quot;ListaField&quot;).split(&quot;,&quot;);
		var SortField = Inputs.GetProperty(&quot;SortField&quot;);		
		var SortDirection = Inputs.GetProperty(&quot;SortDirection&quot;);
		var Pool = Inputs.GetProperty(&quot;Pool&quot;);
		var ProcessName = Inputs.GetProperty(&quot;SubProcessName&quot;);
		var MaxRows = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_GLOBAL_PARAMETER&quot;, &quot;MAX_ROWS&quot;);
		var field;
		var curr_row=&quot;&quot;;
		var cont=1;
		var lista=&quot;&quot;;
		var brec = false;
		var Svc	= TheApplication().GetService(&quot;Asynchronous Server Requests&quot;);
		var In	= TheApplication().NewPropertySet();
		var Out	= TheApplication().NewPropertySet();
		var Child = TheApplication().NewPropertySet();
		
		
		
		BC.SetViewMode(AllView);
		BC.ClearToQuery();
		for (field in ListaField) 
			BC.ActivateField(ListaField[field]);	
		if (Inputs.GetProperty(&quot;Id&quot;)!=&quot;&quot;){
			BC.SetSearchExpr(&quot;[Id]=&apos;&quot; + Inputs.GetProperty(&quot;Id&quot;) + &quot;&apos;&quot;);
		}else{
			BC.SetSearchExpr(Inputs.GetProperty(&quot;SearchExpr&quot;));
		}
		if (SortField!=&quot;&quot;){
			if (SortDirection==&quot;ASCENDING&quot; || SortDirection==&quot;DESCENDING&quot;){
				BC.SetSortSpec(SortField + &quot;(&quot; + SortDirection + &quot;)&quot;);
			}else{
				BC.SetSortSpec(SortField + &quot;(ASCENDING)&quot;);
			}
		}
		
		if (MaxRows == null || MaxRows ==&quot;&quot;)
			MaxRows = 500;
		
		if(DebugMode == &quot;Y&quot;)
		{	
			BC.ExecuteQuery(ForwardBackward);
			brec= BC.FirstRecord();
			while(brec &amp;&amp; cont &lt;= (Pool)*MaxRows){
				if(cont &gt; (Pool-1)*MaxRows &amp;&amp; cont &lt;= (Pool)*MaxRows){			
					for (field in ListaField){								 
						lista=BC.GetFieldValue(ListaField[field])+&quot;,&quot;+lista ;
					}
				}
				brec = BC.NextRecord();
				cont++;
			}
			
			if(lista.substring(lista.length -1, lista.length) == &quot;,&quot;)
			{
				lista = lista.substring(0, lista.length -1);
			}
			
			Outputs.SetProperty(&quot;Lista&quot;,lista);
			if(brec){
				Outputs.SetProperty(&quot;Finish&quot;,&quot;N&quot;);
			}else{
				Outputs.SetProperty(&quot;Finish&quot;,&quot;Y&quot;);
			}
		}
		else
		{
			BC.ExecuteQuery(ForwardBackward);
			brec= BC.FirstRecord();
			while(brec){
				
											 
				curr_row = BC.GetFieldValue(ListaField[field]);
				In.SetProperty(&quot;Component&quot;, &quot;WfProcMgr&quot;);
				Child.SetProperty(&quot;Object Id&quot;, curr_row);
				Child.SetProperty(&quot;ProcessName&quot;, ProcessName);
				In.AddChild(Child);
				Svc.InvokeMethod(&quot;SubmitRequest&quot;, In, Out);			
			
				brec = BC.NextRecord();
			}
		}
		
		
		
	}
	catch (e){
		Outputs.SetProperty(&quot;Custom Error&quot;,e.errText);
		throw ( e )
	}
	finally{
		BC = null;
		BO = null;
		ListaField = null;
		Child = null;
		In = null;
		Out=null;
		Svc = null;
	}
}"
			   SEQUENCE="43"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="07/24/2012 07:51:48"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="DateToString"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function DateToString(dDate) 
{ 
var sMonth = ToString(dDate.getMonth() + 1); 
if (sMonth.length == 1) {sMonth = &quot;0&quot; + sMonth;} 
var sDay = ToString(dDate.getDate()); 
if (sDay.length == 1) {sDay = &quot;0&quot; + sDay;} 
var sHours = ToString(dDate.getHours()); 
if (sHours.length == 1) {sHours = &quot;0&quot; + sHours;} 
var sMinutes = ToString(dDate.getMinutes()); 
if (sMinutes.length == 1) {sMinutes = &quot;0&quot; + sMinutes;} 
var sSeconds = ToString(dDate.getSeconds()); 
if (sSeconds.length == 1) {sSeconds = &quot;0&quot; + sSeconds;} 
if (sHours == &quot;00&quot; &amp;&amp; sMinutes == &quot;00&quot; &amp;&amp; sSeconds == &quot;00&quot;) 
return (sMonth +&quot;/&quot;+ sDay +&quot;/&quot; + dDate.getFullYear()) 
else 
return (sMonth +&quot;/&quot;+ sDay +&quot;/&quot; + dDate.getFullYear() +&quot; &quot;+sHours+&quot;:&quot;+sMinutes+&quot;:&quot;+sSeconds); 
}"
			   SEQUENCE="44"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="09/03/2013 14:25:31"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="DeviceValueBIP"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function DeviceValueBIP(Inputs, Outputs)//GPG
{
	try
	{
		var BO = TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);
		var OhBC = BO.GetBusComp(&quot;Order Entry - Orders&quot;);
		var PBC = BO.GetBusComp(&quot;Order Entry - Line Items&quot;);
		var BC = BO.GetBusComp(&quot;BIP_Order_Entry_Line_Items&quot;);
		var promInstanceId = &quot;&quot;;
		promInstanceId =Inputs.GetProperty(&quot;Id&quot;);
		//var type = Inputs.GetProperty(&quot;Type&quot;);
		var ohId = Inputs.GetProperty(&quot;OHId&quot;);
		OhBC.ClearToQuery();
		OhBC.SetViewMode(AllView);
		OhBC.SetSearchSpec(&quot;Id&quot;, ohId);
 		var RetVal =&quot;&quot;;
		OhBC.ExecuteQuery(ForwardOnly);
		
		
		var ohFd = OhBC.FirstRecord();
		if (ohFd)
		{
			PBC.ClearToQuery();
			PBC.SetViewMode(AllView);
			PBC.SetSearchSpec(&quot;Order Header Id&quot;, ohId);
			PBC.SetSearchSpec(&quot;Prod Prom Instance Id&quot;, promInstanceId);
	
			 
			PBC.ExecuteQuery(ForwardOnly);
			var Fd = PBC.FirstRecord();
			while (Fd)
			//if(PBC.FirstRecord())
			{		
				var rootItemId = PBC.GetFieldValue(&quot;Root Order Item Id&quot;);

				var strSearchExpr = &quot;&quot;;
				strSearchExpr = &quot;[Order Header Id]=&apos;&quot;+ohId+&quot;&apos; AND [Root Order Item Id]=&apos;&quot;+rootItemId+&quot;&apos;&quot;;
			
				BC.ClearToQuery();
				BC.ActivateField(&quot;Fulfilment Item Code&quot;);
				BC.ActivateField(&quot;Product Id&quot;); 
				BC.ActivateField(&quot;VF Std Price Unit&quot;); 
				BC.ActivateField(&quot;Tax Var1&quot;); 
				BC.ActivateField(&quot;temp2&quot;); 
				BC.SetViewMode(AllView);
				BC.SetSearchExpr(strSearchExpr);
				
				BC.ExecuteQuery(&quot;ForwardOnly&quot;);
				var FdFlg = BC.FirstRecord();
				 

				while (FdFlg)
				{
					var prodId = BC.GetFieldValue(&quot;Product Id&quot;);
					var stdprice = BC.GetFieldValue(&quot;VF Std Price Unit&quot;);
					var tax = BC.GetFieldValue(&quot;Tax Var1&quot;);
					var fulfilCode = BC.GetFieldValue(&quot;Fulfilment Item Code&quot;);
					
					if(fulfilCode ==&quot;Handset&quot; || fulfilCode ==&quot;Device&quot; || fulfilCode ==&quot;Data Device&quot;)
					{
						var valCalc = ToNumber(stdprice) + ToNumber(stdprice*tax);	
						
						var Inputs1= TheApplication().NewPropertySet();
						var Outputs1= TheApplication().NewPropertySet();		
						Inputs1.SetProperty(&quot;TruncateDecimal&quot;, 2);
						Inputs1.SetProperty(&quot;Amount&quot;, valCalc)
						TruncateDecimal(Inputs1, Outputs1);		
						var Ret = Outputs1.GetProperty(&quot;Amount&quot;);
						RetVal = Ret + &quot; &quot; + &quot;inc VAT - see clause 11.d&quot;;
					}			
					FdFlg = BC.NextRecord();
					
				}
				Fd = PBC.NextRecord();
			}
		}

		Outputs.SetProperty(&quot;Ret&quot;, RetVal);
	} 
	catch(e)
	{
		Outputs.SetProperty(&quot;Result&quot;, e.toString());
	}
	finally
	{
		OhBC = null;
		PBC = null;
		BC = null;
		BO = null;
	}
}"
			   SEQUENCE="45"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="09/09/2014 20:38:04"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ExportBillReadyNotification"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ExportBillReadyNotification(Inputs, Outputs)
{
	try{
	
		var filename = Inputs.GetProperty(&quot;Filename&quot;);
		if(filename == null || filename == &quot;&quot;){
			Outputs.SetProperty(&quot;Error&quot;,&quot;1&quot;);
			return (CancelOperation);
		}
			
		var path = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_GLOBAL_PARAMETER&quot;,&quot;NOTIFICATION_PATH&quot;);
		var file = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_GLOBAL_PARAMETER&quot;,&quot;NOTIFICATION_FILE&quot;);	
		
		var Record	= false 
		var tName = null, tMedia = null, tText = null, tResult = null;
		var oFile;
		var separator = Inputs.GetProperty(&quot;Separator&quot;);
		
	//	var patter1 = /(&quot;&quot;)/g;
		

		var patter1 = /( )/g;
		filename = filename.replace(patter1, &quot;&quot;);
		patter1 = /(:)/g;
		filename = filename.replace(patter1, &quot;&quot;);
		patter1 = /(\/)/g;
		filename = filename.replace(patter1, &quot;&quot;);		
		
		filename = path+filename+file;
		
		var BO = TheApplication().GetBusObject(&quot;VF_SMS_Export_BO&quot;);
		var BC = BO.GetBusComp(&quot;VF Comm Package&quot;);
		with(BC){
			
			ClearToQuery();
			SetViewMode(AllView);
			ActivateField(&quot;Media Type&quot;);
			ActivateField(&quot;Name&quot;);
			ActivateField(&quot;Template Text&quot;);
			ExecuteQuery(ForwardOnly);
							
			Record = FirstRecord();
			
			if(Record)
				oFile = Clib.fopen(filename,&quot;wu&quot;);
			else{
				Outputs.SetProperty(&quot;Error&quot;,&quot;1&quot;);
				return (CancelOperation);
			}
				
			while (Record){
				tName = GetFieldValue(&quot;Name&quot;);
				tText = GetFieldValue(&quot;Template Text&quot;);
				tMedia = GetFieldValue(&quot;Media Type&quot;);

				tResult = tName+separator+tText+separator+tMedia+&quot;\n&quot;;

				if ( oFile == null )
                    throw(&quot;Error opening file for writing. &quot;);
                else{
                    Clib.fputs(tResult, oFile)
                
                Record = NextRecord();	
                }			
			}
			Clib.fclose(oFile);
			Outputs.SetProperty(&quot;Error&quot;,&quot;0&quot;);		
		}			
	}
	catch(e){
		Outputs.SetProperty(&quot;Error&quot;,&quot;1&quot;);
		TheApplication().RaiseErrorText(e);
	}
	finally{
		BC = null;
		BO = null;
		if (oFile != null)
			Clib.fclose(oFile);
	}
}"
			   SEQUENCE="46"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="05/12/2013 10:47:51"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Filter"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Filter(Inputs, Outputs)
{
	var sInSearch, sAccountId,objApp,sOutSearch,boAsset,bcAsset,sSearch,sProdId,bRec;
	try
	{
		objApp = TheApplication();
		sInSearch = Inputs.GetProperty(&quot;Search Specification&quot;);
        sAccountId = Inputs.GetProperty(&quot;Account Id&quot;);
		sProdId = &quot;&quot;;
		sOutSearch = &quot;&quot;;
		if(sAccountId != null &amp;&amp; sAccountId!= &quot;&quot; &amp;&amp; sInSearch != null &amp;&amp; sInSearch != &quot;&quot;)
		{
			boAsset 	= TheApplication().GetBusObject(&quot;Account&quot;);
			bcAsset 	= boAsset.GetBusComp(&quot;Asset Mgmt - Asset&quot;);
			sSearch = &quot;[Owner Account Id] = &apos;&quot;+sAccountId+&quot;&apos; AND [Status] = &apos;Active&apos; AND [Product Type] = &apos;Promotion&apos;&quot;;
			with(bcAsset)
			{
				ClearToQuery();
				SetViewMode(AllView);
				SetSearchExpr(sSearch);
				ExecuteQuery(ForwardOnly);
				bRec = FirstRecord();
				while(bRec)
				{
					sProdId = GetFieldValue(&quot;Product Id&quot;);
					if(sInSearch.search(sProdId) != &quot;-1&quot;)
					{
						if(sOutSearch == &quot;&quot;)
							sOutSearch = &quot;([Product Id] = &apos;&quot;+sProdId+&quot;&apos;&quot;;
						else
							sOutSearch = sOutSearch + &quot; OR [Product Id] = &apos;&quot;+sProdId+&quot;&apos;&quot;;	
					}
					bRec = NextRecord();
				}
				if(sOutSearch != &quot;&quot;)
					sOutSearch = sOutSearch + &quot;)&quot;;
			}
		}
		Outputs.SetProperty(&quot;Search Specification&quot;, sOutSearch);
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		bcAsset = null;
		boAsset = null;
		objApp = null;
	}
}"
			   SEQUENCE="47"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="08/13/2015 15:52:40"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="FindChild"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function FindChild(Inputs, &amp;RequestType)
{
	try
	{
		var sXMLType = Inputs.GetType();
		var psResult = &quot;&quot;;
		
		if(sXMLType == RequestType)
		{
			return(Inputs);
		}
		
		var iCount = Inputs.GetChildCount();

		//Check on current level
		for(var i=0; i&lt;iCount; i++)
		{
			sXMLType = Inputs.GetChild(i).GetType();
			
			if((sXMLType == RequestType))
			{
				psResult = Inputs.GetChild(i);
				return (psResult);
			}
		}
		
		//Search done in the lower level if the previous check returns nothing
		for (i=0; i&lt;iCount; i++)
		{
			psResult = FindChild(Inputs.GetChild(i), RequestType);

			if (psResult != &quot;&quot;)
			{
				return(psResult);
			}
		}

		return(&quot;&quot;);
	}
	
	catch(e)
	{
		var errorMessage = e.toString();
		return(&quot;&quot;);
	}
	finally{
	}	
}"
			   SEQUENCE="48"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="08/24/2011 06:14:49"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="FindInArray"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function FindInArray(Inputs,Outputs)
{
	var key = Inputs.GetProperty(&quot;key&quot;);
	var found = &quot;N&quot;; 
	var array = Inputs.GetProperty(&quot;array&quot;);
	if ((array!=&quot;&quot;)&amp;&amp;(array!=null))
	{
		array = array.split(&quot;,&quot;);
		var i = 0;
		
		var dimension = array.length;
		
		while ((i&lt;dimension)&amp;&amp;(found==&quot;N&quot;))
	    {
	    	if(key == array[i])
	    	{
	    		found = &quot;Y&quot;;
	    	}
	    	i++;
	    }
    }
    Outputs.SetProperty(&quot;found&quot;,found);
	array = null;// Oracle Review Memory Leak Deallocation 31/07/2014

}"
			   SEQUENCE="49"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="08/01/2013 12:16:09"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="FindProdLine"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function FindProdLine(Inputs, Outputs)
{
	try
	{
		var OrderId = Inputs.GetProperty(&quot;OrderId&quot;);
		var OrderBO = TheApplication().GetBusObject(&quot;VF_UK_BO_NoLink&quot;);
		var OrderBC = OrderBO.GetBusComp(&quot;Order Entry - Orders&quot;);
		var OrdBO 	= TheApplication().GetBusObject(&quot;VF_UK_BO_NoLink&quot;);
		var LineItemBC 	= OrdBO.GetBusComp(&quot;Order Entry - Line Items&quot;);
		var record	= &quot;&quot;;
		
		Outputs.SetProperty(&quot;Flag&quot;, &quot;N&quot;);
		with(OrderBC)
		{
			ClearToQuery();
			SetViewMode(AllView);
			SetSearchSpec(&quot;Id&quot;, &quot;&apos;&quot; + OrderId + &quot;&apos;&quot;);
			ExecuteQuery(ForwardOnly);
			if (FirstRecord())
			{
				with(LineItemBC)
				{
					ClearToQuery();
					SetViewMode(AllView);
					SetSearchSpec(&quot;Order Header Id&quot;, &quot;&apos;&quot; + OrderId + &quot;&apos;&quot;);
					SetSearchSpec(&quot;Product Line&quot;, &quot;MSISDN&quot;);
					SetSearchSpec(&quot;Action Code&quot;, &quot;Add&quot;);
					ExecuteQuery(ForwardOnly);
					record = FirstRecord();
					if(record)
					{
						Outputs.SetProperty(&quot;Flag&quot;, &quot;Y&quot;);
					}
				}
			}
		}
	}
	catch(e)
	{
		Outputs.SetProperty(&quot;Custom Error&quot;,e.errText);
		//throw(e);
	}
	finally
	{
		LineItemBC = null;
		OrdBO = null;
		OrderBC = null;
		OrderBO = null;
	}
}"
			   SEQUENCE="51"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="07/25/2013 09:53:54"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="FindPropSet"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="/**************************************************
	NAME:              	FindPropSet		
	DESCRIPTION: 		Search a PropertySet in a SiebelMessage and return a flag with the search result.
	INPUT PARAMETERS:	&quot;PropName&quot; to search and &quot;SiebelMessage&quot; in which to try
	OUTPUT PARAMETERS:	&quot;FlagFound&quot; = &quot;Y&quot; if found the PropertySet, &quot;FlagFound&quot; = &quot;N&quot; if NOT found it. 
	AUTHOR:				Pasqualina Coronato
	DATE CREATED:		06-12-2011 by ACN_CORONATOP
*************************************************/ 
function FindPropSet(Inputs,Outputs)
{
	try{		
		Outputs.SetProperty(&quot;FlagFound&quot;,&quot;N&quot;);	
		if(Inputs.PropertyExists(&quot;PropName&quot;)){
			propName = Inputs.GetProperty(&quot;PropName&quot;);
		}
		
		if(Inputs.PropertyExists(propName)){		
			Outputs.SetProperty(&quot;FlagFound&quot;,&quot;Y&quot;);				
			return(CancelOperation);
		}
		for(var x=0; x&lt;Inputs.GetChildCount();x++){
			FindPropSet(Inputs.GetChild(x),Outputs);
		}
	}
	catch(e){
		throw(e);
	}
	finally{ 
	}
}"
			   SEQUENCE="52"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="12/06/2011 16:47:49"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="FindResultCreateDisputeResponse"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function FindResultCreateDisputeResponse(Inputs,Outputs)
{
	try
	{
		var SiebelMessage = TheApplication().NewPropertySet();
		var oOut= TheApplication().NewPropertySet();
	
		FindTypeInXML(Inputs,oOut,&quot;StatusCode_0&quot;);//VF Jinesh updated to StatusCode for defect35028
		if(oOut.GetChildCount() &gt; 0)
		{
			var OutputValue = oOut.GetChild(0).GetProperty(&quot;StatusCode_0_Value&quot;);//VF Jinesh updated to StatusCode for defect35028
			Outputs.SetProperty(&quot;OutputValue&quot;, OutputValue); 
		}
		else 
			Outputs.SetProperty(&quot;OutputValue&quot;, &quot;&quot;);
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		SiebelMessage = null;
		oOut = null;
	}
}"
			   SEQUENCE="53"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="10/24/2013 10:30:51"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="FindResultOfSiebelMessageOutput"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function FindResultOfSiebelMessageOutput(Inputs,Outputs)
{
	try
	{
		var SiebelMessage = TheApplication().NewPropertySet();
		var oOut= TheApplication().NewPropertySet();
		var sField = Inputs.GetProperty(&quot;Field&quot;);
		var sValue = Inputs.GetProperty(&quot;Value&quot;);
	
		FindTypeInXML(Inputs,oOut,sField);
		if(oOut.GetChildCount() &gt; 0)
		{
			var OutputValue = oOut.GetChild(0).GetProperty(sValue);
			Outputs.SetProperty(&quot;OutputValue&quot;, OutputValue); 
		}
		else 
			Outputs.SetProperty(&quot;OutputValue&quot;, &quot;&quot;);
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		SiebelMessage = null;
		oOut = null;
	}
}"
			   SEQUENCE="54"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="11/05/2013 16:05:30"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="FindTypeAdd"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function FindTypeAdd(propIn,propToAdd,findType)
{
	try{
		var type = propIn.GetType();
		
		if(type == findType){
			for(var i=0;i&lt;propToAdd.GetChildCount();i++){
				propIn.AddChild(propToAdd.GetChild(i)); 
			}						
			return(CancelOperation);
		}
		for(var x=0; x&lt;propIn.GetChildCount();x++){
			FindTypeAdd(propIn.GetChild(x),propToAdd,findType);
		}
	}
	catch(e){
		throw(e);
	}
	finally{
		type = null;
	}
}"
			   SEQUENCE="55"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="10/03/2011 05:38:56"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="FindTypeInSiebelMessage"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function FindTypeInSiebelMessage(propIn,&amp;propOut,findType)
{
	try{
		var type = propIn.GetType();
		
		if(type == findType){
			propOut = propIn.Copy();					
			return(CancelOperation);
		}
		for(var x=0; x&lt;propIn.GetChildCount();x++){
			FindTypeInSiebelMessage(propIn.GetChild(x),propOut,findType);
		}
	}
	catch(e){
		throw(e);
	}
	finally{
		type = null;
	}
}"
			   SEQUENCE="56"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="12/10/2011 10:43:14"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="FindTypeInXML"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="//search XML tag with type = sType
function FindTypeInXML(Inputs,Outputs,sType)
{
	try
	{
		//Outputs.SetProperty(&quot;found&quot;, false);
		var type = Inputs.GetType();
		if(type == sType)
		{
		//	Outputs.SetProperty(&quot;found&quot;,true);
			//Statement for adding Values
			Outputs.AddChild(Inputs.Copy());
			return(CancelOperation);
		}
		for(var x=0; x&lt;Inputs.GetChildCount();x++)
		{
			FindTypeInXML(Inputs.GetChild(x),Outputs,sType);			
		}
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		type = null;
	}
}"
			   SEQUENCE="57"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="10/04/2012 18:19:35"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="FindTypeRemove"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function FindTypeRemove(propIn,findType)
{
	try{
		var type = propIn.GetType();
		
		if(type == findType){
			for(var i=0;i&lt;propIn.GetChildCount();i&lt;0){
				propIn.RemoveChild(i);
			}						
			return(CancelOperation);
		}
		for(var x=0; x&lt;propIn.GetChildCount();x++){
			FindTypeRemove(propIn.GetChild(x),findType);  
		}
	}
	catch(e){
		throw(e);
	}
	finally{
		type = null;
	}
}"
			   SEQUENCE="58"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="10/03/2011 05:39:31"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="FormAgreementSearchSpec"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function FormAgreementSearchSpec(Inputs,Outputs)
{
/*----------------------------------------------------------------------------------------------------------
Purpose: This function is created to form the search spec based on Account Number, Agreement Id etc fields. GAL.
Called From: WF: VF Agreement SAI WF
[PKHOT][CR:68455][23-1-2015]
------------------------------------------------------------------------------------------------------------*/
	try
	{
		var AccNumber = Inputs.GetProperty(&quot;AccountNumber&quot;);
		var AgreeId = Inputs.GetProperty(&quot;AgreementId&quot;);
		var AgreeStatus = Inputs.GetProperty(&quot;AgreementStatus&quot;);
		var AgreeEndDate = Inputs.GetProperty(&quot;AgreementEndDate&quot;);
		var Operand = Inputs.GetProperty(&quot;Operand&quot;);
		
		var searchSpec = &quot;&quot;;
		var AccId = &quot;&quot;;
		var StatusSpec = &quot;&quot;;
		var pat = /,/g;
		var AccSearchSpec = &quot;&quot;;
		var AccSearchSpec1 = &quot;&quot;;
		var AgreeSearchSpec = &quot;&quot;;
		
		var sBO = TheApplication().GetBusObject(&quot;VF Asset Management - Query&quot;);
		var sBC = sBO.GetBusComp(&quot;VF Account Thin BC&quot;);
		
		if(AccNumber != &quot;&quot; &amp;&amp; AccNumber != null)
		{
			AccSearchSpec1 = AccNumber.replace(pat,&quot;&apos; OR [VF Customer Code] = &apos;&quot;);
			AccSearchSpec1 = &quot;[VF Customer Code] = &apos;&quot; + AccSearchSpec1 + &quot;&apos;&quot;;
			with(sBC)
			{
				ActivateField(&quot;VF Customer Code&quot;);
				ClearToQuery();
				SetViewMode(AllView);
				SetSearchExpr(AccSearchSpec1);
				ExecuteQuery(ForwardOnly);
				var record = FirstRecord();
				while(record)
				{
					AccId = GetFieldValue(&quot;Id&quot;);
					if(AccSearchSpec != &quot;&quot;)
						AccSearchSpec = AccSearchSpec + &quot; OR [Service Agreement.Account Id] = &apos;&quot; + AccId + &quot;&apos;&quot;;
					else
						AccSearchSpec = &quot;([Service Agreement.Account Id] = &apos;&quot; + AccId + &quot;&apos;&quot;;	
								
					record = NextRecord();
				}
			}
			if(AccSearchSpec != &quot;&quot;)
			AccSearchSpec = AccSearchSpec + &quot;)&quot;;
		}
		
		if(AgreeId != &quot;&quot; &amp;&amp; AgreeId != null)
		{
			AgreeSearchSpec = AgreeId.replace(pat,&quot;&apos; OR [Service Agreement.Agreement Number] = &apos;&quot;);
			AgreeSearchSpec = &quot;([Service Agreement.Agreement Number] = &apos;&quot;	+ AgreeSearchSpec + &quot;&apos;)&quot;;
		}
		
		if(AgreeStatus != &quot;&quot; &amp;&amp; AgreeStatus != null)
		{
			StatusSpec = AgreeStatus.replace(pat,&quot;&apos; OR [Service Agreement.Agreement Status] = &apos;&quot;);
			StatusSpec = &quot;([Service Agreement.Agreement Status] = &apos;&quot; + StatusSpec + &quot;&apos;)&quot;;
		}
		if(AgreeStatus == &quot;&quot;)
		{
			StatusSpec = &quot;([Service Agreement.Agreement Status] = &apos;Active&apos;)&quot;;
		}	

		if(AccSearchSpec != &quot;&quot;)
			searchSpec = AccSearchSpec;
		if(AgreeSearchSpec != &quot;&quot;)
		{
			if(searchSpec != &quot;&quot;)
				searchSpec = searchSpec + &quot; &quot; + Operand + &quot; &quot; + AgreeSearchSpec;
			else
				searchSpec = AgreeSearchSpec;
		}
		if(searchSpec != &quot;&quot;)
		{
			if(StatusSpec != &quot;&quot;)
				searchSpec = &quot;(&quot; + searchSpec + &quot;) AND &quot; + StatusSpec;
		}
		
		Outputs.SetProperty(&quot;SearchSpec&quot;,searchSpec);
		
		return(CancelOperation);
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		sBC = null;
		sBO = null;
	}
}"
			   SEQUENCE="59"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="02/23/2015 05:55:39"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="FormSearchSpec"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function FormSearchSpec(Inputs,Outputs)
{
/*----------------------------------------------------------------------------------------------------------
Purpose: This function is created to form the search spec based on Account Number, Billing Account Number and 
         Service Account Number.
Called From: WF: VF GIPL SAI WF
CR:71468
Author: PKHOT
Release: R2.4.2
------------------------------------------------------------------------------------------------------------*/
	try
	{
		var AccNumber = Inputs.GetProperty(&quot;AccountNumber&quot;);
		var BillAccNumber = Inputs.GetProperty(&quot;BillingAccount&quot;);
		var ServiceAccNumber = Inputs.GetProperty(&quot;ServiceAccount&quot;);
		var IMEI = Inputs.GetProperty(&quot;IMEI&quot;);
		var IntegrationId = Inputs.GetProperty(&quot;IntegrationId&quot;);
		var MSISDN = Inputs.GetProperty(&quot;MSISDN&quot;);
		var Operand = Inputs.GetProperty(&quot;Operand&quot;);
		var PartNumber = Inputs.GetProperty(&quot;PartNumber&quot;);
		var Status = Inputs.GetProperty(&quot;Status&quot;);
		
		var searchSpec = &quot;&quot;;
		var AccQuery = &quot;&quot;;
		var CustAccQuery = &quot;&quot;;
		var BillAccQuery = &quot;&quot;;
		var SerAccQuery = &quot;&quot;;
		var IntIdQuery = &quot;&quot;;
		var IMEIQuery = &quot;&quot;;
		var MSISDNQuery = &quot;&quot;;
		var PartNumQuery = &quot;&quot;;
		var StatusQuery = &quot;&quot;;
		var CombSerialNumQuery = &quot;&quot;;
		var pat = /,/g;
		var pat1 = /,,/g;
		var pat2 = /Header/g;
		
		if(IMEI != &quot;&quot; &amp;&amp; IMEI != null)
		{
			IMEIQuery = IMEI.replace(pat,&quot;&apos; OR [Header.Serial Number] = &apos;&quot;);
			IMEIQuery = &quot;([Header.Serial Number] = &apos;&quot; + IMEIQuery + &quot;&apos;)&quot;;
		}
		if(IntegrationId != &quot;&quot; &amp;&amp; IntegrationId != null)
		{
			IntIdQuery = IntegrationId.replace(pat,&quot;&apos; OR [Header.Integration Id] = &apos;&quot;);
			IntIdQuery = &quot;([Header.Integration Id] = &apos;&quot; + IntIdQuery + &quot;&apos;)&quot;;
		}
		if(MSISDN != &quot;&quot; &amp;&amp; MSISDN != null)
		{
			MSISDNQuery = MSISDN.replace(pat,&quot;&apos; OR [Header.Serial Number] = &apos;&quot;);
			MSISDNQuery = &quot;([Header.Serial Number] = &apos;&quot; + MSISDNQuery + &quot;&apos;)&quot;;
		}
		if(PartNumber != &quot;&quot; &amp;&amp; PartNumber != null)
		{
			PartNumQuery = PartNumber.replace(pat,&quot;&apos; OR [Header.Product Part Number] = &apos;&quot;);
			PartNumQuery = &quot;([Header.Product Part Number] = &apos;&quot; + PartNumQuery + &quot;&apos;)&quot;;
		}
		if(Status != &quot;&quot; &amp;&amp; Status != null &amp;&amp; Status != &quot;All&quot;)
		{
			StatusQuery = Status.replace(pat,&quot;&apos; OR [Header.Status] = &apos;&quot;);
			StatusQuery = &quot;([Header.Status] = &apos;&quot; + StatusQuery + &quot;&apos;)&quot;;
			
			//[PKHOT]:27-Mar-2015:QC-56227-Porting:R15.2:Added filter for specific status value on Line Item level too:START
			var StatusQuery1 = StatusQuery.replace(pat2,&quot;Line Item&quot;);
			StatusQuery = &quot;(&quot; + StatusQuery + &quot; AND &quot; + StatusQuery1 + &quot;)&quot;;
			//[PKHOT]:27-Mar-2015:QC-56227-Porting:R15.2:END
		}
		if(Status == &quot;&quot; || Status == null)
		{
			//[PKHOT]:27-Mar-2015:QC-56227-Porting:R15.2:Added filter for Default status on Line Item level too:START
			//StatusQuery = &quot;([Header.Status] = &apos;Active&apos; OR [Header.Status] = &apos;Suspended&apos;)&quot;;
			StatusQuery = &quot;(([Header.Status] = &apos;Active&apos; OR [Header.Status] = &apos;Suspended&apos;) AND ([Line Item.Status] = &apos;Suspended&apos; OR [Line Item.Status] = &apos;Active&apos;))&quot;;
			//[PKHOT]:27-Mar-2015:QC-56227-Porting:R15.2:END
		}
		if(Operand == &quot;&quot; || Operand == null)
			Operand = &quot;AND&quot;;
			
		//Account search spec formation	starts here
		if(AccNumber != &quot;&quot; &amp;&amp; AccNumber != null)
			AccQuery = AccNumber;
		if(BillAccNumber != &quot;&quot; &amp;&amp; BillAccNumber != null)
		{
			if(AccQuery != &quot;&quot;)
				AccQuery = AccQuery + &quot;,&quot; + BillAccNumber;
			else
				AccQuery = BillAccNumber;
		}
		if(ServiceAccNumber != &quot;&quot; &amp;&amp; ServiceAccNumber != null)
		{
			if(AccQuery != &quot;&quot;)
				AccQuery = AccQuery + &quot;,&quot; + ServiceAccNumber;
			else
				AccQuery = ServiceAccNumber;
		}		
		if(AccQuery != &quot;&quot;)
		{
			AccQuery = AccQuery.replace(pat1,&quot;,&quot;);
			AccQuery = AccQuery.replace(pat,&quot;&apos; OR [VF Customer Code] = &apos;&quot;);
			AccQuery = &quot;[VF Customer Code] = &apos;&quot;+AccQuery+&quot;&apos;&quot;;
					
			var sBO = TheApplication().GetBusObject(&quot;VF Asset Management - Query&quot;);
			var sBC = sBO.GetBusComp(&quot;VF Account Thin BC&quot;);
			with(sBC)
			{
				ActivateField(&quot;VF Customer Code&quot;);
				ClearToQuery();
				SetViewMode(AllView);
				SetSearchExpr(AccQuery);
				ExecuteQuery(ForwardOnly);
				var record = FirstRecord();
				while(record)
				{
					var accNo = GetFieldValue(&quot;VF Customer Code&quot;);
					var AccId = GetFieldValue(&quot;Id&quot;);
					if(AccNumber.indexOf(accNo)&gt;-1)
					{
						if(CustAccQuery != &quot;&quot;)
						CustAccQuery = CustAccQuery+&quot; OR [Header.Owner Account Id] = &apos;&quot;+AccId+&quot;&apos;&quot;;
						else
						CustAccQuery = &quot;([Header.Owner Account Id] = &apos;&quot;+AccId+&quot;&apos;&quot;;	
					}
					if(BillAccNumber.indexOf(accNo)&gt;-1)
					{
						if(BillAccQuery != &quot;&quot;)
						BillAccQuery = BillAccQuery+&quot; OR [Header.Billing Account Id] = &apos;&quot;+AccId+&quot;&apos;&quot;;
						else
						BillAccQuery = &quot;([Header.Billing Account Id] = &apos;&quot;+AccId+&quot;&apos;&quot;;
					}
					if(ServiceAccNumber.indexOf(accNo)&gt;-1)
					{
						if(SerAccQuery != &quot;&quot;)
						SerAccQuery = SerAccQuery+&quot; OR [Header.Service Account Id] = &apos;&quot;+AccId+&quot;&apos;&quot;;
						else
						SerAccQuery = &quot;([Header.Service Account Id] = &apos;&quot;+AccId+&quot;&apos;&quot;;
					}
					record = NextRecord();
				}
				if(CustAccQuery != &quot;&quot;)
				CustAccQuery = CustAccQuery + &quot;)&quot;;
				if(BillAccQuery != &quot;&quot;)
				BillAccQuery = BillAccQuery + &quot;)&quot;;
				if(SerAccQuery != &quot;&quot;)
				SerAccQuery = SerAccQuery + &quot;)&quot;;
			}
		}
		//Combine all individual queries to form one final query
		if(IMEIQuery != &quot;&quot;)
		CombSerialNumQuery = IMEIQuery;
		if(MSISDNQuery != &quot;&quot;)
		{
			if(CombSerialNumQuery != &quot;&quot;)
				CombSerialNumQuery = &quot;(&quot; + CombSerialNumQuery + &quot; OR &quot; + MSISDNQuery + &quot;)&quot;;
			else
				CombSerialNumQuery = MSISDNQuery;
		}
		
		if(CombSerialNumQuery != &quot;&quot;)
		searchSpec = &quot;(&quot; + CombSerialNumQuery;
		
		if(IntIdQuery != &quot;&quot;)
		{
			if(searchSpec != &quot;&quot;)
			searchSpec = searchSpec + &quot; &quot; + Operand + &quot; &quot; + IntIdQuery;
			else
			searchSpec = &quot;(&quot; + IntIdQuery;
		}
		if(PartNumQuery != &quot;&quot;)
		{
			if(searchSpec != &quot;&quot;)
			searchSpec = searchSpec + &quot; &quot; + Operand + &quot; &quot; + PartNumQuery;
			else
			searchSpec = &quot;(&quot; + PartNumQuery;
		}
		if(CustAccQuery != &quot;&quot;)
		{
			if(searchSpec != &quot;&quot;)
			searchSpec = searchSpec + &quot; &quot; + Operand + &quot; &quot; + CustAccQuery;
			else
			searchSpec = &quot;(&quot; + CustAccQuery;
		}
		if(BillAccQuery != &quot;&quot;)
		{
			if(searchSpec != &quot;&quot;)
			searchSpec = searchSpec + &quot; &quot; + Operand + &quot; &quot; + BillAccQuery;
			else
			searchSpec = &quot;(&quot; + BillAccQuery;
		}
		if(SerAccQuery != &quot;&quot;)
		{
			if(searchSpec != &quot;&quot;)
			searchSpec = searchSpec + &quot; &quot; + Operand + &quot; &quot; + SerAccQuery;
			else
			searchSpec = &quot;(&quot; + SerAccQuery;
		}
		if(searchSpec != &quot;&quot;)
		{
			searchSpec = searchSpec + &quot;)&quot;;
			//[PKHOT]:10-Mar-2015:QC-55785,55982:R2.4.2:Added Additonal serach spec on parent asset id only if we get any of the account as input:START
			if(CustAccQuery != &quot;&quot; || BillAccQuery != &quot;&quot; || SerAccQuery != &quot;&quot;)
			searchSpec = searchSpec + &quot; AND ([Header.Parent Asset Id] IS NULL)&quot;;
			//[PKHOT]:10-Mar-2015:QC-55785,55982:R2.4.2:END
		
			if(StatusQuery != &quot;&quot;)
				searchSpec = searchSpec + &quot; AND &quot; + StatusQuery;
		}	
		
		Outputs.SetProperty(&quot;SearchSpec&quot;,searchSpec);
		return(CancelOperation);
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		sBC = null;
		sBO = null;
	}
}"
			   SEQUENCE="61"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="02/23/2015 05:55:39"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GeneratePINCode"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GeneratePINCode(Inputs, Outputs)
{
  try
  {
  	//variable declaration
 	var i;
 	var pinCode =&quot;&quot;;
 	var nDigit = Inputs.GetProperty(&quot;numberOfDigit&quot;);
 	var randomvalue =&quot;&quot;; 
 	//set alphanumeric dictionary
 	var dictionary = new Array(0,1,2,3,4,5,6,7,8,9,&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;,&quot;f&quot;,&quot;g&quot;,&quot;h&quot;,&quot;i&quot;,&quot;l&quot;,&quot;m&quot;,&quot;n&quot;,&quot;o&quot;,&quot;p&quot;,&quot;q&quot;,&quot;r&quot;,&quot;s&quot;,&quot;t&quot;,&quot;u&quot;,&quot;v&quot;,&quot;z&quot;,&quot;y&quot;,&quot;j&quot;,&quot;w&quot;,&quot;k&quot;,&quot;x&quot;);
 	var dictionaryLength = dictionary.length;
    if (nDigit&gt;0)
    {	
    	i = 0;
	    while(i&lt;nDigit)
	    {	
	    	randomvalue = Clib.rand()%dictionaryLength;
	    	pinCode = pinCode + dictionary[randomvalue];
	    	randomvalue = &quot;&quot;;
	    	i++; 
	    }
	    
	   
  	}
  	Outputs.SetProperty(&quot;PinCode&quot;,pinCode);
  }
  catch(e)
  {
  		Outputs.SetProperty(&quot;Error Code&quot;,&quot;99&quot;);
		Outputs.SetProperty(&quot;Error Message&quot;,e.toString()); 
		dictionary=null;
		throw(e);
  }
  finally
  {
  	dictionary=null;
  }
}"
			   SEQUENCE="62"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="12/21/2012 09:28:32"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GenericCreateSR"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GenericCreateSR(Inputs,Outputs)
{
	try
	{
		var boServiceReq = TheApplication().GetBusObject(&quot;Service Request&quot;);
		var bcServiceReq = boServiceReq.GetBusComp(&quot;Service Request&quot;);
		//var srId = &quot;&quot;;
		
		with(bcServiceReq)
		{
			//Fetch the passed parameters
			var strInstalledId = Inputs.GetProperty(&quot;InstalledId&quot;);
			var strAccountId = Inputs.GetProperty(&quot;AccountId&quot;);
			var strContactId = Inputs.GetProperty(&quot;ContactId&quot;);
			var strAssetId = Inputs.GetProperty(&quot;AssetId&quot;);
			var strOrderId = Inputs.GetProperty(&quot;OrderId&quot;);
			//var strCustCommId = Inputs.GetProperty(&quot;CustCommId&quot;);
			var strParSRId = Inputs.GetProperty(&quot;ParSRId&quot;);			
			var strType = Inputs.GetProperty(&quot;Type&quot;);
			var strArea = Inputs.GetProperty(&quot;Area&quot;);
			var strSubArea = Inputs.GetProperty(&quot;SubArea&quot;);
			var strRequest = Inputs.GetProperty(&quot;Request&quot;);
			//var strDescription = Inputs.GetProperty(&quot;Notes&quot;);
			var strPriority = Inputs.GetProperty(&quot;Priority&quot;);
			var strSLADate = Inputs.GetProperty(&quot;SLADate&quot;);
			var strComments = Inputs.GetProperty(&quot;Notes&quot;);
			var strCustCommId = Inputs.GetProperty(&quot;CustCommId&quot;);
			
			//Activate Fields on SR BC
			ActivateField(&quot;Serial Number&quot;);	//Installed Id
			ActivateField(&quot;Account Id&quot;);	// Account Id
			ActivateField(&quot;Contact Id&quot;);	//Contact Id
			ActivateField(&quot;Asset Id&quot;);		//Asset Id
			ActivateField(&quot;Order Number&quot;);	//Order Id
			//ActivateField(&quot;Primary Interaction Id&quot;); //Customer Comm Id
			ActivateField(&quot;INS Parent SR Id&quot;);	//Parent SR Id
			ActivateField(&quot;INS Product&quot;);   // Type of the Service Request
			ActivateField(&quot;INS Area&quot;); 	    // Area of the Service Request
			ActivateField(&quot;INS Sub-Area&quot;);  // Sub-Area of the Service Request
			ActivateField(&quot;VF Abstract&quot;);	//Request
			//ActivateField(&quot;Description&quot;);	//Notes
			ActivateField(&quot;Priority&quot;); //Priority
			ActivateField(&quot;Commit Time&quot;);  //SLA Date
			ActivateField(&quot;Description&quot;); //Notes
			ActivateField(&quot;Primary Interaction Id&quot;); //Customer Comm Id
			
			bcServiceReq.SetViewMode(AllView);
			bcServiceReq.NewRecord(NewAfter);
			
			bcServiceReq.SetFieldValue(&quot;INS Product&quot;, strType);
			bcServiceReq.SetFieldValue(&quot;INS Area&quot;, strArea);
			bcServiceReq.SetFieldValue(&quot;INS Sub-Area&quot;, strSubArea);
			//bcServiceReq.SetFieldValue(&quot;Description&quot;, strDescription);
			bcServiceReq.SetFieldValue(&quot;VF Abstract&quot;, strRequest);
			bcServiceReq.SetFieldValue(&quot;Priority&quot;, strPriority);
			bcServiceReq.SetFieldValue(&quot;Commit Time&quot;, strSLADate);
			
			if (strComments != null &amp;&amp; strComments != &quot;&quot;)
			{
				bcServiceReq.SetFieldValue(&quot;Description&quot;, strComments);
			}
			
			if (strCustCommId != null &amp;&amp; strCustCommId != &quot;&quot;)
			{
				bcServiceReq.SetFieldValue(&quot;Primary Interaction Id&quot;, strCustCommId);
			}
			
			if (strAccountId != null &amp;&amp; strAccountId != &quot;&quot;)
			{
				bcServiceReq.SetFieldValue(&quot;Account Id&quot;, strAccountId);
			}
			
			if (strContactId != null &amp;&amp; strContactId != &quot;&quot;)
			{
				bcServiceReq.SetFieldValue(&quot;Contact Id&quot;, strContactId);
			}
			
			if (strInstalledId != null &amp;&amp; strInstalledId != &quot;&quot;)
			{
				bcServiceReq.SetFieldValue(&quot;Serial Number&quot;, strInstalledId);
			}
			
			if (strAssetId != null &amp;&amp; strAssetId != &quot;&quot;)
			{
				bcServiceReq.SetFieldValue(&quot;Asset Id&quot;, strAssetId);
			}
			
			if (strOrderId != null &amp;&amp; strOrderId != &quot;&quot;)
			{
				bcServiceReq.SetFieldValue(&quot;Order Number&quot;, strOrderId);
			}
			
			/*if(strCustCommId != null &amp;&amp; strCustCommId != &quot;&quot;)
			{
				bcServiceReq.SetFieldValue(&quot;Primary Interaction Id&quot;, strCustCommId);
			}*/
			
			if(strParSRId != null &amp;&amp; strParSRId != &quot;&quot;)
			{
				bcServiceReq.SetFieldValue(&quot;INS Parent SR Id&quot;, strParSRId);
			}
			bcServiceReq.WriteRecord();
			var srId = bcServiceReq.GetFieldValue(&quot;Id&quot;);
			
			Outputs.SetProperty(&quot;SR Id&quot;, srId)
		}	
	}
	
	catch(e)
	{
		throw(e);
		
	}
	
	finally
	{
		bcServiceReq = null;
		boServiceReq = null;
	}
}"
			   SEQUENCE="63"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="10/03/2016 08:36:56"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GenericQueryOnBC"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GenericQueryOnBC(Inputs,Outputs)
{
	try
	{
		Outputs.SetProperty(&quot;ErrorMsg&quot;,&quot;&quot;);
		Outputs.SetProperty(&quot;ErrorCode&quot;,&quot;&quot;);
		var BO = TheApplication().GetBusObject(Inputs.GetProperty(&quot;BusinessObject&quot;));
		var BC = BO.GetBusComp(Inputs.GetProperty(&quot;BusinessComponent&quot;));
		var ListaField = Inputs.GetProperty(&quot;ListaField&quot;).split(&quot;,&quot;);
		var SortField = Inputs.GetProperty(&quot;SortField&quot;);
		var SortDirection = Inputs.GetProperty(&quot;SortDirection&quot;);
		var field;
		BC.SetViewMode(AllView);
		BC.ClearToQuery();
		for (field in ListaField)
		{
			BC.ActivateField(ListaField[field]);	
		}
		if (Inputs.GetProperty(&quot;Id&quot;)!=&quot;&quot;)
		{
			BC.SetSearchExpr(&quot;[Id]=&apos;&quot; + Inputs.GetProperty(&quot;Id&quot;) + &quot;&apos;&quot;);
		}
		else
		{
			BC.SetSearchExpr(Inputs.GetProperty(&quot;SearchExpr&quot;));
		}
		if (SortField!=&quot;&quot;)
		{
			if (SortDirection==&quot;ASCENDING&quot; || SortDirection==&quot;DESCENDING&quot;)
			{
				BC.SetSortSpec(SortField + &quot;(&quot; + SortDirection + &quot;)&quot;);
			}
			else
			{
				BC.SetSortSpec(SortField + &quot;(ASCENDING)&quot;);
			}
		}
		BC.ExecuteQuery(ForwardOnly);
		if ( BC.FirstRecord() )
		{
			for (field in ListaField)
			{
				Outputs.SetProperty(ListaField[field],BC.GetFieldValue(ListaField[field]));
			}
		}
	}
	catch (e)
	{
		Outputs.SetProperty(&quot;Custom Error&quot;,e.errText);
		throw(e);
	}
	finally
	{
		BC = null;
		BO = null;
		ListaField = null;
	}
}"
			   SEQUENCE="64"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="04/29/2011 12:52:33"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GenericQueryOnBC_Edit"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GenericQueryOnBC_Edit(Inputs,Outputs)
{
	try{
		Outputs.SetProperty(&quot;ErrorMsg&quot;,&quot;&quot;);
		Outputs.SetProperty(&quot;ErrorCode&quot;,&quot;&quot;);
		var BO = TheApplication().GetBusObject(Inputs.GetProperty(&quot;BusinessObject&quot;));
		var BC = BO.GetBusComp(Inputs.GetProperty(&quot;BusinessComponent&quot;));
		var ListaField = Inputs.GetProperty(&quot;ListaField&quot;).split(&quot;,&quot;);
		var field;
		BC.SetViewMode(AllView);
		BC.ClearToQuery();
		for (field in ListaField) 
			BC.ActivateField(ListaField[field]);	
		if (Inputs.GetProperty(&quot;Id&quot;)!=&quot;&quot;){
			BC.SetSearchExpr(&quot;[Id]=&apos;&quot; + Inputs.GetProperty(&quot;Id&quot;) + &quot;&apos;&quot;);
		}else{
			BC.SetSearchExpr(Inputs.GetProperty(&quot;SearchExpr&quot;));
		}
		BC.ExecuteQuery(ForwardOnly);
		if ( BC.FirstRecord() ){
			for (field in ListaField) {
				Outputs.SetProperty(&quot;OutputValue&quot;, BC.GetFieldValue(ListaField[field]));
			}							
		}
	}
	catch (e){
		Outputs.SetProperty(&quot;Custom Error&quot;,e.errText);
		throw ( e )
	}
	finally{
		BC = null;
		BO = null;
		ListaField = null;
	}

}"
			   SEQUENCE="65"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="01/31/2012 19:43:35"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetAllPortNew"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetAllPortNew(PSIn, PSout)
{
	try
	{
		var Parent_Product_Id = PSIn.GetProperty(&quot;ParentProductId&quot;);
		var Product_Id = PSIn.GetProperty(&quot;ProductId&quot;);
		var BO = TheApplication().GetBusObject(&quot;VF_UK_BO_NoLink&quot;);
		var BC = BO.GetBusComp(&quot;VF GetAllPortId BC&quot;);
		var portId = &quot;&quot;;
		var parentPortId = &quot;&quot;;

		PSout.SetProperty(&quot;ErrorMessage&quot;,&quot;&quot;);		
		PSout.SetProperty(&quot;ResultCode&quot;,&quot;0&quot;);

		with(BC)
		{
			ActivateField(&quot;Port Id&quot;);
			ActivateField(&quot;Parent Port Id&quot;);
			ClearToQuery();
			SetViewMode(AllView);
			SetSearchSpec(&quot;Product Id&quot;, &quot;&apos;&quot; + Product_Id + &quot;&apos;&quot;);
			SetSearchSpec(&quot;Parent Product Id&quot;, &quot;&apos;&quot; + Parent_Product_Id + &quot;&apos;&quot;);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				portId = GetFieldValue(&quot;Port Id&quot;);
				parentPortId = GetFieldValue(&quot;Parent Port Id&quot;);

			}
			else
			{
				PSout.SetProperty(&quot;ErrorMessage&quot;,&quot;GeneralError&quot;);		
				PSout.SetProperty(&quot;ResultCode&quot;,&quot;1&quot;);
			}
		}
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		BC = null;
		BO = null;
		PSout.SetProperty(&quot;PortId&quot;,portId);
		PSout.SetProperty(&quot;ParentPortId&quot;,parentPortId);
	}
}"
			   SEQUENCE="66"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="07/07/2011 10:52:47"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetAttributeValue"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetAttributeValue(Inputs, Outputs)
{
	/*---------------------	----------------------------------------------
	Author:Aditi Agrawal
	Method created for retrieving attribute value from a Siebel message
	[AA]:[27/01/2016][R15.3:86712][Create Receive Payment]
	-------------------------------------------------------------------*/
	try{
	  
		var sFaultCode =&quot;&quot;;
		var sFaultString =&quot;&quot;;
	
		
		sFaultString = Inputs.GetChild(0).GetChild(0).GetProperty(&quot;Fault Summary&quot;);
		sFaultCode = Inputs.GetChild(0).GetChild(0).GetProperty(&quot;Fault Code&quot;);
		Outputs.SetProperty(&quot;src_FaultSummary&quot; ,sFaultString);
		Outputs.SetProperty(&quot;src_FaultCode&quot; ,sFaultCode);
		}
	catch(e)
	{
		throw(e);
	}
	finally
	{
	
	}
}"
			   SEQUENCE="67"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="03/16/2016 16:55:27"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetAvaibleResource"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetAvaibleResource(Inputs, Outputs)
{
	try
	{	
	
		var sItemId = Inputs.GetProperty(&quot;sItemId&quot;);	
	    var inWF  = TheApplication().NewPropertySet();
	    var outWF = TheApplication().NewPropertySet();
	    var oBS   = TheApplication().GetService(&quot;Workflow Process Manager&quot;);
    	var PData = TheApplication().NewPropertySet();
	    var status = &quot;0&quot;;
	    var sMSISDN = &quot;&quot;;

			with(inWF)
			{
			    SetProperty(&quot;ProcessName&quot;, &quot;VF Get Available Resources WF&quot;);
			    SetProperty(&quot;Object Id&quot;, sItemId);
				SetProperty(&quot;Type&quot;, &quot;TELEPHONE-NUMBER&quot;);
			}
			oBS.InvokeMethod(&quot;RunProcess&quot;, inWF, outWF);
			
		
			var resource = FindChild(outWF,&quot;ApplicationObjectKey_0&quot;);
			
			status = outWF.GetProperty(&quot;StatusCode&quot;);
			if (status == &quot;1&quot;)
			{
				Outputs.SetProperty(&quot;ErrorCode&quot;,outWF.GetProperty(&quot;ErrorCodeFMW&quot;));
				Outputs.SetProperty(&quot;ErrorFMW&quot;,outWF.GetProperty(&quot;ErrorTextFMW&quot;));
				Outputs.SetProperty(&quot;ErrorType&quot;,&quot;GetResource&quot;);
				
				TheApplication().RaiseErrorText(outWF.GetProperty(&quot;ErrorTextFMW&quot;) + outWF.GetProperty(&quot;ErrorCodeFMW&quot;));
			}

			else if (resource!=&quot;&quot;)
			{
				sMSISDN = resource.GetProperty(&quot;ID&quot;);
				
				// **************** Start Call ReserveResource ******************
				
				with(inWF)
				{
					Reset();
			    	SetProperty(&quot;ProcessName&quot;, &quot;VF Reserve Resource WF&quot;);
					SetProperty(&quot;ResourceId&quot;, sMSISDN);
					SetProperty(&quot;Type&quot;, &quot;TELEPHONE-NUMBER&quot;);
				}
				oBS.InvokeMethod(&quot;RunProcess&quot;, inWF, outWF);
				
				status = outWF.GetProperty(&quot;StatusCode&quot;);
				if (status == &quot;1&quot;)
				{
					Outputs.SetProperty(&quot;ErrorCode&quot;,outWF.GetProperty(&quot;ErrorCodeFMW&quot;));
					Outputs.SetProperty(&quot;ErrorFMW&quot;,outWF.GetProperty(&quot;ErrorTextFMW&quot;));
					Outputs.SetProperty(&quot;ErrorType&quot;,&quot;ReserveResource&quot;);
					
					TheApplication().RaiseErrorText(outWF.GetProperty(&quot;ErrorTextFMW&quot;) + outWF.GetProperty(&quot;ErrorCodeFMW&quot;));
				}
				else
				{	
					
					Outputs.SetProperty(&quot;sMSISDN&quot;, sMSISDN);
				}

				// **************** End Call ReserveResource ******************
				
			}
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		inWF = null;
		outWF = null;
		oBS = null;
		PData = null;
	}
}"
			   SEQUENCE="68"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="07/05/2012 10:37:57"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetBalanceGroup"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetBalanceGroup(Inputs, Outputs)//GPG [05/09/2013] Added for Balance Group EAI
{
	try
	{
		//declare variables 
		var listOfDataArea = TheApplication().NewPropertySet();	
		var listOfDataAreaSummary = TheApplication().NewPropertySet();
		var listOfDataAreaNotSummary = TheApplication().NewPropertySet();
		var ListOfBal = &quot;&quot;;
		//var test = &quot;&quot;;
		var i;// Oracle Review Variable Already Declared 01/08/2014
		var sBalGrpType;// Oracle Review Variable Already Declared 01/08/2014
		
				var Response = TheApplication().NewPropertySet();
	Response = Inputs.GetChild(0).Copy()
//		Outputs = Inputs.Copy();
		Outputs.AddChild(Response);

		FindTypeInSiebelMessage(Inputs,listOfDataArea,&quot;ListOfSWIBillingGroupDetailIORes&quot;);
		var nListOfDataArea = listOfDataArea.GetChildCount();
		listOfDataAreaSummary = listOfDataArea.Copy();
		listOfDataAreaNotSummary = listOfDataArea.Copy();
		
		
		//Summary
		for(i=0; i&lt;nListOfDataArea; i++) // Oracle Review Variable Already Declared 01/08/2014
		{
			ListOfBal = TheApplication().NewPropertySet();
			ListOfBal = listOfDataAreaSummary.GetChild(i);
			sBalGrpType = ListOfBal.GetType();// Oracle Review Variable Already Declared 01/08/2014
			var sBalId = ListOfBal.GetProperty(&quot;Account&quot;);
			if(sBalId != &quot;Summary&quot;)
			{
		
				listOfDataAreaSummary.RemoveChild(i);
				i=i-1;
				nListOfDataArea = listOfDataAreaSummary.GetChildCount();
			
			}
		}
	
		//Not Summary
		nListOfDataArea = listOfDataArea.GetChildCount();
		for(i=0; i&lt;nListOfDataArea; i++) // Oracle Review Variable Already Declared 01/08/2014
		{
			ListOfBal = TheApplication().NewPropertySet();
			ListOfBal = listOfDataAreaNotSummary.GetChild(i);
			sBalGrpType = ListOfBal.GetType();// Oracle Review Variable Already Declared 01/08/2014
			var sBalId = ListOfBal.GetProperty(&quot;Account&quot;);
			if(sBalId == &quot;Summary&quot;)
			{
		
				listOfDataAreaNotSummary.RemoveChild(i);
				i=i-1;
					nListOfDataArea = listOfDataAreaNotSummary.GetChildCount();
			}
		}
		
		var nListOfDataAreaSummary = listOfDataAreaSummary.GetChildCount();
		for(i=0; i&lt;nListOfDataAreaSummary; i++) // Oracle Review Variable Already Declared 01/08/2014
		{
			//Remove Balance Details
			var nListOfDataAreaBalDetails =listOfDataAreaSummary.GetChild(i).GetChild(0).GetChildCount();
			for(var j=0; j&lt;nListOfDataAreaBalDetails; j++) 
			{
					listOfDataAreaSummary.GetChild(i).GetChild(0).RemoveChild(j);
					j=j-1;
					nListOfDataAreaBalDetails =listOfDataAreaSummary.GetChild(i).GetChild(0).GetChildCount();

			}
		}
		
		//Check UOM &amp; Add non summary in Balanace Group
		var nListOfDataAreaNotSummary = listOfDataAreaNotSummary.GetChildCount();		
		for(i=0; i&lt;nListOfDataAreaSummary; i++) // Oracle Review Variable Already Declared 01/08/2014
		{
			var ListOfBalSumm = TheApplication().NewPropertySet();
			ListOfBalSumm = listOfDataAreaSummary.GetChild(i);
			sBalGrpType = ListOfBalSumm.GetType();// Oracle Review Variable Already Declared 01/08/2014
			var sUOMSummary = ListOfBalSumm.GetProperty(&quot;Unit of Measure&quot;);
			var sBalIdSummary =&quot;&quot;; 
			sBalIdSummary = ListOfBalSumm.GetProperty(&quot;Balance Id&quot;);
			if (sBalIdSummary ==&quot;&quot;)
				sBalIdSummary = &quot;blank&quot;;
						
			for(var j=0; j&lt;nListOfDataAreaNotSummary; j++) 
			{
				var ListOfBalNotSumm = TheApplication().NewPropertySet();
				ListOfBalNotSumm = listOfDataAreaNotSummary.GetChild(j);
				sBalGrpType = ListOfBalNotSumm.GetType();// Oracle Review Variable Already Declared 01/08/2014
				var sUOMNotSummary = ListOfBalNotSumm.GetProperty(&quot;Unit of Measure&quot;);
				var sBalIdNotSummary = &quot;&quot;;
				sBalIdNotSummary = ListOfBalNotSumm.GetProperty(&quot;Balance Id&quot;);
				if (sBalIdNotSummary ==&quot;&quot;)
					sBalIdNotSummary = &quot;blank&quot;;
				if(sUOMNotSummary == sUOMSummary &amp;&amp; (sBalIdNotSummary == sBalIdSummary))
				{
						//Add Balance Details
						var nListOfDataAreaNSBalDetails =listOfDataAreaNotSummary.GetChild(j).GetChild(0).GetChildCount();
						for(var k=0; k&lt;nListOfDataAreaNSBalDetails; k++) 
						{
					/*			listOfDataAreaSummary.GetChild(i).GetChild(0).RemoveChild(j);
								j=j-1;
								nListOfDataAreaBalDetails =listOfDataAreaSummary.GetChild(i).GetChild(0).GetChildCount();*/
								listOfDataAreaSummary.GetChild(i).GetChild(0).AddChild(listOfDataAreaNotSummary.GetChild(j).GetChild(0).GetChild(k));			
						}						
	
				}
			}//end of for j			
		}//end of for i
	
		Outputs.GetChild(0).RemoveChild(0);
		Outputs.GetChild(0).AddChild(listOfDataAreaSummary);
		//test = &quot;Success&quot;;
		//Outputs.AddChild(listOfDataAreaSummary);
		
	}

	catch(e)
	{
		Outputs.SetProperty(&quot;Error Code&quot;,&quot;99&quot;);
		Outputs.SetProperty(&quot;Error Message&quot;,e.toString()); 
		throw(e);		
	}
	finally
	{
		ListOfBal = null;
		listOfDataAreaSummary = null;
		//ListOfDataAreaNotSummary = null;
		listOfDataArea = null;
		listOfDataAreaNotSummary = null;
		ListOfBalSumm = null;
		ListOfBalNotSumm = null;
		Response = null;
	}
}"
			   SEQUENCE="69"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="09/16/2013 06:20:46"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetBankDetails"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetBankDetails(Inputs,Outputs)
{
	//[Priyanka]:[QC 69042]:24/05/2016 RCCS_Pilot Added to query Bank details
	try
	{	
		var AccountId = Inputs.GetProperty(&quot;AccountId&quot;);
		var AccountName = Inputs.GetProperty(&quot;AccountName&quot;);
		var AccountNumber = Inputs.GetProperty(&quot;AccountNumber&quot;);
		var AccountSortCode = Inputs.GetProperty(&quot;AccountSortCode&quot;);
		var BO = TheApplication().GetBusObject(&quot;VF Account BO&quot;);
		var BC = BO.GetBusComp(&quot;Com Invoice Profile&quot;);
		var sBankAccNo = &quot;&quot;;
		var sBankAccName = &quot;&quot;;
		var sBankSortCode = &quot;&quot;;
		var isFirstRe = &quot;&quot;;
		var sId = &quot;&quot;;
		
		with(BC)
		{
			ActivateField(&quot;Account Id&quot;); 
			ActivateField(&quot;Bank Account Name&quot;); 
			ActivateField(&quot;Bank Account Number&quot;); 
			ActivateField(&quot;VF Bank Sort Code&quot;); 
			ActivateField(&quot;Payment Method&quot;);  
			SetViewMode(AllView);
			ClearToQuery();
			SetSearchSpec(&quot;Account Id&quot;, AccountId);
			SetSearchSpec(&quot;Payment Method&quot;, &quot;Direct Debit&quot;);
			ExecuteQuery(ForwardOnly);
			isFirstRe = FirstRecord();
			while (isFirstRe)
			{
				sBankAccNo = GetFieldValue(&quot;Bank Account Number&quot;);
				sBankAccName = GetFieldValue(&quot;Bank Account Name&quot;);
				sBankSortCode = GetFieldValue(&quot;VF Bank Sort Code&quot;);
				sId = GetFieldValue(&quot;Id&quot;);
				if((sBankAccNo == AccountNumber) &amp;&amp; (sBankAccName == AccountName) &amp;&amp; (sBankSortCode == AccountSortCode))
				{
					Outputs.SetProperty(&quot;Result&quot;, &quot;TRUE&quot;);
					Outputs.SetProperty(&quot;ID&quot;, sId);
					break;
				}
				else
				{
					Outputs.SetProperty(&quot;Result&quot;, &quot;FALSE&quot;);
				}	
			isFirstRe = NextRecord();	
			}
			
		}//End for QC 69042
	}
	catch (e)
	{
		throw(e);
	}
	finally
	{
		BC = null;
		BO = null;
	}
}"
			   SEQUENCE="70"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="05/24/2016 14:46:25"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetChild"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetChild(Inputs, type, &amp;Outputs)
{
	try
	{
		var i=0;
		var bFound=false;
		var psAppoggio;
		var sType=type;
		var psInputs=TheApplication().NewPropertySet();
		var psOutputs=TheApplication().NewPropertySet();
		
		Outputs.SetProperty(&quot;Esito&quot;, &quot;KO&quot;);
		
		while(i&lt;Inputs.GetChildCount() &amp;&amp; bFound==false)
		{
			psAppoggio = Inputs.GetChild(i);			
			
			if(psAppoggio.GetType() == sType)
			{
				Outputs.AddChild(psAppoggio);
				bFound=true;
				Outputs.SetProperty(&quot;Esito&quot;, &quot;OK&quot;);
			}
			else
			{
				psInputs = psAppoggio;
				
				GetChild(psInputs, sType, psOutputs);
				
				if(psOutputs.GetProperty(&quot;Esito&quot;)==&quot;OK&quot;)
				{
					Outputs.AddChild(psOutputs.GetChild(0));
					bFound=true;
					Outputs.SetProperty(&quot;Esito&quot;, &quot;OK&quot;);
				}
			}
			i++;
	   }	
		return(true);
	}
	catch(e)
	{
		var errore = e.errText;
		throw(e);
		return(true);
	}
	finally
	{
		psAppoggio=null;
		psInputs=null;
		psOutputs=null;
	} 
}"
			   SEQUENCE="71"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="06/08/2015 15:35:59"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetContext"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetContext(Inputs, Outputs)
{
	try{		
		var a = TheApplication().ActiveBusObject().GetBusComp(&quot;CUT Address&quot;); 	 
		var rec = a.GetAssocBusComp().CountRecords();
		Outputs.SetProperty(&quot;numRec&quot;,rec);	 
	}  
	catch(e){
		throw(e); 
	}
	finally
	{
		rec = null;
		a = null;
	}
	

}"
			   SEQUENCE="72"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="03/22/2012 16:02:19"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetContextChordFromAccount"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetContextChordFromAccount(Inputs,Outputs)
{
	try{
		var AssetBC = TheApplication().ActiveBusObject().GetBusComp(&quot;Asset Mgmt - Asset (Order Mgmt)&quot;);
			if(AssetBC.FirstRecord())
			{  
				var CTN = AssetBC.GetFieldValue(&quot;Serial Number&quot;);
				var AssetId = AssetBC.GetFieldValue(&quot;Id&quot;);
				if (CTN == &quot;&quot; || CTN == null)
				{
					var record = AssetBC.FirstRecord();
		    		CTN = AssetBC.GetFieldValue(&quot;Serial Number&quot;);
		    		var part_num = AssetBC.GetFieldValue(&quot;Product Part Number&quot;);
		    		var Mobile = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_PART_NUMBERS&quot;, part_num);
		    		while ((CTN == &quot;&quot; || CTN == null) &amp;&amp; Mobile != &quot;MOBILE_SERVICE&quot; &amp;&amp; record)
		    		{
		    			CTN = AssetBC.GetFieldValue(&quot;Serial Number&quot;);
		    			AssetId = AssetBC.GetFieldValue(&quot;Id&quot;);
		    			if (CTN == &quot;&quot; || CTN == null)
		    				record = AssetBC.NextRecord();
		    		}
		    	}
		    	Outputs.SetProperty(&quot;CTN_Context&quot;,CTN);
		    	Outputs.SetProperty(&quot;AssetId&quot;, AssetId);
			}	
	}
	catch(e)
	{
		throw(e);
	}
	finally{
		AssetBC = null;
	}
}"
			   SEQUENCE="73"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="01/26/2013 08:47:28"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetCustomerRequestedDate"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="/**************************************************
	NAME:              	GetCustomerRequestedDate		
	DESCRIPTION: 		[Release-15.2]:[CR75380]:Added for calculating CRD.
	INPUT PARAMETERS:	Due Date,Action Code and Service Point Id.
	OUTPUT PARAMETERS:	Customer Requested Date.
	AUTHOR:				Sharad Gupta
	DATE CREATED:		07-05-2015 by ACN_SGUPTA
*************************************************/
function GetCustomerRequestedDate(Inputs,Outputs)
{
	try
	{
	
		var psInpUtility 	= TheApplication().NewPropertySet(); 
		var psOutUtility 	= TheApplication().NewPropertySet();
		var bsUtility		= TheApplication().GetService(&quot;VF_Utility_BS&quot;);
		var DueDate			= Inputs.GetProperty(&quot;DueDate&quot;);		
		var ActionCD		= Inputs.GetProperty(&quot;Action Code&quot;);
		var ServicePointId  = Inputs.GetProperty(&quot;Service Point Id&quot;);
		var vtoday			= new Date();
		var AssetBO 		= TheApplication().GetBusObject(&quot;CUT Premise&quot;);
		var AssetBC			= AssetBO.GetBusComp(&quot;CUT Asset Mgmt - Service Point&quot;);		
		var currentDate	 	= &quot;&quot;;		
		var customerDate	= &quot;&quot;;								
		var LeadProductDay	= &quot;&quot;;
		var ValueProduct	= &quot;&quot;;
		var prLeadTime		= &quot;&quot;;
		var ProductType		= &quot;&quot;;
		var ActionAdd 		= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;New&quot;);
		var ActionUpdate	= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;Modified&quot;);
		var ActionDelete	= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;Deleted&quot;);
		with(AssetBC)
		{
				ClearToQuery();
				SetViewMode(AllView);				
//				ActivateField(&quot;VF Lead Time&quot;);
				ActivateField(&quot;Product Type&quot;);
				SetSearchSpec(&quot;Id&quot;,ServicePointId);
				ExecuteQuery(ForwardOnly);
				var sRecord	= FirstRecord();		
				if(sRecord)
				{					
//					prLeadTime 		= GetFieldValue(&quot;VF Lead Time&quot;);
					ProductType		= GetFieldValue(&quot;Product Type&quot;);						
				}	//end of if(sRecord)
		}	//end of with(AssetBC)
	
//		if(prLeadTime != &quot;&quot; &amp;&amp; prLeadTime != null)
//		{	
			 if(ActionUpdate == ActionCD || ActionDelete == ActionCD)
			 {
			 
						var sConnectionType	=	TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_FL_PROD_TYPE&quot;,ProductType); 
						LeadProductDay = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_LEAD_TIME&quot;,sConnectionType);
						if(LeadProductDay != null &amp;&amp; LeadProductDay != &quot;&quot;)
						{
							with(psInpUtility)
							{ 
								SetProperty(&quot;NumberOfDays&quot;, LeadProductDay);
							}
							bsUtility.InvokeMethod(&quot;GetWorkingDays&quot;, psInpUtility, psOutUtility);
							customerDate = psOutUtility.GetProperty(&quot;OutputDate&quot;);				
							customerDate = customerDate + &quot; &quot; + vtoday.getHours() + &quot;:&quot; + vtoday.getMinutes() + &quot;:&quot; + vtoday.getSeconds();							
						} 	
		 	}//End If Action Code Modifed,Delete
//		}//if(prLeadTime != &quot;&quot; &amp;&amp; prLeadTime != null)
		if(customerDate == null || customerDate == &quot;&quot;)
			customerDate = DueDate;			
	}//End Try
	catch(e)
	{
		var sErrMsg = &quot;Operation not correctly executed. Error: Method GetCustomerRequestedDate &quot; + e.errText;	
		return(CancelOperation);
	}
	finally
	{
		psInpUtility 	= null;
		psOutUtility	= null;		
		bsUtility		= null;	
		vtoday			= null;	
		AssetBC 		= null;
		AssetBO 		= null;
		Outputs.SetProperty(&quot;customerDate&quot;,customerDate);		
	}
}"
			   SEQUENCE="74"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="05/27/2015 15:36:42"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetDescriptionMessage"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetDescriptionMessage(Inputs, Outputs){
  try{
  	var boValidation:BusObject = TheApplication().GetBusObject(&quot;FINS Validation History&quot;);
  	var bcValidation:BusComp = boValidation.GetBusComp(&quot;ISS Validation Message&quot;);

  	with(bcValidation){
		ClearToQuery();
		SetViewMode(AllView);
		ActivateField(&quot;Message Code&quot;);
		ActivateField(&quot;Message Text&quot;);
		SetSearchSpec(&quot;Message Code&quot;, Inputs.GetProperty(&quot;MessageCode&quot;));
		ExecuteQuery(ForwardOnly);
		var record = FirstRecord();
		if(record){
			var messageText = GetFieldValue(&quot;Message Text&quot;);
			var Label =  Inputs.GetProperty(&quot;Label&quot;);
			var msgReplace = messageText.replace(&quot;%1%&quot;, Label);			   	
			Outputs.SetProperty(&quot;MessageText&quot;, msgReplace);
			//Outputs.SetProperty(&quot;MessageText&quot;,GetFieldValue(&quot;Message Text&quot;));
		}
	}
  }
  catch(e){
  	throw(e);
  }

  finally{
	 messageText  = &quot;&quot;;
  	 Label        = &quot;&quot;;
  	 msgReplace   = &quot;&quot;;
  	 bcValidation = null;
 	 boValidation = null;
  }
}"
			   SEQUENCE="75"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="07/16/2013 10:58:19"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetEligibilityProp"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetEligibilityProp(Inputs, Outputs)
{
	try
	{
		var cachedPS = TheApplication().NewPropertySet();
	    if(Inputs.GetChildCount() &gt; 0)
	    {
	    	cachedPS = Inputs.GetChild(0);
	    }
		var indicFlagTotal = cachedPS.GetProperty(&quot;eligibilityIndicatorTotal&quot;);
		Outputs.SetProperty(&quot;eligibilityIndicatorTotal&quot;,indicFlagTotal);
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		cachedPS = null;
	}
}"
			   SEQUENCE="76"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="07/09/2013 07:12:36"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetFieldValueCustom"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetFieldValueCustom(Inputs, Outputs)
{
	try
	{
		var sId 		= Inputs.GetProperty(&quot;ObjId&quot;);
		var sBusComp 	= Inputs.GetProperty(&quot;BusComponent&quot;);
		var sBusObj 	= Inputs.GetProperty(&quot;BusObject&quot;);
		var sFieldName 	= Inputs.GetProperty(&quot;FieldName&quot;);
		
		var oBO 		= TheApplication().GetBusObject(sBusObj);
		var oBC 		= oBO.GetBusComp(sBusComp);
		
		with(oBC)
		{
			ClearToQuery();			
			ActivateField(sFieldName);
			InvokeMethod(&quot;SetAdminMode&quot;, &quot;TRUE&quot;);
			SetViewMode(AllView);
			if(sId != &quot;&quot; &amp;&amp; sId != null)
				SetSearchSpec(&quot;Id&quot;, &quot;&apos;&quot; + sId + &quot;&apos;&quot;);
			else
				TheApplication().RaiseErrorText(&quot;Not valid Search Expr&quot;);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				Outputs.SetProperty(sFieldName, GetFieldValue(sFieldName));
			}
		}
	}
	catch(e)
	{
		Outputs.SetProperty(&quot;Custom Error&quot;,e.errText);
		throw(e); 
	}
	finally
	{		
		oBC = null;
		oBO = null;
		sBusComp = null;
		sBusObj = null;
	}
}"
			   SEQUENCE="77"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="10/29/2014 14:26:13"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetIOFields"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetIOFields(Inputs,Outputs)
{
	try
	{
		var BO = TheApplication().GetBusObject(&quot;Repository Integration Object&quot;);
		var BC_IO = BO.GetBusComp(&quot;Repository Integration Object&quot;);
		var BC = BO.GetBusComp(&quot;Repository Integration Component&quot;);
		var BCF = BO.GetBusComp(&quot;Repository Integration Component Field&quot;);
		var sInnerLog = &quot;Start GetIOFields\n&quot;;
		var fieldExists = &quot;&quot;;
		var isProperty = Inputs.GetProperty(&quot;isPropertyName&quot;); // if there is a property name instead of an xml tag
		var RepositoryId = TheApplication().GetProfileAttr(&quot;Repository Id&quot;);
		sInnerLog += &quot;Repository Id: &quot; + RepositoryId + &quot;\n&quot;;
		Outputs.SetProperty(&quot;ErrorMsg&quot;,&quot;&quot;);
		Outputs.SetProperty(&quot;ErrorCode&quot;,&quot;&quot;);

		var IO = Inputs.GetProperty(&quot;Integration Object&quot;);
		var ICXMLTag = Inputs.GetProperty(&quot;IC XML Tag&quot;);
		var ICXMLContainerElement = Inputs.GetProperty(&quot;IC XML Container Element&quot;);
		
		var ICXMLListTags = Inputs.GetProperty(&quot;IC XML List Tags&quot;);
		var arrICXMLListTags = ICXMLListTags.split(&quot;,&quot;);
		
		var tag;
		
		with (BC_IO)
		{
			ActivateField(&quot;Repository Id&quot;);
			SetViewMode(AllView);
			ClearToQuery();
			SetSearchSpec(&quot;Name&quot;, IO);
			SetSearchSpec(&quot;Repository Id&quot;, RepositoryId);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				with (BC)
				{
					ActivateField(&quot;Repository Id&quot;);
					SetViewMode(AllView);
					ClearToQuery();
					SetSearchSpec(&quot;Repository Id&quot;, RepositoryId);
					SetSearchExpr(&quot;[XML Tag]=&apos;&quot; + ICXMLTag + &quot;&apos; and &quot; +	&quot;[XML Container Element]=&apos;&quot; + ICXMLContainerElement + &quot;&apos;&quot;);
					ExecuteQuery(ForwardOnly);
					if (FirstRecord())
					{
						with (BCF)
						{
							ActivateField(&quot;Repository Id&quot;);
							ActivateField(&quot;External Name&quot;);
					
							for (var i=0;i&lt;arrICXMLListTags.length;i++)
							{
								tag = arrICXMLListTags[i];
								SetSearchSpec(&quot;Repository Id&quot;, RepositoryId);
								if (isProperty == &quot;Y&quot;)
								{
									SetSearchExpr(&quot;[Name]=&apos;&quot; + tag + &quot;&apos;&quot;);
								}
								else
								{
									SetSearchExpr(&quot;[XML Tag]=&apos;&quot; + tag + &quot;&apos;&quot;);
								}
								ExecuteQuery(ForwardOnly);
								fieldExists = FirstRecord();
								
								if (fieldExists)
								{
									var field = GetFieldValue(&quot;External Name&quot;);
									sInnerLog += (i+1) + &quot;° field to update: &quot; + field + &quot;\n&quot;;
									Outputs.SetProperty(tag, field);
								}
								else
								{
									sInnerLog += &quot;xml tag &quot; + tag + &quot; not found\n&quot;;
								}
								
							} // end for (var i=0;i&lt;arrICXMLListTags.length;i++)
			
						} // end with (BCF)
						
					} // end if (FirstRecord())
					
				} // end with (BC)
				
			} // end if (FirstRecord())			
			
		} // end with (BC_IO)
	}
	catch(e)
	{
		sInnerLog += &quot;Error: &quot; + e.toString + &quot;\n&quot;;
		throw(e);
	}
	finally
	{
		BC_IO = null;
		BC = null;
		BCF = null;
		BO = null;
		sInnerLog += &quot;End GetIOFields\n&quot;;
		Outputs.SetProperty(&quot;InnerLog&quot;, sInnerLog);
		arrICXMLListTags = null;// Oracle Review Memory Leak Deallocation 31/07/2014
	}
}"
			   SEQUENCE="78"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="07/13/2011 15:25:52"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetMessageOnLOV"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetMessageOnLOV(lic){
    try{
          var oUtilityBS = TheApplication().GetService(&quot;VF_Utility_BS&quot;);
          var oBSInputs = TheApplication().NewPropertySet();
          var oBSOutputs = TheApplication().NewPropertySet();               
          
           //Get the message value from LOV 
          oBSInputs.SetProperty(&quot;Type&quot;,&quot;INTEGRATION_MESSAGE_TYPE&quot;);
          oBSInputs.SetProperty(&quot;Name&quot;, lic);
          oBSInputs.SetProperty(&quot;Field&quot;,&quot;Description&quot;);
          LookupCustom(oBSInputs,oBSOutputs);
          var sMessage = oBSOutputs.GetProperty(&quot;Lookup&quot;);
    }
    catch(e){
         throw(e);
    }
    finally{
         oBSInputs = null;
         oBSOutputs = null;
         oUtilityBS = null;
         return sMessage;
    }      
}"
			   SEQUENCE="79"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="07/09/2013 07:33:44"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetOrderDetails"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetOrderDetails(Inputs, Outputs)
{
	try
	{
		var BO = TheApplication().GetBusObject(&quot;Account&quot;);
		var BC = BO.GetBusComp(&quot;Order Entry - Orders&quot;);
		var Id = Inputs.GetProperty(&quot;AccountId&quot;);
		var sChannel = Inputs.GetProperty(&quot;OrderChannel&quot;);	
		var sStatus = Inputs.GetProperty(&quot;OrderStatus&quot;);
		var sOrderId=&quot;&quot;;
		var searchExp = &quot;[Account Id] = &apos;&quot; + Id + &quot;&apos; AND [VF Order Origin] = &apos;&quot; + sChannel + &quot;&apos; AND [Status] = &apos;&quot; + sStatus + &quot;&apos;&quot;;
		with (BC)
		{
			ActivateField(&quot;Order Number&quot;);
			ActivateField(&quot;Account Id&quot;);
			ActivateField(&quot;Status&quot;);
			ActivateField(&quot;VF Order Origin&quot;);
			SetViewMode(AllView);
			ClearToQuery();
			SetSearchExpr(searchExp);
			SetSortSpec(&quot;Created(DESCENDING)&quot;);	
			ExecuteQuery(ForwardOnly);
			if (FirstRecord())
			{
				sOrderId = GetFieldValue(&quot;Order Number&quot;);
			
			}
		}

		Outputs.SetProperty(&quot;Order Id&quot;,sOrderId);
		
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		BC = null;
		BO = null;
	}	
}"
			   SEQUENCE="80"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="03/23/2016 13:51:00"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetRandomNumber"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetRandomNumber(Inputs, Outputs)
{	//Davide Cutarelli
	try
	{
		var randomvalue;
   		var upper = Inputs.GetProperty(&quot;Upper&quot;);
   		var lower = Inputs.GetProperty(&quot;Lower&quot;);
   		var n = Inputs.GetProperty(&quot;Num&quot;);
   		var numRand = TheApplication().NewPropertySet();
   		var i = 1; 
   		var j = 0; 
   		var nTemp = 0; 
   		var nApp = 0;
   		var bFound = false; 
   		randomvalue = ((new Date().getTime())%4)+1;
   		numRand.SetProperty(&quot;number&quot;,randomvalue);
   		Outputs.AddChild(numRand);
   		numRand = null;
   		while (i&lt;n)
   		{	
   			randomvalue = ((new Date().getTime())%4)+1;
   			nTemp = Outputs.GetChildCount(); 
   			bFound = false;  
   			j = 0;  			
   			while((bFound==false)&amp;&amp;(j&lt;nTemp))
   			{   				
   				nApp = Outputs.GetChild(j).GetProperty(&quot;number&quot;);
    			if (nApp==randomvalue){ 
   					bFound = true; 
   				}
   				j++;
   				
   			}
   			if (bFound == false )
   			{	
   				numRand =  TheApplication().NewPropertySet();
   				numRand.SetProperty(&quot;number&quot;,randomvalue);
   				Outputs.AddChild(numRand);
   				numRand = null;
   				i++;
   			}   			
   		  }
   		
	}
finally
	{
		randomvalue = null;
	}
}"
			   SEQUENCE="81"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="11/07/2011 08:47:55"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetRule"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetRule(Inputs,Outputs)
{
	try
	{
		var DivisionName = Inputs.GetProperty(&quot;DivisionName&quot;);
		var Method = Inputs.GetProperty(&quot;Method&quot;);
		var LoginId = TheApplication().LoginId();
		var sBO = TheApplication().GetBusObject(&quot;VF Asset Eligibility BO&quot;);
		var sRespBC = sBO.GetBusComp(&quot;VF User Registration-Responsibities&quot;);
		var sRuleBO = TheApplication().GetBusObject(&quot;VF Asset Eligibility BO&quot;);
		var sRuleBC = sRuleBO.GetBusComp(&quot;VF Asset Eligibility BC&quot;);
		var record = &quot;&quot;;
		var RespName = &quot;&quot;;
		var SearchExpr = &quot;&quot;;
		var Rule = &quot;&quot;;
		var TypeMess = &quot;&quot;;
		var Message = &quot;&quot;;
		
		with(sRespBC)
		{
			ClearToQuery();
			SetViewMode(AllView);
			ActivateField(&quot;Responsibility Name&quot;);
			SetSearchSpec(&quot;User Id&quot;, &quot;&apos;&quot; + LoginId + &quot;&apos;&quot;);
			ExecuteQuery(ForwardOnly);
			record = FirstRecord();
			SearchExpr = &quot;[VF Division] = &apos;&quot;+DivisionName+&quot;&apos; AND [VF Method] = &apos;&quot;+Method+&quot;&apos; AND ([VF Responsibility] IS NULL&quot;;
			while (record)
			{
				RespName = GetFieldValue(&quot;Responsibility Name&quot;);
				SearchExpr = SearchExpr + &quot; OR [VF Responsibility] = &apos;&quot;+RespName+&quot;&apos;&quot;;
				record = NextRecord();
			}
			SearchExpr = SearchExpr + &quot;)&quot;;
		}
		with(sRuleBC)
		{
			ClearToQuery();
			SetViewMode(AllView);
			ActivateField(&quot;VF Message&quot;);
			ActivateField(&quot;VF Rule&quot;);
			ActivateField(&quot;VF Type Message&quot;);
			SetSearchExpr(SearchExpr);
			ExecuteQuery(ForwardOnly);
			if (FirstRecord())
			{
				Rule = GetFieldValue(&quot;VF Rule&quot;);
				TypeMess = GetFieldValue(&quot;VF Type Message&quot;);
				Message = GetFieldValue(&quot;VF Message&quot;);
			}
		}
		Outputs.SetProperty(&quot;Rule&quot;, Rule);
		Outputs.SetProperty(&quot;TypeMess&quot;, TypeMess);
		Outputs.SetProperty(&quot;Message&quot;, Message);
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		sRuleBC = null;
		sRuleBO = null;
		sRespBC = null;
		sBO = null;
	}
}"
			   SEQUENCE="82"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="03/20/2013 16:32:23"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetWorkingDays"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="/**************************************************
	NAME:              	GetWorkingDays		
	DESCRIPTION: 		[Release-15.2]:[CR75380]:Added for calculating working days.
	INPUT PARAMETERS:	Number Of Days to be added
	OUTPUT PARAMETERS:	Working Date
	AUTHOR:				Sharad Gupta
	DATE CREATED:		27-08-2015 by ACN_SGUPTA
*************************************************/
function GetWorkingDays(Inputs,Outputs)
{
	try
    {
			var DateSet	= new Date();
			var nDays = Inputs.GetProperty (&quot;NumberOfDays&quot;);
			nDays = ToNumber(nDays); 	
			var Dateholiday = &quot;&quot;,day = &quot;&quot;,strDate = &quot;&quot;,strDateArray = &quot;&quot;;
			var dtArray;
			while (nDays &gt; 0)
			{
				strDate 		= 	DateToString(DateSet);
				dtArray 		= 	strDate.split(&quot; &quot;); 
				strDate 		= 	dtArray[0];
				Dateholiday 	=	&quot;&quot;;
				day 			= 	&quot;&quot;;
				strDateArray	=	&quot;&quot;;				
				Dateholiday 	= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_HOLIDAY&quot;,strDate);
				if (Dateholiday !=&quot;&quot;)
				{
					DateSet.setDate(DateSet.getDate()+1);
					day	=	DateSet.getDay();
					strDateArray 	= 	DateToString(DateSet).split(&quot; &quot;);
					if(ToNumber(day) != 0 &amp;&amp; ToNumber(day) != 6 &amp;&amp; TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_HOLIDAY&quot;,strDateArray[0]) == &quot;&quot;)
						nDays 			= nDays - 1;						
				}
				day 			=	 DateSet.getDay();
				if (ToNumber(day) == 0) //Check Sunday [HGUP:23-03-2016:R15.3:Condition added for defect 
				{
					DateSet.setDate(DateSet.getDate()+1);
					Dateholiday  	=	&quot;Y&quot;;
					strDateArray 	= 	DateToString(DateSet).split(&quot; &quot;);
					if(TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_HOLIDAY&quot;,strDateArray[0]) == &quot;&quot;)
						nDays 			= nDays - 1;
				}
				if (ToNumber(day) == 6) //Check Saturday
				{
					DateSet.setDate(DateSet.getDate()+1); 
					Dateholiday		=	&quot;Y&quot;;					
				}
				if(Dateholiday == &quot;&quot;)
				{
					DateSet.setDate(DateSet.getDate()+1);
					day	=	DateSet.getDay();
					strDateArray 	= 	DateToString(DateSet).split(&quot; &quot;);
					if(ToNumber(day) != 0 &amp;&amp; ToNumber(day) != 6 &amp;&amp; TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_HOLIDAY&quot;,strDateArray[0]) == &quot;&quot;)
						nDays 			= nDays - 1;						
				}
			} 			
			var retDate = DateToString(DateSet);	
			dtArray = retDate.split(&quot; &quot;);
			retDate = dtArray[0];
			Outputs.SetProperty(&quot;OutputDate&quot;,retDate);
    }
    catch(e)
    {
         var erroMess = e.toString();
         
    }
    finally
    {
		DateSet = null;
		dtArray = null;
    }
}"
			   SEQUENCE="83"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="08/27/2015 15:39:16"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="LookupCustom"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function LookupCustom(Inputs, Outputs)
{
	try
	{
		var oBOListOfValues = TheApplication().GetBusObject(&quot;VF_UK_BO_NoLink&quot;); 		
		var oBCListOfValues = oBOListOfValues.GetBusComp(&quot;VF PickList Generic Light&quot;);
		var sField 			= Inputs.GetProperty(&quot;Field&quot;);
		var sType 			= Inputs.GetProperty(&quot;Type&quot;);
		var sValue 			= Inputs.GetProperty(&quot;Value&quot;);
		var sParentVal		= Inputs.GetProperty(&quot;Parent Val&quot;);
		var sName			= Inputs.GetProperty(&quot;Name&quot;);

		if (sField == &quot;&quot; || sField == null)
		{
			Outputs.SetProperty(&quot;Lookup&quot;, TheApplication().InvokeMethod(&quot;LookupValue&quot;, Inputs.GetProperty(&quot;Type&quot;), Inputs.GetProperty(&quot;Name&quot;)));
		}
	
		else
		{
			with(oBCListOfValues)
			{
				ClearToQuery();
				ActivateField(sField);
				SetViewMode(AllView);
				SetSearchSpec(&quot;Type&quot;, sType);
				
				if(sField == &quot;Name&quot;)
				{
					SetSearchSpec(&quot;Value&quot;, sValue);
					SetSearchSpec(&quot;Language&quot;, TheApplication().GetProfileAttr(&quot;VF_Active_Language&quot;));

					if (sParentVal != &quot;&quot; &amp;&amp; sParentVal != null)
					{
						SetSearchSpec(&quot;Parent Val&quot;, sParentVal);
					}
				}
				else
				{
					SetSearchSpec(&quot;Name&quot;, sName);
					SetSearchSpec(&quot;Language&quot;, TheApplication().GetProfileAttr(&quot;VF_Active_Language&quot;));
				}
				
				ExecuteQuery(ForwardOnly);
				
				var RecordExists = FirstRecord();
				
				if (RecordExists)
				{
					Outputs.SetProperty(&quot;Lookup&quot;, GetFieldValue(sField));
				}
			}	
		}
	
	}
	catch(e)
	{
		var errorMessage = e.toString();
		Outputs.SetProperty(&quot;ErrorMessage&quot;, errorMessage);
	}
	
	finally
	{
		oBCListOfValues	= null;
		oBOListOfValues	= null;
		sField			= null;
		sType 			= null;
		sValue 			= null;
		sParentVal		= null;
		sName			= null;
	}	
}"
			   SEQUENCE="85"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="06/15/2011 16:40:45"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="LookupLOVDetails"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function LookupLOVDetails(Inputs, Outputs)
{
/**************************************************************
* Name     : LookupLOVDetails
* Type     : Server
* Author   : Sonia Cheulwar
* Date     : 17/08/2016
* Inputs   : LOV Type, Display Value, Field Name
* Outputs  : Value in the LOV Field
* Description: To get the value of any field from LOV.          
****************************************************************/
	try 
	{
		var strLOVType  = Inputs.GetProperty(&quot;LOVType&quot;);
		var strLOVValue = Inputs.GetProperty(&quot;LOVValue&quot;);
		var strLOVField = Inputs.GetProperty(&quot;LOVField&quot;);
		var objBOPicklist = TheApplication().GetBusObject(&quot;List Of Values&quot;);
		var objPickList = objBOPicklist.GetBusComp(&quot;List Of Values&quot;);
		var strDetails = &quot;&quot;;

		with (objPickList)
		{
			ActivateField(&quot;Low&quot;);
			ActivateField(&quot;Value&quot;);
			ActivateField(&quot;Type&quot;);
			ActivateField(&quot;Active&quot;);
			ActivateField(strLOVField);			                       
			strLOVValue = &quot;&apos;&quot; + strLOVValue + &quot;&apos;&quot;;                                  
			ClearToQuery();                     
			SetSearchSpec(&quot;Type&quot;, strLOVType);
			SetSearchSpec(&quot;Value&quot;, strLOVValue);
			SetSearchSpec(&quot;Active&quot;, &quot;Y&quot;);                      
			ExecuteQuery(ForwardOnly);
	
			if (FirstRecord())
			{
				strDetails = GetFieldValue(strLOVField);
				Outputs.SetProperty(&quot;LOVDetails&quot;, strDetails);
			}
		}
	}
	
	catch (e)
	{
		throw (e);
	}

	finally
	{
		objPickList = null;
		objBOPicklist = null;
		strDetails = null;
	}
}"
			   SEQUENCE="86"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="08/24/2016 15:13:57"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="LowerCase"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="

function LowerCase(Inputs,Outputs)
{
	try
	{
		var original = Inputs.GetProperty(&quot;original&quot;);
		var originalToLower = original.toLowerCase()
		Outputs.SetProperty(&quot;originalToLower&quot;,originalToLower);
		Outputs.SetProperty(&quot;ErrorMessage&quot;,&quot;&quot;);
		Outputs.SetProperty(&quot;ErrorCode&quot;,&quot;&quot;);
	}
	catch(e)
	{
		Outputs.SetProperty(&quot;ErrorMessage&quot;,e.errText);
		Outputs.SetProperty(&quot;ErrorCode&quot;,e.errCode);
	}
	finally
	{
	}
}"
			   SEQUENCE="87"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="11/27/2013 09:15:15"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ManageErrorStock"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="/*
	Case 1: Standard Order Successfull
	Case 2: Pre-Order KO	
	Case 3: Partial Pre-Order KO	
	Case 4: Standard Order KO
	Case 5: Back-Order KO	
	Case 6: Partial Back-Order KO 
	Case 7: Partial Back-Order &amp; Partial Pre-Order KO
*/

function ManageErrorStock(nListOfStockReservationLines,nBackOrder,nPreorder,nReserved)
{
	try{
		var scenario = &quot;&quot;;
		// Case 1
		//RELEASE: 15.2|QC 60871 | ACTION: Update|DETAILS: Modified condion data area greater than equalto
		if(nReserved &lt;= nListOfStockReservationLines){
			scenario = &quot;Case1&quot;;
		}
		// Case 2
		if(nPreorder == nListOfStockReservationLines){
			scenario = &quot;Case2&quot;;
		}
		// Case 3
		if(nPreorder &gt; 0 &amp;&amp;  nPreorder &lt; nListOfStockReservationLines &amp;&amp; nBackOrder == 0){
			scenario = &quot;Case3&quot;;
		}
		// Case 4
		if(nBackOrder == 0 &amp;&amp; nPreorder == 0 &amp;&amp; nReserved == 0){
			scenario = &quot;Case4&quot;;
		}
		// Case 5
		if(nBackOrder == nListOfStockReservationLines){
			scenario = &quot;Case5&quot;;
		}
		// Case 6
		if(nBackOrder &gt;0 &amp;&amp; nBackOrder &lt; nListOfStockReservationLines &amp;&amp; nPreorder == 0){
			scenario = &quot;Case6&quot;;
		}
		// Case 7
		if((nBackOrder + nPreorder + nReserved) == nListOfStockReservationLines &amp;&amp; nBackOrder &gt; 0 &amp;&amp; nPreorder &gt; 0){
			scenario = &quot;Case7&quot;;
		}		
	}
	catch(e){
		throw(e);
	}
	finally{
		return(scenario);
	}
}"
			   SEQUENCE="88"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="05/30/2013 11:32:37"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ManageResponseCreateStockReservation"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ManageResponseCreateStockReservation(Inputs,Outputs){
     try{                      
          //declare variables 
          var ListOfStockReservationLines = TheApplication().NewPropertySet();
          var partNum =&quot;&quot;;
          var status = &quot;&quot;;
          var partNumChild =&quot;&quot;;
          var statusChild = &quot;&quot;;
          var sReturn = &quot;&quot;;         
          var OrderBO = TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);
          var OrderItemBC = OrderBO.GetBusComp(&quot;Order Entry - Line Items&quot;);
          var sActionCode = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;DELTA_ACTION_CODE&quot;, &quot;New&quot;);
          TheApplication().SetProfileAttr(&quot;VF_SKIP_ORDER_RO&quot;,&quot;Y&quot;);
          //search ListOfStockReservationLines
          FindTypeInSiebelMessage(Inputs,ListOfStockReservationLines,&quot;ListOfStockReservationLines&quot;);
          var nListOfStockReservationLines = ListOfStockReservationLines.GetChildCount();
          var nPreorder = 0;
          var nBackOrder = 0;
          var nReserved = 0;
          var sBackOrder =  TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_RESERVATION_RESPONSE&quot;, &quot;Back Ordered&quot;) ;
          var sPreOrder =  TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_RESERVATION_RESPONSE&quot;, &quot;Pre Ordered&quot;) ;
          var sReserved =  TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_RESERVATION_RESPONSE&quot;, &quot;Reserved&quot;) ;
          var scenario = &quot;&quot;;
          var prodPreOrder = &quot;&quot;;
          var prodBackOrder = &quot;&quot;;
          var msgCase = &quot;&quot;;

          //for each StockReservationLines
          for(var i=0; i&lt;nListOfStockReservationLines;i++)
          {                      
              partNumChild = FindChild(ListOfStockReservationLines.GetChild(i), &quot;ID_102&quot;);
              partNum = partNumChild.GetProperty(&quot;ID_102_Value&quot;);
              statusChild = FindChild(ListOfStockReservationLines.GetChild(i), &quot;Code_76&quot;);
              status = statusChild.GetProperty(&quot;Code_76_Value&quot;);
              sReturn = partNum + &quot;-&quot; + status +&quot;;&quot; + sReturn;                                                      
                            
              //update line items with reservation status
              with(OrderItemBC)
              {
                   SetViewMode(AllView);
                   ClearToQuery(&quot;&quot;);
                   ActivateField(&quot;VF Reservation Response&quot;);
                   ActivateField(&quot;Product&quot;);
                   ActivateField(&quot;VF Reserved Item&quot;);
                   SetSearchExpr(&quot;[Order Header Id]=&apos;&quot; + Inputs.GetProperty(&quot;OrderID&quot;) + &quot;&apos; AND ([VF Reserved Item] = &apos;&apos; OR [VF Reserved Item] IS NULL OR [VF Reserved Item] = &apos;N&apos;) AND [Part Number]=&apos;&quot; + partNum +&quot;&apos; AND [Action Code] =&apos;&quot; +sActionCode+&quot;&apos;&quot;);  //QC 36062 [SRK]
                   ExecuteQuery(ForwardOnly);
                   if (FirstRecord())
                   {
					     //check the status
			              switch(status)
			              {
				               case sBackOrder :
				                              nBackOrder = nBackOrder +1;
				                              prodBackOrder = GetFieldValue(&quot;Product&quot;)+&quot;,&quot;+prodBackOrder;
				               break;
				               case sPreOrder :
				                              nPreorder = nPreorder +1;
				                              prodPreOrder = GetFieldValue(&quot;Product&quot;)+&quot;,&quot;+prodPreOrder;
				               break;
				               case sReserved :
				                              nReserved = nReserved +1;
				               break;
			              }
					     
					     SetFieldValue(&quot;VF Reservation Response&quot;, status);
					     var sCheck = CheckReservedItemOnLOV(status);
					     if ((sCheck == &quot;Y&quot;)||(sCheck == &quot;N&quot;))
					     {
					        SetFieldValue(&quot;VF Reserved Item&quot;, sCheck);
					        WriteRecord();
					     }                                                                                                                                                                                                                                                                  
                   }                                                                                             
              }
          }
          if(nListOfStockReservationLines!=0){
          	scenario = ManageErrorStock(nListOfStockReservationLines,nBackOrder,nPreorder,nReserved);
          }	
         
          if(prodBackOrder.length&gt;0){
          	prodBackOrder = prodBackOrder.substring(0,prodBackOrder.length-1);
          }
          if(prodPreOrder.length&gt;0){
          	prodPreOrder = prodPreOrder.substring(0,prodPreOrder.length-1);
          }
          Outputs.SetProperty(&quot;sReturn&quot;,sReturn);
          Outputs.SetProperty(&quot;scenario&quot;,scenario);
          Outputs.SetProperty(&quot;prodBackOrder&quot;,prodBackOrder);
          Outputs.SetProperty(&quot;prodPreOrder&quot;,prodPreOrder);
	 }
	 catch(e)
	 {
		Outputs.SetProperty(&quot;Error Code&quot;,&quot;99&quot;);
		Outputs.SetProperty(&quot;Error Message&quot;,e.toString()); 
		throw(e);
		TheApplication().SetProfileAttr(&quot;VF_SKIP_ORDER_RO&quot;,&quot;N&quot;);
	 }
	 finally
	 {
		ListOfStockReservationLines = null;
		OrderItemBC = null;
		OrderBO = null;
		TheApplication().SetProfileAttr(&quot;VF_SKIP_ORDER_RO&quot;,&quot;N&quot;);
	 }                        
}"
			   SEQUENCE="89"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="12/04/2012 05:29:47"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ManageResponseInquire"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ManageResponseInquire(Inputs, Outputs){
	try{
		//declare variables 
		var listOfDataArea = TheApplication().NewPropertySet();	
		var lineItemId = Inputs.GetProperty(&quot;LineItem Id&quot;);
		//isInStockAll = 0 --&gt; No Stock Availability for all products
		//isInStockAll &lt; num DataArea --&gt; Stock Availability for some product
		//isInStockAll = num DataArea --&gt; Stock Availability for all product
		var isInStockAll = &quot;&quot;;
	//	var isInStockAllCont = 0;
		var IdItemConf = &quot;&quot;;
		var IdLocation = &quot;&quot;;
		var LeadPeriod = &quot;&quot;;
		var Quantity = &quot;&quot;;
		var listProdName = &quot;&quot;;
		
		var BackorderableFlag=&quot;&quot;;
		var BackorderableLimit=&quot;&quot;;
		var PreorderableFlag=&quot;&quot;;
		var PreorderableLimit=&quot;&quot;;
		var store=&quot;&quot;;
		var Quantityzeroproduct = 0;
		
		
		var ResumeDateObj = new Date(today); 
		
		var nPreorder = 0;
         var nBackOrder = 0;
         var nInStock  = 0;
         var sBackOrder =  TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_RESERVATION_RESPONSE&quot;, &quot;Back Ordered&quot;) ;
         var sPreOrder =  TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_RESERVATION_RESPONSE&quot;, &quot;Pre Ordered&quot;) ;
         var sInStock  =  TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_RESERVATION_RESPONSE&quot;, &quot;In Stock&quot;) ;
         var actionAdd =   TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;, &quot;New&quot;); //QC:50925 RKS
         var scenario = &quot;&quot;;
         var prodPreOrder = &quot;&quot;;
         var prodBackOrder = &quot;&quot;;
     //  var status = &quot;&quot;;
         var msgError = &quot;&quot;;
         
         var StringOfParNumber = &quot;&quot;;
		 var FindIn = TheApplication().NewPropertySet();
		 var FindOut = TheApplication().NewPropertySet();

			 
		//search ListOfDataArea
		FindTypeInSiebelMessage(Inputs,listOfDataArea,&quot;ListOfDataArea&quot;);

		var nListOfDataArea = listOfDataArea.GetChildCount();
		//for each DataArea
		for(var i=0; i&lt;nListOfDataArea;i++){	
			//get ID value
			var ItemConf = FindChild(listOfDataArea.GetChild(i), &quot;ID_8&quot;); 
			IdItemConf = ItemConf.GetProperty(&quot;ID_8_Value&quot;);
			
			FindIn.SetProperty(&quot;key&quot;,IdItemConf);
			FindIn.SetProperty(&quot;array&quot;,StringOfParNumber);
			FindInArray(FindIn,FindOut);
			var found = FindOut.GetProperty(&quot;found&quot;);
			
			if(found == &quot;N&quot;)
			{
			
				//get Status
		/*		var statusItem = FindChild(listOfDataArea.GetChild(i), &quot;Code_4&quot;); 
				if(statusItem !=&quot;&quot;){
					status = statusItem.GetProperty(&quot;Code_4_Value&quot;);
				} */				
					
				//search ListOfInventoryLocation
				var ListOfInventoryLocation = TheApplication().NewPropertySet();
				FindTypeInSiebelMessage(listOfDataArea.GetChild(i),ListOfInventoryLocation,&quot;ListOfInventoryLocation&quot;);
				var nListOfInventoryLocation = ListOfInventoryLocation.GetChildCount();
				//for each InventoryLocation
				for(var x=0; x&lt;nListOfInventoryLocation;x++){	
				 	var BO = TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);
					var bcOrderLineItem = BO.GetBusComp(&quot;Order Entry - Line Items&quot;);
					var bcOrderEntryOrder = BO.GetBusComp(&quot;Order Entry - Orders&quot;);
					
					
				 	var Location = FindChild(ListOfInventoryLocation.GetChild(x), &quot;ID_436&quot;);
					if(Location !=&quot;&quot;){
						IdLocation = Location.GetProperty(&quot;ID_436_Value&quot;);
					}
					
					var Custom = FindChild(ListOfInventoryLocation.GetChild(x), &quot;Custom_176&quot;);
					if(Custom !=&quot;&quot;){
					 	LeadPeriod = Custom.GetProperty(&quot;LeadPeriod&quot;);			
					 	Quantity = Custom.GetProperty(&quot;Quantity&quot;);	
					 		
					 	BackorderableFlag=Custom.GetProperty(&quot;BackorderableFlag&quot;);
						BackorderableLimit=Custom.GetProperty(&quot;BackorderableLimit&quot;);
						PreorderableFlag=Custom.GetProperty(&quot;PreorderableFlag&quot;);
						PreorderableLimit=Custom.GetProperty(&quot;PreorderableLimit&quot;);					
					} 
					//RELEASE: 15.2|QC 58797 |ACTION: Update|DETAILS:Changes for VF_Utilities_BS Manage Res Inquireis method RM 9788	
					with(bcOrderEntryOrder)
					{
						InvokeMethod(&quot;SetAdminMode&quot;,&quot;TRUE&quot;);
						SetViewMode(AllView);
						ClearToQuery(&quot;&quot;);
						SetSearchSpec (&quot;Id&quot;,Inputs.GetProperty(&quot;OrderID&quot;) ); 
						ExecuteQuery(ForwardOnly);
						if(FirstRecord())
						{
							 store = GetFieldValue(&quot;VF StoreCodeFulfillment&quot;);
						}
					
					}

						
					with(bcOrderLineItem){										
						InvokeMethod(&quot;SetAdminMode&quot;,&quot;TRUE&quot;);
						SetViewMode(AllView);
						ClearToQuery(&quot;&quot;);
						ActivateField(&quot;Available Date&quot;);	
						
						ActivateField(&quot;Back Orderable Flag&quot;);
						ActivateField(&quot;Back Orderable Limit&quot;);
						ActivateField(&quot;Pre Orderable Flag&quot;);
						ActivateField(&quot;Pre Orderable Limit&quot;);
						
						ActivateField(&quot;Available Quantity&quot;);							
						ActivateField(&quot;ATP Status&quot;);	
						ActivateField(&quot;ATP Status As Of Date&quot;);		
						ActivateField(&quot;Product&quot;);
						ActivateField(&quot;Source Inventory Loc Id&quot;);		 			
						if(lineItemId == &quot;&quot;){
						//	if(IdLocation==&quot;&quot;)
								SetSearchExpr(&quot;[Order Header Id]=&apos;&quot; + Inputs.GetProperty(&quot;OrderID&quot;) + &quot;&apos;AND [Part Number]=&apos;&quot; + IdItemConf +&quot;&apos; AND [Action Code] =&apos;&quot; + actionAdd +&quot;&apos; &quot;); //50925
						/*	else
								SetSearchExpr(&quot;[Order Header Id]=&apos;&quot; + Inputs.GetProperty(&quot;OrderID&quot;) + &quot;&apos;AND [Part Number]=&apos;&quot; + IdItemConf + &quot;&apos;AND [VF StoreCodePick]=&apos;&quot; + IdLocation +&quot;&apos; &quot;);	
							*/		
						}
						else{
						//	if(IdLocation==&quot;&quot;)
															SetSearchExpr(&quot;[Id]=&apos;&quot; + lineItemId + &quot;&apos;AND [Part Number]=&apos;&quot; + IdItemConf +&quot;&apos; AND [Action Code] =&apos;&quot; + actionAdd +&quot;&apos; &quot;);
						/*	else
								SetSearchExpr(&quot;[Id]=&apos;&quot; + lineItemId + &quot;&apos;AND [Part Number]=&apos;&quot; + IdItemConf +&quot;&apos;AND [VF StoreCodePick]=&apos;&quot; + IdLocation +&quot;&apos; &quot;);	
							*/	
						}
							
						ExecuteQuery(ForwardOnly);
						var bRec = FirstRecord(); 					
						while (bRec){
							var CurrentDate = new Date; 			 			 
							var DD = CurrentDate.getDate(); 
							var MM = CurrentDate.getMonth()+1; 
							var YYYY = CurrentDate.getFullYear(); 
							var sHRS = CurrentDate.getHours(); 
							var sMIN = CurrentDate.getMinutes(); 
							var sSEC = CurrentDate.getSeconds();  
							var today = ToNumber(MM) +&quot;/&quot;+ ToNumber(DD) +&quot;/&quot;+ ToNumber(YYYY)+&quot; &quot;+ sHRS +&quot;:&quot;+ sMIN +&quot;:&quot;+ sSEC ; 						
							ResumeDateObj = new Date(today); 
							ResumeDateObj.setDate((ResumeDateObj.getDate())+ToNumber(LeadPeriod));   							
							var DDb = ResumeDateObj.getDate(); 
							var MMb = ResumeDateObj.getMonth()+1;  
							var YYYYb = ResumeDateObj.getFullYear(); 
							var sHRSb = CurrentDate.getHours(); 
							var sMINb = CurrentDate.getMinutes(); 
							var sSECb = CurrentDate.getSeconds();  
							var otherDate = ToNumber(MMb) +&quot;/&quot;+ ToNumber(DDb) +&quot;/&quot;+ ToNumber(YYYYb)+&quot; &quot;+ sHRSb +&quot;:&quot;+ sMINb +&quot;:&quot;+ sSECb ; 						
						    
							//check if Stock is Available for product
							//RELEASE: 15.2|QC 58797 |ACTION: Update|DETAILS:Get value for store code from field VF StoreCodeFulfillment
							if(Quantity &gt; 0){
								if(IdLocation!=&quot;&quot;){
									//var store = GetFieldValue(&quot;VF StoreCodePick&quot;);
									if(store == &quot;&quot; || store == null || store == IdLocation){
										nInStock = nInStock +1;														
									}	}	//[SaurabhD][QC 55010][4/2/3015]				
								
								else{													
									nInStock = nInStock +1;													
									}
								 // [AMITR][QC 54610][27/1/2015]
							}	
							else{
					 			if(BackorderableFlag == &quot;Y&quot;){
					 				nBackOrder = nBackOrder +1;
					                prodBackOrder = GetFieldValue(&quot;Product&quot;)+&quot;, &quot;+prodBackOrder;	
					 			}
					 			else if(PreorderableFlag == &quot;Y&quot;){
					 				nPreorder = nPreorder +1;
					                prodPreOrder = GetFieldValue(&quot;Product&quot;)+&quot;, &quot;+prodPreOrder;
					            }  
					            else{
					            	listProdName = GetFieldValue(&quot;Product&quot;)+&quot;, &quot;+listProdName;
					            	Quantityzeroproduct = Quantityzeroproduct + 1; //[ASR:QC 62177] if quantity for any one of product 0 set nstock to 0
					            }  
							}							
							
							var AvailableDate =&quot;&quot;;
							var ATPStatus =&quot;&quot;;
							if(Quantity &gt; 0){
								AvailableDate = today;
								ATPStatus = &quot;Available&quot;;
							}else{
								AvailableDate = otherDate;
								ATPStatus = &quot;Out of Stock&quot;;
							}								
							SetFieldValue(&quot;Available Date&quot;, AvailableDate); 
							SetFieldValue(&quot;Available Quantity&quot;, Quantity);
							SetFieldValue(&quot;ATP Status&quot;,ATPStatus);	
							SetFieldValue(&quot;ATP Status As Of Date&quot;, today); 	
							SetFieldValue(&quot;Source Inventory Loc Id&quot;, IdLocation);						
							SetFieldValue(&quot;Back Orderable Flag&quot;,BackorderableFlag);
							SetFieldValue(&quot;Back Orderable Limit&quot;,BackorderableLimit);
							SetFieldValue(&quot;Pre Orderable Flag&quot;,PreorderableFlag);
							SetFieldValue(&quot;Pre Orderable Limit&quot;,PreorderableLimit);
							WriteRecord();
							bRec = NextRecord();
											
						}//end while	
						InvokeMethod(&quot;SetAdminMode&quot;,&quot;FALSE&quot;);				 
					}//end with
					bcOrderLineItem = null;
					BO = null;
				}//end for InventoryLocation
		   	} //end found = false	
		   	if(StringOfParNumber == &quot;&quot;)
		   		StringOfParNumber = IdItemConf;
		   	else	
		   		StringOfParNumber = StringOfParNumber+&quot;,&quot;+IdItemConf;			
		}//end for DataArea
		
		
		if (nInStock == 0){
		//	isInStockAll = 0;
			//update store check on order with Warehouse value
			var inpBS = TheApplication().NewPropertySet();
			var outBS = TheApplication().NewPropertySet();
			inpBS.SetProperty(&quot;BusObject&quot;, &quot;Order Entry (Sales)&quot;);
			inpBS.SetProperty(&quot;BusComponent&quot;,&quot;Order Entry - Orders&quot;);
			inpBS.SetProperty(&quot;SearchExpression&quot;, &quot;[Id]=&apos;&quot; + Inputs.GetProperty(&quot;OrderID&quot;) + &quot;&apos;&quot;);
			inpBS.SetProperty(&quot;FieldName&quot;,&quot;VF_StoreCheck&quot;);
			inpBS.SetProperty(&quot;CabledValue&quot;,TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_STORE_CHECK&quot;,&quot;Warehouse&quot;));
		    SetFieldValueCustom(inpBS,outBS);
		    inpBS = null;
		    outBS = null;			
		}
/*		if (isInStockAllCont == nListOfDataArea){
			isInStockAll = 2;
		}
		if ((isInStockAllCont &lt; nListOfDataArea)&amp;&amp;(isInStockAllCont &gt; 0)){
			isInStockAll = 1;
		}
*///Code Starts | VF Jinesh [23-July-2015] : Added for incident |1718612  in 15.2 Drop A . 
		if (nInStock == nListOfDataArea){
			isInStockAll = 2;
		}
		if ((nInStock &lt; nListOfDataArea)&amp;&amp;(nInStock &gt; 0)){
			isInStockAll = 1;
		}
		// [ASR]: Added for QC 62177 in 15.2 Drop D 
		if (Quantityzeroproduct &gt; 0)
		{
			nInStock = 0;
		}
			//Code Ends | VF Jinesh [23-July-2015] : Added for incident |1718612  in 15.2 Drop A . 
		Outputs.SetProperty(&quot;isInStockAll&quot;,isInStockAll);
		Outputs.SetProperty(&quot;Error Code&quot;,&quot;&quot;);		
		Outputs.SetProperty(&quot;Error Message&quot;,&quot;&quot;); 
//		Outputs.SetProperty(&quot;listProdName&quot;,listProdName.substring(0,listProdName.length-1));
		
		if(nListOfDataArea!=0){
          	scenario = ManageErrorStock(nListOfDataArea,nBackOrder,nPreorder,nInStock);
          }
		
		if(prodBackOrder.length&gt;0){
         	prodBackOrder = prodBackOrder.substring(0,prodBackOrder.length-2);
         }
         if(prodPreOrder.length&gt;0){
         	prodPreOrder = prodPreOrder.substring(0,prodPreOrder.length-2);
         }
         if(listProdName.length&gt;0){
         	listProdName = listProdName.substring(0,listProdName.length-2);
         } 
          
         if(scenario == &quot;Case1&quot;){
         	msgError = &quot;Case1&quot;;                         
         }         
         if(scenario == &quot;Case2&quot; || scenario == &quot;Case3&quot;){
         	msgError = GetMessageOnLOV(&quot;MSGK_13&quot;) + &quot;\n\n&quot; + prodPreOrder + &quot;\n\n&quot; +GetMessageOnLOV(&quot;MSGK_14&quot;); 
         } 
         if(scenario == &quot;Case4&quot;){
         	msgError = GetMessageOnLOV(&quot;MSGK_09&quot;) + &quot;\n\n&quot; + listProdName + &quot;\n\n&quot; +GetMessageOnLOV(&quot;MSGK_10&quot;);                         
         }
         if(scenario == &quot;Case5&quot; || scenario == &quot;Case6&quot;){
         	msgError = GetMessageOnLOV(&quot;MSGK_11&quot;) + &quot;\n\n&quot; + prodBackOrder + &quot;\n\n&quot; +GetMessageOnLOV(&quot;MSGK_14&quot;);                         
         } 
         if(scenario == &quot;Case7&quot;){
         msgError = GetMessageOnLOV(&quot;MSGK_11&quot;) + &quot;\n\n&quot; + prodBackOrder + &quot;\n\n&quot; +GetMessageOnLOV(&quot;MSGK_13&quot;) + &quot;\n\n&quot; + prodPreOrder + &quot;\n\n&quot; +GetMessageOnLOV(&quot;MSGK_14&quot;);                         
         }         
         Outputs.SetProperty(&quot;msgError&quot;,msgError); 
        

		
	} 	
	catch(e){
		try{
			bcOrderLineItem.InvokeMethod(&quot;SetAdminMode&quot;,&quot;FALSE&quot;);  
		}
		finally
		{
		}
		Outputs.SetProperty(&quot;Error Code&quot;,&quot;99&quot;);
		Outputs.SetProperty(&quot;Error Message&quot;,e.toString()); 
		throw(e);	
		
	}
	finally{
		bcOrderLineItem = null; 
		BO = null;
		listOfDataArea = null; 
		FindIn = null;
		FindOut = null;
		ListOfInventoryLocation = null;
		ResumeDateObj=null;
	}
}"
			   SEQUENCE="90"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="10/17/2011 04:29:37"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ManageResponsePortIn"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ManageResponsePortIn(Inputs, Outputs){
	try{
		//declare variables 
		var listOfDataArea = TheApplication().NewPropertySet();	
		
		var isPACstatus = &quot;&quot;;
		var isInStockAllCont = 0;
		var IdItemConf = &quot;&quot;;
		var IdLocation = &quot;&quot;;
		var LeadPeriod = &quot;&quot;;
		var Quantity = &quot;&quot;;
		var listProdName = &quot;&quot;;
		var OrdSubmitDATE = &quot;&quot;; //[10-06-15][RITESH]
		
		//RITESH PORT IN DATE ISSUE [QC70708]
		var isToday = new Date(); 
		var CheckTime = isToday.getHours(); 
		var checkDate  = isToday.getDate(); 
		var Today = isToday.getDay();
		var CutTime = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;PORTIN_CUT_TIME&quot;,&quot;Cut Time&quot;); 
		
		var newDate1 = &quot;&quot;;
        var newdate = &quot;&quot;;
        var nday = &quot;&quot;;
		//RITESH PORT IN DATE ISSUE [QC70708] DECLARE END
		
		var portDate1,expDate1;// Oracle Review Memory Leak Deallocation 31/07/2014		  
		
		//search ListOfDataArea
		FindTypeInSiebelMessage(Inputs,listOfDataArea,&quot;ListOfClusterResponse&quot;);
		var nListOfDataArea = listOfDataArea.GetChildCount();
		//for each DataArea
		for(var i=0; i&lt;nListOfDataArea;i++)
		{	
			//get ID value
			var CTN = listOfDataArea.GetChild(i).GetProperty(&quot;CTN&quot;);
			var PAC = listOfDataArea.GetChild(i).GetProperty(&quot;PAC&quot;);
			var status = listOfDataArea.GetChild(i).GetProperty(&quot;status&quot;);
			
			//GPG:[8/8/13]Added for Defect 21196 
			//AS:12Sep2013 Commented for defect 21559
		//	var portExpiryDate = listOfDataArea.GetChild(i).GetProperty(&quot;portExpiryDate&quot;);
			var donorOperator = listOfDataArea.GetChild(i).GetProperty(&quot;portDNO&quot;);	
			var donorSerProv = listOfDataArea.GetChild(i).GetProperty(&quot;portDSP&quot;);
			var pacCode = listOfDataArea.GetChild(i).GetProperty(&quot;PAC&quot;);
			var Inp1 = TheApplication().NewPropertySet();
			var Out1= TheApplication().NewPropertySet();
			
		// AS:12Sep2013	Added for defect 21559
			var propCount=0;
			var listOfvalidPortDate = TheApplication().NewPropertySet();
			FindTypeInSiebelMessage(Inputs,listOfvalidPortDate,&quot;ListOfvalidPortDate&quot;);
			propCount = listOfvalidPortDate.GetChildCount();
			for (var k=0; k&lt;propCount;k++)
			{
					var validPortDate = listOfvalidPortDate.GetChild(k).GetProperty(&quot;validPortDate_Value&quot;);
				//	var validPortDate = listOfDataArea.GetChild(i).GetProperty(&quot;validPortDate&quot;);
				//	Inp1.SetProperty(&quot;data&quot;, portExpiryDate);
					Inp1.SetProperty(&quot;data&quot;, validPortDate);
					formatToSiebelDate (Inp1, Out1);
					var portDate = Out1.GetProperty(&quot;data&quot;);
					
					portDate1 = portDate.split (&quot; &quot;);// Oracle Review Memory Leak Deallocation 31/07/2014
					portDate = portDate1 [0];
				
					
					if ( status == &quot;Valid&quot;)
						isPACstatus = &quot;Y&quot;;
					else
						isPACstatus = &quot;N&quot;;
					var isMob = &quot;Y&quot;;			
					
					var BO = TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);
					var bcOrderLineItem = BO.GetBusComp(&quot;Order Entry - Line Items&quot;);			
					var bcOrderLineItemPortIn = BO.GetBusComp(&quot;VF Port In&quot;);
			
					var Inp = TheApplication().NewPropertySet();
					var Out= TheApplication().NewPropertySet();
				//	var bs = &quot;&quot;;
				//	bs = TheApplication().GetService(&quot;VF_Utility_BS&quot;);
					Inp.SetProperty(&quot;data&quot;, validPortDate);
				//	Inp.SetProperty(&quot;data&quot;, portExpiryDate);
					formatToSiebelDate (Inp, Out);
					var expDate = Out.GetProperty(&quot;data&quot;);
					expDate1 = expDate.split (&quot; &quot;);// Oracle Review Memory Leak Deallocation 31/07/2014
					expDate = expDate1 [0];
					//After This add declare the newBC
					with(bcOrderLineItemPortIn)
					{
						SetViewMode(AllView);
						ClearToQuery(&quot;&quot;);
						ActivateField(&quot;VF Pac Code&quot;);	
						ActivateField(&quot;VF Pac Expiry&quot;);		
						SetSearchExpr(&quot;[VF Pac Code]=&apos;&quot; + PAC + &quot;&apos;AND [VF Pac Expiry] = &apos;&quot; + expDate + &quot;&apos;&quot;);
						ExecuteQuery(ForwardOnly);
						if (!FirstRecord())
							{
								NewRecord (NewAfter);
								SetFieldValue(&quot;VF Pac Code&quot;,PAC);
								SetFieldValue(&quot;VF Pac Expiry&quot;,expDate);
								WriteRecord();
							}	
						}
					
				}	
			
			with(bcOrderLineItem){										
			SetViewMode(AllView);
					ClearToQuery(&quot;&quot;);
					ActivateField(&quot;Order Header Id&quot;);	
					ActivateField(&quot;VF Port In Mobile No&quot;);							
					ActivateField(&quot;VF Is Mobile Phone Service&quot;);	
					ActivateField(&quot;VF Pac Validation Flag&quot;);
					ActivateField(&quot;VF Donor Operator&quot;);							
					ActivateField(&quot;VF Donor Service Provider&quot;);	
					ActivateField(&quot;VF Port In Date&quot;);
					ActivateField(&quot;VF Pac # No Copy&quot;);
					SetSearchExpr(&quot;[Order Header Id]=&apos;&quot; + Inputs.GetProperty(&quot;OrderID&quot;) + &quot;&apos;AND [VF Is Mobile Phone Service] = &apos;&quot; + isMob + &quot;&apos;AND [VF Port In Mobile No] = &apos;&quot; + CTN +&quot;&apos; &quot;);
					ExecuteQuery(ForwardOnly);						
					if (FirstRecord())
					{
					SetFieldValue(&quot;VF Pac Validation Flag&quot;,isPACstatus);
					
					//GPG:[8/8/13]Added for Defect 21196 
					SetFieldValue(&quot;VF Donor Operator&quot;,donorOperator);
					SetFieldValue(&quot;VF Donor Service Provider&quot;,donorSerProv);
					//SetFieldValue(&quot;VF Port In Date&quot;,portDate);
					SetFieldValue(&quot;VF Pac # No Copy&quot;,pacCode);
					OrdSubmitDATE = new Date(); //RITESH PORT IN DATE ISSUE [QC70708]
    				var sMonth = ToInteger(OrdSubmitDATE.getMonth() + 1); //RITESH PORT IN DATE ISSUE [QC70708]
				    var sDay = ToInteger(OrdSubmitDATE.getDate()); //RITESH PORT IN DATE ISSUE [QC70708]
				    var OrdSubDate = sMonth +&quot;/&quot;+ sDay +&quot;/&quot; + OrdSubmitDATE.getFullYear(); //RITESH PORT IN DATE ISSUE [QC70708]
					var oBCPick = GetPicklistBusComp(&quot;VF Port In Date&quot;);//GPG:[4/9/13]Added for Defect 21559 
				   	with (oBCPick)
				   	{
				     	  ClearToQuery();
					      //SetSearchSpec(&quot;VF Pac Code&quot;, pacCode); [10-06-16][RITESH]
					      //[13-05-15][RITESH][INC1580688] Added new searchspec
					      ActivateField(&quot;VF Pac Expiry&quot;); //ritesh 6 july
					      SetSearchExpr(&quot;[VF Pac Code]=&apos;&quot; + pacCode + &quot;&apos; AND [VF Pac Expiry] &gt; &apos;&quot; + OrdSubDate +&quot;&apos; &quot;);
					      ExecuteQuery(ForwardOnly);
					      /*if (FirstRecord())
					        { 
					           Pick();
					         }*/
					      //RITESH PORT IN DATE ISSUE [QC70708] FIX START
					      var isRec = FirstRecord();
					      while (isRec)
					        { 
					          var PickedD = GetFieldValue(&quot;VF Pac Expiry&quot;); //ritesh 6 july
					          var PickedDate = new Date(PickedD);
					          var PortDayDate = PickedDate.getDate();
					          var day = PickedDate.getDay();
					          //if (!(CheckTime &gt;= CutTime &amp;&amp; checkMinutes &gt;= CutMinutes &amp;&amp; ((Today == 1 || Today == 2  || Today ==3 &amp;&amp; (PortDayDate == checkDate+1)) || ((Today ==5 &amp;&amp; PortDayDate == checkDate+3))))) 
					          if (Today == 1 || Today == 2 || Today == 3 || Today == 4 || Today == 5) 
					          {
					            //if((CheckTime &lt;= CutTime) || (CheckTime &gt; CutTime &amp;&amp; PortDayDate &gt; checkDate+1))
					             if(CheckTime &lt; CutTime)
					             {
					              if(!(day == 0 || day == 6))
						             {
						              Pick();
						              break;
						             }
						             else if (day == 0 || day == 6)
						             {
						               isRec = NextRecord();
						               newDate1 = GetFieldValue(&quot;VF Pac Expiry&quot;);
						               newdate = new Date(newDate1);
						               nday = newdate.getDay();
						               if(!(nday == 0 || nday ==6))
						               {
						                Pick();
						                break;
						               }
						               else
						                {
						                  isRec = NextRecord();
						                  Pick();
						                 break;
						                }
						              }
						           }
						          
						          if(CheckTime &gt;= CutTime)
						          {
							           if (Today == 5)
							           { 
							                if(!(day == 0 || day == 6 || day == 1))
								             {
								              Pick();
								              break;
								             }
								             else if (day == 0 || day == 6 || day == 1)
								             {
								               isRec = NextRecord();
								               newDate1 = GetFieldValue(&quot;VF Pac Expiry&quot;);
								               newdate = new Date(newDate1);
								               nday = newdate.getDay();
								               if(!(nday == 0 || nday ==6 || day == 1))
								               {
								                Pick();
								                break;
								               }
								               else
								               {
								                   isRec = NextRecord();
                                                   newDate1 = GetFieldValue(&quot;VF Pac Expiry&quot;);
			   						               newdate = new Date(newDate1);
									               nday = newdate.getDay();
									               if(!(nday == 0 || nday ==6 || nday == 1))
									               {
									                Pick();
									                break;
									               }
									               else
									                {
									                  isRec = NextRecord();
									                  Pick();
									                 break;
									                }
									              }
									           }
							           }
							           if(PortDayDate = checkDate+1)
							           {
							            isRec = NextRecord();
							               newDate1 = GetFieldValue(&quot;VF Pac Expiry&quot;);
							               newdate = new Date(newDate1);
							               nday = newdate.getDay();
							               if(!(nday == 0 || nday ==6))
							               {
							                Pick();
							                break;
							               }
							               else
							                {
							                  isRec = NextRecord();
							                  //
							                   newDate1 = GetFieldValue(&quot;VF Pac Expiry&quot;);
		   						               newdate = new Date(newDate1);
								               nday = newdate.getDay();
								               if(!(nday == 0 || nday ==6))
								               {
								                Pick();
								                break;
								               }
								               else
								                {
								                  isRec = NextRecord();
								                  Pick();
								                 break;
								                }
							                }
							             }
							            if(PortDayDate &gt; checkDate+1)
							            {
							             if(!(day == 0 || day == 6))
							             {
							              Pick();
							              break;
							             }
							             else if (day == 0 || day == 6)
							             {
							               isRec = NextRecord();
							               newDate1 = GetFieldValue(&quot;VF Pac Expiry&quot;);
							               newdate = new Date(newDate1);
							               nday = newdate.getDay();
							               if(!(nday == 0 || nday ==6))
							               {
							                Pick();
							                break;
							               }
							               else
							                {
							                  isRec = NextRecord();
							                  Pick();
							                 break;
							                }
							              }          
							            }
						           }
						           
					          }	
					          
					          else if (Today == 0 || Today == 6)
					          {
	                               if (day == 1)
	                               {
	                                 isRec = NextRecord();
							         Pick();
							         break;
	                               }
	                               
	                               else
	                               {
						                Pick();
						                break;
						            }
                               
					          }					  		          
					          else
					          {
					           isRec = NextRecord();
					           Pick();
					           break;
					           }
					           
					        } //RITESH PORT IN DATE ISSUE [QC70708] END
					      
				    }
				    oBCPick = null;
					WriteRecord();
				}
			}
			}

}

	catch(e){
		Outputs.SetProperty(&quot;Error Code&quot;,&quot;99&quot;);
		Outputs.SetProperty(&quot;Error Message&quot;,e.toString()); 
		throw(e);		
	}
	finally{
		bcOrderLineItemPortIn = null;
		bcOrderLineItem = null; 
		BO = null;
		listOfDataArea = null;
		Inp1 = null;
		Out1 = null;
		listOfvalidPortDate = null;
		Inp = null;
		Out = null;
		portDate1 = null;// Oracle Review Memory Leak Deallocation 31/07/2014
		expDate1 = null;// Oracle Review Memory Leak Deallocation 31/07/2014		  
	}
}"
			   SEQUENCE="91"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="05/22/2013 07:40:34"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="NetPenaltyAmount"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function NetPenaltyAmount(Inputs,Outputs)
{
	try
	{
		var sAddAccount = &quot;0&quot;;
		var DateDiff = &quot;0&quot;;
		var sDiscountAmt = &quot;0&quot;;
		var TotalPenalty = &quot;0&quot;;
		var sLineRentalAmt = &quot;0&quot;;
		var sLineRentalAmt = &quot;0&quot;;
		var LineRental = &quot;0&quot;;
		var AmountTot = &quot;&quot;;
		var boAsset1 = TheApplication().GetBusObject(&quot;Service Agreement&quot;);
		var bcAsset1 = boAsset1.GetBusComp(&quot;FS Agreement Item&quot;);
		var Svc	= TheApplication().GetService(&quot;Workflow Process Manager&quot;);
		var ChargeAmt = Inputs.GetProperty(&quot;ChargeAmount&quot;);
		var sTotalAmt = &quot;0&quot;;
		var sTotalAmtNet =&quot;0&quot;;
		var sAcccountId = Inputs.GetProperty(&quot;Asset Integration Id&quot;);
		var sPromotion = Inputs.GetProperty(&quot;Promotion&quot;);
		var UpgradeDate = Inputs.GetProperty(&quot;UpgradeDate&quot;);
		var DueDate = Inputs.GetProperty(&quot;DueDate&quot;);
		var IsUpgradePromotion = Inputs.GetProperty(&quot;IsUpgradePromotion&quot;);
		var AgreementDocId = &quot;&quot;;
		var sObjectId = &quot;&quot;;
		var sAmount = &quot;0&quot;;
		var Count2 = &quot;0&quot;;
		var IsReturn = &quot;U&quot;;
		if (sAcccountId  != &quot;&quot;)
			{
				with(bcAsset1)
				{
					ClearToQuery();
					SetViewMode(AllView);
					ActivateField(&quot;Agreement Id&quot;);
					ActivateField(&quot;Account Id&quot;);
					ActivateField(&quot;Part Number&quot;);
					//var search1 = &quot;[Prod Prom Instance Id] = &apos;&quot; + sAcccountId + &quot;&apos;&quot;;
					var search1 = &quot;[Prod Prom Instance Id] = &apos;&quot; + sAcccountId + &quot;&apos; AND LookupValue(&apos;VF_FREIGHT_CLASS&apos;,[Part Number])=&apos;Y&apos;&quot;;////VF Jinesh [01-04-2016]:- Added code for defect 68223,68224
					SetSearchExpr(search1);
					ExecuteQuery();
					var Count1 = CountRecords();
					var Rec3 = FirstRecord();

					while(Rec3)//Search for Mobile phone service under selected Promotion		   	
					{	
						sObjectId = GetFieldValue(&quot;Account Id&quot;);
						var sAgreement = GetFieldValue(&quot;Agreement Id&quot;);
						//Added for QC 71718
						var boServiceAgree = TheApplication().GetBusObject(&quot;Service Agreement&quot;);
						var bcServiceAgree = boServiceAgree.GetBusComp(&quot;Service Agreement&quot;);
						with(bcServiceAgree)
						{
							ClearToQuery();
							SetViewMode(AllView);
							ActivateField(&quot;Order Id&quot;);
							var searchexp = &quot;[Id] = &apos;&quot; + sAgreement + &quot;&apos;&quot;;
							SetSearchExpr(searchexp);
							ExecuteQuery();
							var FirstRec = FirstRecord();
							if(FirstRec)
							{
								var OrderId = GetFieldValue(&quot;Order Id&quot;);
								var boOrder = TheApplication().GetBusObject(&quot;VF Order Entry Sales&quot;);
								var bcOrder = boOrder.GetBusComp(&quot;VF Order Entry - Orders&quot;);
								if(OrderId != null &amp;&amp; OrderId != &quot;&quot;)
								{ 
									with(bcOrder)
									{
										ClearToQuery();
										SetViewMode(AllView);
										ActivateField(&quot;VF_Is_Return&quot;);
										var searchexp = &quot;[Id] = &apos;&quot; + OrderId + &quot;&apos;&quot;;
										SetSearchExpr(searchexp);
										ExecuteQuery();
										var FirstRec = FirstRecord();
										if(FirstRec)
										{
											IsReturn = GetFieldValue(&quot;VF_Is_Return&quot;);
										}
									}
								}
							}
						}
						if (IsReturn == &quot;U&quot;)
						{
							var SMPSID = GetFieldValue(&quot;Asset Integration Id&quot;);
							var boAsset2 = TheApplication().GetBusObject(&quot;Service Agreement&quot;);
							var bcAsset2 = boAsset2.GetBusComp(&quot;FS Agreement Item&quot;);
							with(bcAsset2)
							{
								ClearToQuery();
								SetViewMode(AllView); 
								ActivateField(&quot;Prod Prom Instance Id&quot;);
								ActivateField(&quot;Prod Prom Rule Id&quot;);
								ActivateField(&quot;Account Id&quot;);
								ActivateField(&quot;Advance To&quot;);
								ActivateField(&quot;Asset Integration Id&quot;);
								ActivateField(&quot;Status&quot;);
								var search4 = &quot;[Asset Integration Id] = &apos;&quot; + SMPSID + &quot;&apos; AND [Root Agreement Item Id] = [Integration Id]&quot;;
								SetSearchExpr(search4);
								InvokeMethod(&quot;SetAdminMode&quot;, &quot;TRUE&quot;);
								ExecuteQuery();
							   	Count2 = CountRecords();
								var Rec4 = FirstRecord();
		if (Count2 &gt; 1)
		{
			while(Rec4)//Search for Lead Sharer Product under selected Promotion
			{
				var sRootRowId = GetFieldValue(&quot;Id&quot;);
				var sObjectId = GetFieldValue(&quot;Account Id&quot;);
				var sPromIntegID = GetFieldValue(&quot;Prod Prom Instance Id&quot;);
				var sPromItemID = GetFieldValue(&quot;Prod Prom Rule Id&quot;);
				var sRowId = GetFieldValue(&quot;Id&quot;);
				var sCPaid = GetFieldValue(&quot;Asset Integration Id&quot;);
				var boAsset6 = TheApplication().GetBusObject(&quot;Service Agreement&quot;);
				var bcAsset6 = boAsset6.GetBusComp(&quot;FS Agreement Item&quot;);
				with(bcAsset6)
				{
					ActivateField(&quot;Agreement Id&quot;);	
					ActivateField(&quot;Created&quot;);	
					ActivateField(&quot;Asset Integration Id&quot;);
					ActivateField(&quot;Agreement Start Date&quot;);
					ActivateField(&quot;Agreement Status&quot;);
					ActivateField(&quot;Agreement Id&quot;);
					var search6 = &quot;[Asset Integration Id] = &apos;&quot; + sPromIntegID + &quot;&apos; AND [Root Agreement Item Id] = [Integration Id]&quot;;	
					SetSearchExpr(search6);
					InvokeMethod(&quot;SetAdminMode&quot;, &quot;TRUE&quot;);
					ExecuteQuery();
					var Count3 = CountRecords();
					var Rec6 = FirstRecord();
					while(Rec6)//Search for Lead Sharer Product under selected Promotion
					{
						var sAgreeStart = GetFieldValue(&quot;Agreement Start Date&quot;);//jines
						var dAgreeStart = new Date(sAgreeStart);
						dAgreeStart = dAgreeStart.getTime();
						var sAgreeStatus = GetFieldValue(&quot;Agreement Status&quot;);//jinesh
						var AgreeStatus = GetFieldValue(&quot;Status&quot;);//jinesh
						var sAgreeDocId = GetFieldValue(&quot;Agreement Id&quot;);	
						var sPromRowId = GetFieldValue(&quot;Id&quot;);
						var sPromId = GetFieldValue(&quot;Asset Integration Id&quot;);
						UpgradeDate = GetFieldValue(&quot;Created&quot;);
						var sDocAgreeId = GetFieldValue(&quot;Agreement Id&quot;);
						var sUpgradeDate = UpgradeDate;
						var boAsset3 = TheApplication().GetBusObject(&quot;Service Agreement&quot;);
						var bcAsset3 = boAsset3.GetBusComp(&quot;Agreement Item Conditional Charge&quot;);
						with(bcAsset3)
						{
							ClearToQuery();
							SetViewMode(AllView); 
							ActivateField(&quot;Start Date&quot;);
							ActivateField(&quot;Effective Date&quot;);
							ActivateField(&quot;End Date&quot;);
							ActivateField(&quot;Amount&quot;);
							var search5 = &quot;[Agreement Item Id] = &apos;&quot; + sPromRowId + &quot;&apos;&quot;;
							SetSearchExpr(search5);
							InvokeMethod(&quot;SetAdminMode&quot;, &quot;TRUE&quot;);
							ExecuteQuery();
							var Count4 = CountRecords();
							var Rec5 = FirstRecord();
							while(Rec5)
							{
								var EffS = GetFieldValue(&quot;Effective Date&quot;);
								var sEffS = GetFieldValue(&quot;Start Date&quot;);
								var EffE = GetFieldValue(&quot;End Date&quot;);
								var Amount = GetFieldValue(&quot;Id&quot;);
								var sSysdate = new Date();
								var sSystime = sSysdate.getTime();
								var dEffS = new Date(EffS);
								var EffS1 = new Date(EffS);
								dEffS = dEffS.getTime();
								var dEffE = new Date(EffE);
								dEffE = dEffE.getTime();
								//DueDate = new Date();
								//var sUpgradeDate = new Date(UpgradeDate);
								IsUpgradePromotion = &quot;N&quot;;
								sPromotion = &quot;0&quot;;
						if (sSystime &gt; dEffS &amp;&amp; dEffE &gt; sSystime)
						{
							var TariffCount = &quot;0&quot;;//VF Jinesh [01-04-2016]:- Added code for defect 68223,68224
							var boAgreeItem1 = TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);
							var bcAgreeItem1 = boAgreeItem1.GetBusComp(&quot;VF Order Entry - Line Items&quot;);
							var Add = &quot;Add&quot;;
							var Delete = &quot;Delete&quot;;
							var Upgrade = &quot;U&quot;;
							var Complete = &quot;Complete&quot;;
							var sProductDelete = &quot;&quot;;
							var Return = &quot;Y&quot;;
							if (sPromId != null &amp;&amp; sPromId != &quot;&quot;)
							{
								with(bcAgreeItem1)
								{
									ClearToQuery();
									SetViewMode(AllView); 
									ActivateField(&quot;VF_Return_Flg&quot;);
									ActivateField(&quot;Product Id&quot;);
									ActivateField(&quot;Status&quot;);////VF Jinesh :- Code for defect 68222 starts
									ActivateField(&quot;VF Previous Prod Prom Instance Id&quot;);
									ActivateField(&quot;Prod Prom Instance Id&quot;);
									var search8 = &quot;[Root Order Item Id] = [Id] AND [VF Previous Prod Prom Instance Id] = &apos;&quot; + sPromId + &quot;&apos; AND [VF_Return_Flg] = &apos;&quot; + Upgrade + &quot;&apos; AND [Status] = &apos;&quot; + Complete + &quot;&apos;&quot;;									
									SetSearchExpr(search8);
									InvokeMethod(&quot;SetAdminMode&quot;, &quot;TRUE&quot;);
									ExecuteQuery();
									var Count8 = CountRecords();
									var Rec8 = FirstRecord();
									while(Rec8)
									{
										sProductDelete = GetFieldValue(&quot;Prod Prom Instance Id&quot;);
										var boOrderEntry = TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);
										var bcOrderItems = boOrderEntry.GetBusComp(&quot;VF Order Entry - Line Items&quot;);
										if (sProductDelete != null &amp;&amp; sProductDelete != &quot;&quot;)
										{
											with(bcOrderItems)
											{
												ClearToQuery();
												SetViewMode(AllView); 
												ActivateField(&quot;VF_Return_Flg&quot;);
												ActivateField(&quot;Product Id&quot;);
												ActivateField(&quot;Status&quot;);
												ActivateField(&quot;VF Previous Prod Prom Instance Id&quot;);
												var search9 = &quot;[VF Previous Prod Prom Instance Id] = &apos;&quot; + sProductDelete + &quot;&apos; AND [VF_Return_Flg] = &apos;&quot; + Return + &quot;&apos; AND [Status] = &apos;&quot; + Complete + &quot;&apos;&quot;;
												SetSearchExpr(search9);
												InvokeMethod(&quot;SetAdminMode&quot;, &quot;TRUE&quot;);
												ExecuteQuery();
												var Count9 = CountRecords();
												var Rec9 = FirstRecord();
												if(Count9 == 0)
												{
													TariffCount = Count8;////VF Jinesh :- Code for defect 68222 ends
												}
										}
									}
									Rec8 = NextRecord();
									}
								//}							
							if((AgreeStatus == &quot;Inactive&quot; &amp;&amp; TariffCount &gt; &apos;0&apos;) || (AgreeStatus == &quot;Active&quot;))
							{////VF Jinesh [01-04-2016]:- Added code for defect 68223,68224 Code ends
								var BsAmount = TheApplication().GetService(&quot;FS Conditional Charge&quot;);
								var AmInput  :PropertySet 	= TheApplication().NewPropertySet();
								var AmOutput :PropertySet 	= TheApplication().NewPropertySet();			
								AmInput.SetProperty(&quot;Conditional Charge Item Id&quot;, Amount);
								AmInput.SetProperty(&quot;Advance To&quot;, DueDate);
								BsAmount.InvokeMethod(&quot;GetCondCharge&quot;, AmInput, AmOutput);
								var AmountTot = AmOutput.GetProperty(&quot;Output Amount&quot;);
								var oInp = TheApplication().NewPropertySet();
								var oOut = TheApplication().NewPropertySet();
								oInp.SetProperty(&quot;ProcessName&quot;,&quot;VF_Calculate_Net_Penalty_Discount_WF&quot;);
								oInp.SetProperty(&quot;Object Id&quot;,sObjectId);
								oInp.SetProperty(&quot;OrderId&quot;,SMPSID);
								oInp.SetProperty(&quot;DueDate&quot;,DueDate);
								oInp.SetProperty(&quot;UpgradeDate&quot;,sUpgradeDate);
								oInp.SetProperty(&quot;IsUpgradePromotion&quot;,IsUpgradePromotion);
								oInp.SetProperty(&quot;Promotion&quot;,sPromotion);
								oInp.SetProperty(&quot;PromId&quot;,sPromId);
								oInp.SetProperty(&quot;AgreementDocId&quot;,sAgreeDocId);
								oInp.SetProperty(&quot;RootRowId&quot;,sRootRowId);//VF Jinesh[05-04-16] :- Added for Defect 68330 for Upgrade ETF Discount Remodelling
								oInp.SetProperty(&quot;UpgradedAsset&quot;,TariffCount);
								Svc.InvokeMethod(&quot;RunProcess&quot;, oInp, oOut);
								sDiscountAmt = oOut.GetProperty(&quot;ChargeAmountUpgrade&quot;);
								TotalPenalty = oOut.GetProperty(&quot;TotalPenalty&quot;);
								sLineRentalAmt = ToNumber(AmountTot) - ToNumber(sDiscountAmt) + ToNumber(TotalPenalty);
								sLineRentalAmt = ToNumber(sLineRentalAmt);
								sTotalAmt = ToNumber(sLineRentalAmt) ;
							}
							}
						}
					}
					else if(EffS1 &gt; sSysdate)
					{
						var TariffCount = &quot;0&quot;;////VF Jinesh [01-04-2016]:- Added code for defect 68223,68224 Code Starts
						var boAgreeItem1 = TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);
						var bcAgreeItem1 = boAgreeItem1.GetBusComp(&quot;VF Order Entry - Line Items&quot;);
						var Add = &quot;Add&quot;;
						var Delete = &quot;Delete&quot;;
						var Upgrade = &quot;U&quot;;
						var Complete = &quot;Complete&quot;;
						var sProductDelete = &quot;&quot;;
						var Return = &quot;Y&quot;;
						if (sPromId != null &amp;&amp; sPromId != &quot;&quot;)
						{
							with(bcAgreeItem1)
							{
								ClearToQuery();
								SetViewMode(AllView); 
								ActivateField(&quot;VF_Return_Flg&quot;);
								ActivateField(&quot;Product Id&quot;);
								ActivateField(&quot;Status&quot;);
								ActivateField(&quot;VF Previous Prod Prom Instance Id&quot;);
								ActivateField(&quot;Prod Prom Instance Id&quot;);
								var search8 = &quot;[VF Previous Prod Prom Instance Id] = &apos;&quot; + sPromId + &quot;&apos; AND [VF_Return_Flg] = &apos;&quot; + Upgrade + &quot;&apos; AND [Status] = &apos;&quot; + Complete + &quot;&apos;&quot;;//VF Jinesh :- Code for defect 68222 starts
								SetSearchExpr(search8);
								InvokeMethod(&quot;SetAdminMode&quot;, &quot;TRUE&quot;);
								ExecuteQuery();
								var Count8 = CountRecords();
								var Rec8 = FirstRecord();
								if (sProductDelete != null &amp;&amp; sProductDelete != &quot;&quot;)
								{
									while(Rec8)
									{
										sProductDelete = GetFieldValue(&quot;Prod Prom Instance Id&quot;);
										var boOrderEntry = TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);
										var bcOrderItems = boOrderEntry.GetBusComp(&quot;VF Order Entry - Line Items&quot;);
										with(bcOrderItems)
										{
											ClearToQuery();
											SetViewMode(AllView); 
											ActivateField(&quot;VF_Return_Flg&quot;);
											ActivateField(&quot;Product Id&quot;);
											ActivateField(&quot;Status&quot;);
											ActivateField(&quot;VF Previous Prod Prom Instance Id&quot;);
											var search9 = &quot;[VF Previous Prod Prom Instance Id] = &apos;&quot; + sProductDelete + &quot;&apos; AND [VF_Return_Flg] = &apos;&quot; + Return + &quot;&apos; AND [Status] = &apos;&quot; + Complete + &quot;&apos;&quot;;
											SetSearchExpr(search9);
											InvokeMethod(&quot;SetAdminMode&quot;, &quot;TRUE&quot;);
											ExecuteQuery();
											var Count9 = CountRecords();
											var Rec9 = FirstRecord();
											if(Count9 == 0)
											{
												TariffCount = Count8;////VF Jinesh :- Code for defect 68222 ends
												}
											}
											Rec8 = NextRecord();
										}
									}
								}	
							}					
							if((AgreeStatus == &quot;Inactive&quot; &amp;&amp; TariffCount &gt; &apos;0&apos;) || (AgreeStatus == &quot;Active&quot;))
							{////VF Jinesh [01-04-2016]:- Added code for defect 68223 code ends
								ChargeAmt = GetFieldValue(&quot;Amount&quot;);
								var oInp = TheApplication().NewPropertySet();
								var oOut = TheApplication().NewPropertySet();
								oInp.SetProperty(&quot;ProcessName&quot;,&quot;VF_Calculate_Net_Penalty_Discount_WF&quot;);
								oInp.SetProperty(&quot;Object Id&quot;,sObjectId);
								oInp.SetProperty(&quot;OrderId&quot;,SMPSID);
								oInp.SetProperty(&quot;DueDate&quot;,DueDate);
								oInp.SetProperty(&quot;UpgradeDate&quot;,sUpgradeDate);
								oInp.SetProperty(&quot;IsUpgradePromotion&quot;,IsUpgradePromotion);
								oInp.SetProperty(&quot;Promotion&quot;,sPromotion);
								oInp.SetProperty(&quot;PromId&quot;,sPromId);
								oInp.SetProperty(&quot;AgreementDocId&quot;,sAgreeDocId);
								oInp.SetProperty(&quot;RootRowId&quot;,sRootRowId);
								oInp.SetProperty(&quot;UpgradedAsset&quot;,TariffCount);
								Svc.InvokeMethod(&quot;RunProcess&quot;, oInp, oOut);
								sDiscountAmt = oOut.GetProperty(&quot;ChargeAmountUpgrade&quot;);
								TotalPenalty = oOut.GetProperty(&quot;TotalPenalty&quot;);
								ChargeAmt = ToNumber(ChargeAmt);
								sDiscountAmt = ToNumber(sDiscountAmt);
								TotalPenalty = ToNumber(TotalPenalty);
								sLineRentalAmt = ChargeAmt - sDiscountAmt + TotalPenalty ;
								sLineRentalAmt = ToNumber(sLineRentalAmt);
								sTotalAmt = ToNumber(sLineRentalAmt) ;
						}
					}
					sTotalAmtNet = ToNumber(sTotalAmtNet) + ToNumber(sTotalAmt);
					sTotalAmtNet = ToNumber(sTotalAmtNet);
					sTotalAmt = &quot;0&quot;;////VF Jinesh [01-04-2016]:- Added code for defect 68223,68224
					Rec5 = NextRecord();
					}
					}	
						Rec6 = NextRecord();
				}
			}	
			Rec4 = NextRecord();
		}
	}//end if
	}
	}//end if(QC 71718)
	Rec3 = NextRecord();
					}
				}	
			}			
			Outputs.SetProperty(&quot;AddAccount&quot;,sAddAccount);	
			Outputs.SetProperty(&quot;Count&quot;,Count2);	
			Outputs.SetProperty(&quot;sTotalAmt&quot;,sTotalAmtNet);
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		bcOrderItems = null;
		bcAgreeItem1 = null;
		bcAsset3 = null;
		bcAsset6 = null;
		bcAsset2 = null;
		bcAsset1 = null;
		boAsset1 = null;
		boAsset2 = null;
		boAsset6 = null;
		boAsset3 = null;
		boAgreeItem1 = null;
		boOrderEntry = null;
		bcOrder = null;
		boOrder = null;
		bcServiceAgree = null;
		boServiceAgree = null;
	}
}"
			   SEQUENCE="92"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="01/05/2016 16:11:03"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ParseStringBIP"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ParseStringBIP(Inputs, Outputs)
{
	var endchar = Inputs.GetProperty(&quot;EndChar&quot;);
	var midchar = Inputs.GetProperty(&quot;MidChar&quot;);
	if(midchar != &quot;&quot; &amp;&amp; midchar != null)
		midchar = midchar - endchar;
	var string = Inputs.GetProperty(&quot;InpString&quot;);
	var str1 = string.substring(0, endchar);
	var str2;
	var str3;
	var str4;
	var str5;
	var str6;
	var lastpos = str1.lastIndexOf(&quot; &quot;)+1;
	var midpos;
	var strlen = string.length;
	var str2len;
	var str3len;
	
	if(strlen &lt; endchar)
		Outputs.SetProperty(&quot;Output&quot;, string);

	else if(lastpos == endchar)
	{
		str2 = string.substring(endchar, strlen);
		str2len = str2.length;
		if(midchar != &quot;&quot; &amp;&amp; midchar != null)
		{
			str3 = str2.substring(0, midchar);
			midpos = str3.lastIndexOf(&quot; &quot;)+1;
			if(str2len &lt; midchar)
				Outputs.SetProperty(&quot;Output&quot;, str1 + &quot;|&quot; + str2);	

			else if(midpos &lt; midchar)
			{
				str4 = str3.substring(0, midpos);
				str5 = str2.substring(midpos, str2len);
				Outputs.SetProperty(&quot;Output&quot;, str1 + &quot;|&quot; + str4 + &quot;|&quot; + str5);	
			}
			else if (midchar == midpos)
			{
				str4 = str2.substring(midchar, str2len);
				Outputs.SetProperty(&quot;Output&quot;, str1 + &quot;|&quot; + str3 + &quot;|&quot; + str4);
			}
			else
				Outputs.SetProperty(&quot;Output&quot;, string);			
		}
		else
			Outputs.SetProperty(&quot;Output&quot;, str1 + &quot;|&quot; + str2);
	}
	
	else if(lastpos &lt; endchar)
	{	
		str2 = string.substring(0, lastpos-1);
		str3 = string.substring(lastpos, string.length);
		str3len = str3.length;
		if(midchar != &quot;&quot; &amp;&amp; midchar != null)
		{
			str4 = str3.substring(0, midchar);
			midpos = str4.lastIndexOf(&quot; &quot;)+1;			
			if(str3len &lt; midchar)
				Outputs.SetProperty(&quot;Output&quot;, str2 + &quot;|&quot; + str3);
			
			else if(midpos &lt; midchar)
			{
				str5 = str4.substring(0, midpos);
				str6 = str3.substring(midpos, str3len);
				Outputs.SetProperty(&quot;Output&quot;, str2 + &quot;|&quot; + str5 + &quot;|&quot; + str6);
			}
			else if (midchar == midpos)
			{
				str5 = str3.substring(midchar, str3len);
				Outputs.SetProperty(&quot;Output&quot;, str2 + &quot;|&quot; + str4 + &quot;|&quot; + str5);
			}
			else
				Outputs.SetProperty(&quot;Output&quot;, string);
		
		}
		else
			Outputs.SetProperty(&quot;Output&quot;, str2 + &quot;|&quot; + str3);
	}
	
	else
		Outputs.SetProperty(&quot;Output&quot;, string);
}"
			   SEQUENCE="93"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="04/18/2014 11:49:04"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="QueryProducts"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function QueryProducts(Inputs, Outputs)
{
	try{

		var BO = TheApplication().GetBusObject(&quot;Admin ISS Product Definition&quot;);
		var BC = BO.GetBusComp(&quot;Internal Product - ISS Admin&quot;);
		var sField = Inputs.GetProperty(&quot;ID&quot;);
		BC.ClearToQuery();
		BC.ActivateField(&quot;Part #&quot;);
		BC.ActivateField(&quot;Name&quot;);
		BC.SetViewMode(AllView);
		BC.SetSearchSpec(&quot;Part #&quot;, sField);
		BC.ExecuteQuery(ForwardOnly);
		if (BC.FirstRecord())
				{
					Outputs.SetProperty(&quot;ID&quot;,BC.GetFieldValue(&quot;Name&quot;));
				}
	}

catch(e)
	
	{
		var errorMessage = e.toString();
		Outputs.SetProperty(&quot;ErrorMessage&quot;, errorMessage);
	}
	finally
	{
		BC = null;
		BO = null;
		sField = null;
	}
}"
			   SEQUENCE="94"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="02/12/2013 03:16:13"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ReSetVerifyFlag"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ReSetVerifyFlag(Inputs,Outputs)
{
/*----------------------------------------------------------------
Author: Shivani Modi
Description: For CR 103050|CCS4.0 This method sets the verify flag to N.
/*----------------------------------------------------------------*/
	var VFCurrView = TheApplication().ActiveViewName();
	var OrderBO = TheApplication().GetBusObject(&quot;VF_UK_BO_NoLink&quot;);
	var OrderBC = OrderBO.GetBusComp(&quot;PDS Simplified Order Entry - Orders&quot;);
	var OrderId = &quot;&quot;;
	try
	{	
		if (VFCurrView != &quot;&quot; &amp;&amp; VFCurrView != null)
		{
			var OrderNum = Inputs.GetProperty(&quot;OrderNum&quot;);
			with(OrderBC)
			{	
				ClearToQuery();
				SetViewMode(AllView);
				SetSearchSpec(&quot;Order Number&quot;,OrderNum);
				ExecuteQuery();
				if(FirstRecord())
				{
					OrderId = GetFieldValue(&quot;Id&quot;);
				}
			}
			var svc2 = TheApplication().GetService(&quot;Workflow Process Manager&quot;);
		//	var svc3 = TheApplication().GetService(&quot;FINS Teller UI Navigation&quot;);
			var Input2 = TheApplication().NewPropertySet();
			var Output2 = TheApplication().NewPropertySet();
			Input2.SetProperty(&quot;ProcessName&quot;, &quot;VF Verify Flag Reset WF&quot;);
			Input2.SetProperty(&quot;Object Id&quot;, OrderId);  
			svc2.InvokeMethod(&quot;RunProcess&quot;, Input2, Output2);
			//svc3.InvokeMethod(&quot;RefreshCurrentApplet&quot;, Input3, Output3);
		}
		return (CancelOperation);
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		OrderBC = null;
		OrderBO = null;
		Output2 = null;	
		Input2 = null;
		svc2 = null;
	}
}"
			   SEQUENCE="98"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="10/12/2016 08:34:08"
			   CREATED_BY="ACN_SMODI">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="RemoveNull"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function RemoveNull(Inputs, Parent,Outputs){
	try{
	       //If Parent is null this node is the root node
	       var nodo = Inputs.GetChild(0);
	       var iCount = nodo.GetChildCount();      

	       var temp;

	       if (iCount == 0){

		       var sVal = nodo.GetValue();

		       if (sVal == null || sVal == &quot;&quot;)
				Parent.RemoveChild(0);
		       return;

	       }
		//recursive call
	       for(var i=0; i&lt;iCount; i++){
		       temp = nodo.GetChild(i);
		       RemoveNull(temp, nodo,Outputs);
	       }
			
	}
	catch(e){
		var errorMessage = e.toString();
		return(&quot;&quot;);
	}
	finally{
	       nodo = null;
	       iCount = null;
	}
	return(CancelOperation);
}"
			   SEQUENCE="95"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="08/24/2011 06:14:49"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="RemoveSoap"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function RemoveSoap(Inputs, Outputs)
{
	try
	{
		var oApp = TheApplication();
		var SiebelMessage = oApp.NewPropertySet();
		var FinalMessage =  oApp.NewPropertySet();
		var count = 0, soapEnv = &quot;&quot;, CountBody = 0;
		var i=0,m=0,SMType = &quot;&quot;;
		SiebelMessage = Inputs.GetChild(0).GetChild(0);	//get the soap env
		if(SiebelMessage.GetChildCount() &gt; 0) 
		{	
			count = SiebelMessage.GetChildCount();
			for (i=0; i &lt; count; i++)
			{
				soapEnv=SiebelMessage.GetChild(i).GetType();
				if(soapEnv == &quot;SOAP-ENV:Body&quot;)
				{
					Outputs.AddChild(SiebelMessage.GetChild(i));
					Outputs.GetChild(0).SetType(&quot;SiebelMessage&quot;);					
				}			
			}
		}
	}
	catch (e)
	{
		Outputs.SetProperty(&quot;Custom Error&quot;,e.errText);
		throw(e);
	}
	finally
	{
		SiebelMessage = null;
		FinalMessage = null;
		oApp = null;
	}

}"
			   SEQUENCE="96"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="11/18/2014 18:05:39"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ResponseAssetWithRetentionEligibility"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ResponseAssetWithRetentionEligibility(Inputs, Outputs)
{
	try
	{
		var sListOfMsisdnInput=Inputs.GetProperty(&quot;listOfMsisdnAndID&quot;);
		var sBusinessObject = Inputs.GetProperty(&quot;BusinessObject&quot;);
		var sBusinessComponent = Inputs.GetProperty(&quot;BusinessComponent&quot;);
		var SiebelMessage = Inputs.GetChild(&quot;SiebelMessage&quot;);
		var count = &quot;&quot;;
		var ListOfMsisdnSplit = sListOfMsisdnInput.split(&quot;;&quot;);
		var sMsidnCouple =&quot;&quot;;
		var sMsidnCoupleSplit =&quot;&quot;;
		var i=0;
		var j=0;
		var listMSISDNResponse = TheApplication().NewPropertySet();
		var sTypeItem = &quot;ListOfRetentionEligibilityResponse&quot;;
		var sMsisdnID=&quot;&quot;;
		var sMsisdnValue=&quot;&quot;;
		var MSISDNretrieved =&quot;&quot;;
		var eligibilityIndicator =&quot;&quot;;
		var Reason =&quot;&quot;;
		var flag = false;
		var eligibilityIndicatorTotal = &quot;N&quot;; //used to determine if all assets are eligible 

		var OutPut = TheApplication().NewPropertySet();
		
		
		//search type in Siebel Message		
		FindTypeInXML(SiebelMessage,listMSISDNResponse,sTypeItem);
		count = listMSISDNResponse.GetChild(0).GetChildCount();
		//if there is one or more child...
		if (count&gt;0)
		{	
			//for each couple (msisnd,id) perform a search into Siebel Message values for 
			//retrieve ineligible reason and flag, and update it into database
			for(i in ListOfMsisdnSplit)
			{
				sMsidnCouple = ListOfMsisdnSplit[i];
				sMsidnCoupleSplit = sMsidnCouple.split(&quot;,&quot;);
				sMsisdnValue = sMsidnCoupleSplit[0];
				sMsisdnID = sMsidnCoupleSplit[1];
				while((j&lt;count)&amp;&amp;(flag == false))
				{
					MSISDNretrieved = listMSISDNResponse.GetChild(0).GetChild(j).GetChild(0).GetChild(0).GetProperty(&quot;MSISDN_Value&quot;);
					if (MSISDNretrieved ==sMsisdnValue )
					{
						eligibilityIndicator = listMSISDNResponse.GetChild(0).GetChild(j).GetProperty(&quot;EligibilityIndicator&quot;);
						Reason = listMSISDNResponse.GetChild(0).GetChild(j).GetChild(1).GetChild(0).GetProperty(&quot;Reason_0_Value&quot;);
						//transcode the eligibilityIndicator. To improve the performance, create a LOV
						if ((eligibilityIndicator==&quot;True&quot;)||(eligibilityIndicator==&quot;TRUE&quot;)||(eligibilityIndicator==&quot;true&quot;))
						{
							eligibilityIndicator=&quot;Y&quot;;
							eligibilityIndicatorTotal = &quot;Y&quot;;
						}
						else
						{
							eligibilityIndicator=&quot;N&quot;;
						}
						
						OutPut.SetProperty(sMsisdnID,eligibilityIndicator);
								
					    flag = true;
					}//end if				
					j++;					
				}//end while
				flag = false;
				j = 0;
			}//end for
			
			
		}//end if
		OutPut.SetProperty(&quot;eligibilityIndicatorTotal&quot;,eligibilityIndicatorTotal);	
		
	}
	catch(e)
	{
		var erroMess = e.toString();


	}
	finally
	{
		OutPut.SetType(&quot;RecomCachedOut&quot;);
		Outputs.AddChild(OutPut);
	
		listMSISDNResponse = null;
		OutPut = null;
		ListOfMsisdnSplit  = null;// Oracle Review Memory Leak Deallocation 31/07/2014
		sMsidnCoupleSplit  = null;// Oracle Review Memory Leak Deallocation 31/07/2014
	}
}"
			   SEQUENCE="99"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="10/16/2012 15:33:39"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="RetrieveProdData"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function RetrieveProdData(&amp;sProductId,&amp;sProdName,&amp;portNum,&amp;sInnerLog)
{
	var oboMACDNoLink = TheApplication().GetBusObject(&quot;VF_UK_BO_NoLink&quot;);
	var obcInternalProduct = oboMACDNoLink.GetBusComp(&quot;Internal Product&quot;);

	try
	{
		if(sProductId != &quot;&quot; &amp;&amp; sProductId != null)
		{
			with(obcInternalProduct)
			{
				ActivateField(&quot;Part #&quot;);
				ClearToQuery();
				SetViewMode(AllView);
				SetSearchSpec(&quot;Id&quot;, &quot;&apos;&quot; + sProductId + &quot;&apos;&quot;);
				ExecuteQuery(ForwardOnly);
				if(FirstRecord())
				{
					sProductId = GetFieldValue(&quot;Id&quot;);
					sProdName = GetFieldValue(&quot;Name&quot;);
					portNum = GetFieldValue(&quot;Part #&quot;);
				}
			}
		}
		
		else
		{
			with(obcInternalProduct)
			{
				ClearToQuery();
				SetViewMode(AllView);
				SetSearchSpec(&quot;Part #&quot;, &quot;&apos;&quot; + portNum + &quot;&apos;&quot;);
				ExecuteQuery(ForwardOnly);
				if(FirstRecord())
				{
					sProductId = GetFieldValue(&quot;Id&quot;);
					sProdName = GetFieldValue(&quot;Name&quot;);
				}
			}
		}
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		obcInternalProduct = null;
		oboMACDNoLink = null;
	}
}"
			   SEQUENCE="100"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="09/26/2013 16:54:29"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="Y"
			   NAME="RetrieveTolleranceLimit"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function RetrieveTolleranceLimit(Inputs,Outputs)
{
	try
	{
		
		var LOVbo = TheApplication().GetBusObject(&quot;VF_UK_BO_NoLink&quot;)
		var LOVbc = LOVbo.GetBusComp(&quot;VF PickList Generic Light&quot;);
		var Current_Time = Inputs.GetProperty(&quot;Current_Time&quot;);
		var LOV_Type = Inputs.GetProperty(&quot;LOV_Type&quot;);
		
		with (LOVbc)
		{
			SetViewMode(3);
			ClearToQuery();
			ActivateField(&quot;Name&quot;);
			ActivateField(&quot;Value&quot;);
			ActivateField(&quot;Description&quot;);
			ActivateField(&quot;High&quot;);
			SetSearchSpec(&quot;Type&quot;,LOV_Type);
			SetSearchSpec(&quot;Active flag&quot;, &quot;Y&quot;);
			ExecuteQuery(ForwardOnly);

			var next = FirstRecord();
			var i = 0;			
			
			while (next)
			{
				var Lic = GetFieldValue(&quot;Name&quot;);
				var Val = GetFieldValue(&quot;Value&quot;);
				
				if (ToNumber(Val)&lt;= ToNumber(Current_Time) &amp;&amp; ToNumber(Lic) &gt; ToNumber(Current_Time))
				{
					Outputs.SetProperty(&quot;Parallel_Jobs&quot;, GetFieldValue(&quot;Description&quot;));
					Outputs.SetProperty(&quot;NumOfOrders&quot;, GetFieldValue(&quot;High&quot;));
					Outputs.SetProperty(&quot;TolleranceLimit&quot;, GetFieldValue(&quot;Low&quot;));
					i = i+1;
					Outputs.SetProperty(&quot;CountRows&quot;,i);
				}
				
				next = NextRecord();
			} // end while (next)
		} // end with (LOVbc)
	}
	catch (e)
	{
		throw(e);
	}
	finally
	{
		LOVbc = null;
		LOVbo = null;
	}
}"
			   SEQUENCE="101"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="11/27/2012 17:05:40"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="RunShell"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function RunShell(Inputs,Outputs)
{
try
{
   var Param = Inputs.GetProperty(&quot;FileName&quot;);
   var ShellDir = Inputs.GetProperty(&quot;ShellPath&quot;);
   var filename = &quot;sh &quot; + Param; 
   Clib.chdir(ShellDir);
   Clib.system(filename);  
  	return(CancelOperation);   	
  }
catch(e)
{
     TheApplication().RaiseErrorText(e.toString());
}
finally
{
  filename = null;
  Param = null;
}


 return (ContinueOperation);
}"
			   SEQUENCE="102"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="10/24/2011 04:50:02"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SIMSwapInactive"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="/**************************************************
Description:[Release-CCS4.0]:[CR#104767- SIM Swap]
Author: Priyanka
Date Created: 19-Oct-2016
***************************************************/
function SIMSwapInactive(Inputs, Outputs)
{
	var boAsset,ProductId,AssetProdId,ProdId,sStatus,AgreementBO,AgreementItemBC,bcAsset,ServiceId,IsReturn2,oliServiceId,SerialNum,Action,FulfilmentItemCode,sBO,OrderItemBC,sOrderId,SimSwapFlag,PartNum,PromIntegId,sRecord,expr1,RootOrderItemId;
	var SIMIntegId     = &quot;&quot;;
	var IsRec          = &quot;&quot;;
	var oliSIMIntegId  = &quot;&quot;;
	var ParOrderItemId = &quot;&quot;;
	var PromIntegId    = &quot;&quot;;
	var sProductId     = &quot;&quot;;
	var agrIntegId     = &quot;&quot;;
	var sInactive      = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;IMPL_PHASE&quot;, &quot;Inactive&quot;);
	var sActive        = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;IMPL_PHASE&quot;, &quot;Active&quot;);
	var sFIC           = &quot;SIM Card&quot;;
	try
	{
		SimSwapFlag = Inputs.GetProperty(&quot;SIMSwapFlag&quot;);
		sOrderId    = Inputs.GetProperty(&quot;OrderId&quot;);
		IsReturn2   = Inputs.GetProperty(&quot;OrderType&quot;);
		if(SimSwapFlag != null &amp;&amp; SimSwapFlag != &quot;&quot;)
		{
			sBO		          = TheApplication().GetBusObject (&quot;VF Order Entry Sales&quot;);
			OrderItemBC	      = sBO.GetBusComp(&quot;VF Order Entry - Line Items&quot;);
			boAsset           = TheApplication().GetBusObject(&quot;VF PDS Asset Management Light&quot;);
			bcAsset           = boAsset.GetBusComp(&quot;VF Asset Mgmt - Asset Light&quot;);
			AgreementBO       = TheApplication().GetBusObject(&quot;VF_UK_BO_NoLink&quot;);
			AgreementItemBC   = AgreementBO.GetBusComp(&quot;FS Agreement Item&quot;);
			if(IsReturn2.indexOf(&quot;SS&quot;)&gt;-1)
			{
				with(OrderItemBC)
				{
					ClearToQuery();
					SetViewMode(AllView);
					ActivateField(&quot;Part Number Calc&quot;);
					ActivateField(&quot;Service Id&quot;);
					ActivateField(&quot;Fulfilment Item Code&quot;);
					ActivateField(&quot;Action Code&quot;);
					ActivateField(&quot;Prod Prom Instance Id&quot;);
					ActivateField(&quot;Product Id&quot;);
					ActivateField(&quot;Parent Order Item Id&quot;);
					ActivateField(&quot;Asset Integration Id&quot;);
					SetSearchSpec(&quot;Order Header Id&quot;, sOrderId);
					ExecuteQuery(ForwardOnly);
					sRecord = FirstRecord();
					while(sRecord)
					{    
						ParOrderItemId     = &quot;&quot;; 
						PartNum            = GetFieldValue(&quot;Part Number Calc&quot;)
						ServiceId          = GetFieldValue(&quot;Service Id&quot;);
						FulfilmentItemCode = GetFieldValue(&quot;Fulfilment Item Code&quot;);
						Action             = GetFieldValue(&quot;Action Code&quot;);
						ParOrderItemId     = GetFieldValue(&quot;Parent Order Item Id&quot;);
						
						if(PartNum  == &quot;MOBILE_SERVICE&quot;)
						{
							PromIntegId = GetFieldValue(&quot;Prod Prom Instance Id&quot;);
						}
						if(ServiceId != null &amp;&amp; ServiceId != &quot;&quot; &amp;&amp; FulfilmentItemCode == &quot;SIM Card&quot; &amp;&amp; Action == &quot;Add&quot; &amp;&amp; ParOrderItemId != null &amp;&amp; ParOrderItemId != &quot;&quot;)
						{
							oliServiceId = GetFieldValue(&quot;Service Id&quot;);
							ProductId    = GetFieldValue(&quot;Product Id&quot;);
						}
						if (FulfilmentItemCode == &quot;SIM Card&quot; &amp;&amp; ParOrderItemId == &quot;&quot;)
						{
							oliSIMIntegId   = GetFieldValue(&quot;Asset Integration Id&quot;);
							sProductId      = GetFieldValue(&quot;Product Id&quot;);                                                                
						}
						sRecord = NextRecord();
					}
				}
				if(PromIntegId != null &amp;&amp; PromIntegId != &quot;&quot; &amp;&amp; oliServiceId != null &amp;&amp; oliServiceId != &quot;&quot;)
				{                      
					with(bcAsset)
					{
						ClearToQuery();
						SetViewMode(AllView);
						ActivateField(&quot;Status&quot;);
						ActivateField(&quot;Serial Number&quot;);
						ActivateField(&quot;Fulfilment Item Code&quot;);
						ActivateField(&quot;Prod Prom Instance Id&quot;);
						ActivateField(&quot;Integration Id&quot;);
						ActivateField(&quot;Product Id&quot;);
						expr1 = &quot;[Fulfilment Item Code] = &apos;&quot; + sFIC + &quot;&apos; AND [Status] = &apos;&quot; + sActive + &quot;&apos; AND [Prod Prom Instance Id] = &apos;&quot; + PromIntegId + &quot;&apos;&quot;;
						SetSearchExpr(expr1);                                                                             
						ExecuteQuery(ForwardOnly);
						if(FirstRecord())                                                                   
						{
							SIMIntegId   = GetFieldValue(&quot;Integration Id&quot;);
							SerialNum    = GetFieldValue(&quot;Serial Number&quot;);
							AssetProdId  = GetFieldValue(&quot;Product Id&quot;);
							if(AssetProdId == ProductId)
							{
								if(SerialNum == oliServiceId)
								{
									ProdId = GetFieldValue(&quot;Product Id&quot;);
									SetFieldValue(&quot;Status&quot;,sInactive);
									WriteRecord();
									sStatus = GetFieldValue(&quot;Status&quot;);
								}
							}
						}
					}
				}
				agrIntegId = &quot;&quot;;
				if (SIMIntegId != &quot;&quot; &amp;&amp; SIMIntegId != null)
				agrIntegId = SIMIntegId;
				else if (oliSIMIntegId!= &quot;&quot; &amp;&amp; oliSIMIntegId != null)
				agrIntegId = oliSIMIntegId;
				if(agrIntegId  != &quot;&quot; &amp;&amp; agrIntegId  != null)
				{
					with(AgreementItemBC)	
					{
						ClearToQuery();
						SetViewMode(AllView);  
						ActivateField(&quot;Asset Integration Id&quot;);
						ActivateField(&quot;Status&quot;);
						SetSearchSpec(&quot;Asset Integration Id&quot;, agrIntegId);
						SetSearchSpec(&quot;Product Id&quot;, sProductId);
						ExecuteQuery(ForwardOnly);
						IsRec = FirstRecord();
						while(IsRec)
						{
							SetFieldValue(&quot;Status&quot;,&quot;Inactive&quot;);
							WriteRecord();
							IsRec = NextRecord();
						}
					}
				}
			}
		}
	}	
	catch(e)
	{
		throw(e);
	}
	finally
	{
		AgreementItemBC = null;
		AgreementBO = null;
		bcAsset = null;
		boAsset = null;
		OrderItemBC = null;
		sBO = null;
	}
}"
			   SEQUENCE="108"
			   UPDATED="11/09/2016 13:56:25"
			   UPDATED_BY="ACN_PRIYANKAD"
			   CREATED="10/20/2016 05:35:21"
			   CREATED_BY="ACN_PRIYANKAD">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SaveStockFFFields"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SaveStockFFFields(Inputs,Outputs)
{
	try
	{

		var BO = TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);
		var BC = BO.GetBusComp(&quot;Order Entry - Line Items&quot;);
		var SM = Inputs.GetProperty(&quot;SiebelMessage&quot;);
		
	}

catch(e)
	
	{
		var errorMessage = e.toString();
		Outputs.SetProperty(&quot;Error Code&quot;,&quot;999&quot;);
	}
	finally
	{
		BC = null;
		BO = null;
		SM = null;
	}
}"
			   SEQUENCE="103"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="04/26/2013 08:25:58"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Service_PreInvokeMethod"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
    //[08/11/2016][RITESH][QC:73044]
	if(MethodName == &quot;CheckLineRental&quot;)
	{
		CheckLineRental(Inputs, Outputs);
		return (CancelOperation);
	}
	
	//[09/07/2016][Khushboo][Release CCS 1.1][INC 2020961][Contact number in delivery tab is mandatory]
	if(MethodName == &quot;CheckPhoneNumber&quot;)
	{
		CheckPhoneNumber(Inputs, Outputs);
		return (CancelOperation);
	}
	
	//Shivani CR#103050
	if(MethodName == &quot;ReSetVerifyFlag&quot;)
	{
		ReSetVerifyFlag(Inputs, Outputs);
		return (CancelOperation);
	}

	//Sapana|CCS 1.0|CR 33804|Added for defect 67701 &amp; 67867 - Start
	if(MethodName == &quot;VFEscape&quot;)
	{
		VFEscape(Inputs, Outputs);
		return (CancelOperation);
	}
	//Sapana|CCS 1.0|CR 33804|Added for defect 67701 &amp; 67867 - End
	
    if(MethodName == &quot;CheckValidComms&quot;)
	{
		CheckValidComms(Inputs, Outputs);
		return (CancelOperation);
	}

	if(MethodName == &quot;GetAttributeValue&quot;)	//[AA][CR-86712][25/01/2016][Added for Create Receive Payment]
	{
		GetAttributeValue(Inputs, Outputs);
		return (CancelOperation);
	} 
		if(MethodName == &quot;GetOrderDetails&quot;)	//[AA][CR:97484][17/3/2016]
	{
		GetOrderDetails(Inputs, Outputs);
		return (CancelOperation);
	}
	
	//[QC65934][RITESH][12JAN16]
	if(MethodName == &quot;ConvertDateFormat&quot;)
	{
		ConvertDateFormat(Inputs, Outputs);
		return (CancelOperation);
	}
	//ENDOF [QC65934][RITESH][12JAN16]
	
	if(MethodName == &quot;ValidateContact&quot;)
	{
		ValidateContact(Inputs, Outputs);
		return (CancelOperation);
	}
	if(MethodName == &quot;CreateLineItemDelayReason&quot;)
	{
		CreateLineItemDelayReason(Inputs, Outputs);
		return (CancelOperation);
	}
	if(MethodName == &quot;AddMonthsToDate&quot;)
	{
		AddMonthsToDate(Inputs, Outputs);
		return (CancelOperation);
	}
	if(MethodName == &quot;GetFieldValueCustom&quot;)
	{
		GetFieldValueCustom(Inputs, Outputs);
		return (CancelOperation);
	}
	if(MethodName == &quot;CompareDates&quot;)
	{
		CompareDates(Inputs, Outputs);
		return (CancelOperation);
	}
	if(MethodName == &quot;CompareDatesInInterval&quot;)
	{
		CompareDatesInInterval(Inputs, Outputs);
		return (CancelOperation);
	}
	if(MethodName == &quot;TruncateDecimal&quot;)
	{
		TruncateDecimal(Inputs, Outputs);
		return (CancelOperation);
	}
	if(MethodName == &quot;GetDescriptionMessage&quot;)
	{
		GetDescriptionMessage(Inputs, Outputs);
		return (CancelOperation);
	}
	if(MethodName == &quot;GetEligibilityProp&quot;)
	{
		GetEligibilityProp(Inputs, Outputs);
		return (CancelOperation);
	}
	if(MethodName == &quot;ExportBillReadyNotification&quot;)
	{
		ExportBillReadyNotification(Inputs, Outputs);
		return (CancelOperation);
	}
	if(MethodName == &quot;ManageResponsePortIn&quot;)
	{
		ManageResponsePortIn(Inputs, Outputs);
		return (CancelOperation);
	}
	if(MethodName == &quot;AddProductPortIn&quot;)
	{
		AddProductPortIn(Inputs, Outputs);
		return (CancelOperation);
	}
	if(MethodName == &quot;ToUpperAndCheckInBlackList&quot;)
	{
		ToUpperAndCheckInBlackList(Inputs, Outputs);
		return (CancelOperation);
	}
	if(MethodName == &quot;ReplaceString&quot;)
	{
		replaceString(Inputs, Outputs);
		return (CancelOperation);
	}
	if(MethodName == &quot;SaveStockFFFields&quot;)
	{
		SaveStockFFFields(Inputs, Outputs);
		return (CancelOperation);
	}
	if(MethodName == &quot;SetJobNum&quot;)
	{
		SetJobNum(Inputs, Outputs);
		return (CancelOperation);
	}
	if(MethodName == &quot;CountRecordsOnBC&quot;)
	{
		CountRecordsOnBC(Inputs,Outputs)
		return (CancelOperation);
	}
	if(MethodName == &quot;AddItems&quot;)
	{
		AddItems(Inputs, Outputs);
		return (CancelOperation);
	}
	if(MethodName == &quot;RemoveNull&quot;)
	{
		RemoveNull(Inputs, null,Outputs);
		return (CancelOperation);
	}
	if(MethodName == &quot;RemoveEmptyTag&quot;)
	{
		return (CancelOperation);
	}
	if(MethodName == &quot;RetrieveTolleranceLimit&quot;)
	{
		RetrieveTolleranceLimit(Inputs,Outputs)
		return (CancelOperation);
	}	
	if(MethodName == &quot;RunShell&quot;)
	{
		RunShell(Inputs, Outputs);
		return (CancelOperation);
	}
	if(MethodName == &quot;WriteMonitoring&quot;)
	{
		WriteMonitoring(Inputs, Outputs);
		return (CancelOperation);
	}
	
	if(MethodName == &quot;UndoMonitoring&quot;)
	{
		UndoMonitoring(Inputs, Outputs);
		return (CancelOperation);
	}
	
	if(MethodName == &quot;AddNewLine&quot;)
	{
		AddNewLine(Inputs, Outputs);
		return (CancelOperation);
	}
	
	if(MethodName == &quot;AddItemConflictsResolve&quot;)
	{
		AddItemConflictsResolve(Inputs, Outputs);
		return (CancelOperation);
	}
	
	if(MethodName == &quot;SetPromIntegId&quot;)
	{
		SetPromIntegId(Inputs, Outputs);
		return (CancelOperation);
	}
	
	else if (MethodName == &quot;GetIOFields&quot;){
		GetIOFields(Inputs,Outputs);
		return (CancelOperation);
	}
	else if(MethodName == &quot;GenericQueryOnBC&quot;)
	{
		GenericQueryOnBC(Inputs,Outputs);
		return (CancelOperation);
	}
	else if(MethodName == &quot;GenericQueryOnBC_Edit&quot;)
	{
		GenericQueryOnBC_Edit(Inputs,Outputs);
		return (CancelOperation);
	}	
	else if(MethodName == &quot;SetFieldValue&quot;)
	{
		SetFieldValueCustom(Inputs, Outputs);
		return (CancelOperation);
	}
	else if(MethodName == &quot;SetFieldValueNLFL&quot;)
	{
		SetFieldValueNLFL(Inputs, Outputs);
		return (CancelOperation);
	}
	else if(MethodName == &quot;ValidateRegExp&quot;)
	{
        ValidateRegExp(Inputs, Outputs);
        return (CancelOperation);
    }
    
    else if(MethodName == &quot;ValidateRegExpTestMthd&quot;)
	{
        ValidateRegExpTestMthd(Inputs, Outputs);
        return (CancelOperation);
    }

    
	else if(MethodName == &quot;LookupCustom&quot;)
	{
        LookupCustom(Inputs, Outputs);
        return (CancelOperation);
    }
    else if(MethodName == &quot;Create_SR_TT&quot;)
	{
        CreateSR_TT(Inputs, Outputs);
        return (CancelOperation);
    }
    else if (MethodName == &quot;AddOrderItem&quot;)
    {
		AddOrderItem(Inputs, Outputs);
		return (CancelOperation);
    }
    else if (MethodName == &quot;formatToSiebelDate&quot;)
    {
		formatToSiebelDate(Inputs, Outputs);
		return (CancelOperation);
    }
    
    else if (MethodName == &quot;GetContextChordFromAccount&quot;)
    {
		GetContextChordFromAccount(Inputs, Outputs);
		return (CancelOperation);
    }
    
    else if (MethodName == &quot;WriteRequest&quot;)
    {
		WriteRequest(Inputs, Outputs);
		return (CancelOperation);
    }
    else if (MethodName == &quot;AddProductInquireAll&quot;){
		AddProductInquireAll(Inputs, Outputs);
		return (CancelOperation);
    } 
    else if (MethodName == &quot;ManageResponseInquire&quot;){
		ManageResponseInquire(Inputs, Outputs);
		return (CancelOperation);
    } 
    else if (MethodName == &quot;CheckOriginalOrder&quot;){
		CheckOriginalOrder(Inputs, Outputs);
		return (CancelOperation);
    } 
    else if (MethodName == &quot;GetRandomNumber&quot;){
		GetRandomNumber(Inputs, Outputs);
		return (CancelOperation);
    } 
     else if (MethodName == &quot;AddPropSet&quot;){
		AddPropSet(Inputs, Outputs);
		return (CancelOperation);
    } 
    else if (MethodName == &quot;FindPropSet&quot;){
		FindPropSet(Inputs,Outputs);
		return (CancelOperation);
    } 
    else if (MethodName == &quot;CreateAccount&quot;){
		CreateAccount(Inputs,Outputs);
		return (CancelOperation);
    }
     else if (MethodName == &quot;GetContext&quot;){
		GetContext(Inputs,Outputs);
		return (CancelOperation);
    }
    else if (MethodName == &quot;GetAvaibleResource&quot;){
		GetAvaibleResource(Inputs,Outputs);
		return (CancelOperation);
    }
    else if (MethodName == &quot;QueryProducts&quot;){
		QueryProducts(Inputs,Outputs);
		return (CancelOperation);
    }
    else if (MethodName == &quot;UpdateAssetWithRetentionEligibilityResponse&quot;){
		UpdateAssetWithRetentionEligibilityResponse(Inputs,Outputs);
		return (CancelOperation);
    }
    else if (MethodName == &quot;ResponseAssetWithRetentionEligibility&quot;){
    	ResponseAssetWithRetentionEligibility(Inputs,Outputs);
    	return (CancelOperation);
    }
    else if (MethodName == &quot;ManageResponseCreateStockReservation&quot;){
    	ManageResponseCreateStockReservation(Inputs,Outputs);
    	return (CancelOperation);
    }
    else if (MethodName == &quot;GeneratePINCode&quot;){
    	GeneratePINCode(Inputs,Outputs);
    	return (CancelOperation);
    }
    else if (MethodName == &quot;findOrderPending&quot;){
    	findOrderPending(Inputs,Outputs);
    	return (CancelOperation);
    }
    else if (MethodName == &quot;GetRule&quot;){
    	GetRule(Inputs,Outputs);
    	return (CancelOperation);
    }
    else if (MethodName == &quot;ValidateRule&quot;){
    	ValidateRule(Inputs,Outputs);
    	return (CancelOperation);
    }
    else if (MethodName == &quot;ValidateRuleBulk&quot;){
    	ValidateRuleBulk(Inputs,Outputs);
    	return (CancelOperation);
    }
    else if(MethodName == &quot;CalculateMonths&quot;){ 
    	CalculateMonths(Inputs, Outputs);
    	return (CancelOperation);
    }
    
    else if(MethodName == &quot;CalculateDiscountWU&quot;){ 
    	CalculateDiscountWU(Inputs, Outputs);
    	return (CancelOperation);
    }
	else if (MethodName == &quot;CreateDateRecurring&quot;){
    	CreateDateRecurring(Inputs,Outputs);
    	return (CancelOperation);
    }
    else if (MethodName == &quot;FindProdLine&quot;){
    	FindProdLine(Inputs,Outputs);
    	return (CancelOperation);
    }
     else if (MethodName == &quot;AddWorkingDays&quot;){
    	AddWorkingDays(Inputs,Outputs);
    	return (CancelOperation);
    }
    
    else if (MethodName == &quot;GetBalanceGroup&quot;)//GPG [05/09/2013] Added for Balance Group EAI
    {
    	GetBalanceGroup(Inputs,Outputs);
    	return (CancelOperation);
    }
	else if (MethodName == &quot;SubmitSetDate&quot;){
    	SubmitSetDate(Inputs,Outputs);
    	return (CancelOperation);
    }
    
    else if (MethodName == &quot;FindResultCreateDisputeResponse&quot;){
    	FindResultCreateDisputeResponse(Inputs,Outputs);
    	return (CancelOperation);
    }
    
    else if (MethodName == &quot;FindResultOfSiebelMessageOutput&quot;){
    	FindResultOfSiebelMessageOutput(Inputs,Outputs);
    	return (CancelOperation);
    }
    
    else if (MethodName == &quot;LowerCase&quot;){
    	LowerCase(Inputs,Outputs);
    	return (CancelOperation);
    }
    else if (MethodName == &quot;ConvertDate&quot;){
    	ConvertDate(Inputs, Outputs);
    	return (CancelOperation);
    }
    else if (MethodName == &quot;TransferOwnership&quot;){
    	TransferOwnership(Inputs, Outputs);
    	return (CancelOperation);
    }
    
     if(MethodName == &quot;CalcDueDate&quot;)
	{
	    CalcDueDate(Inputs, Outputs);
	    return (CancelOperation);
	}
    if(MethodName == &quot;ConcatProductBIP&quot;)
	{
	    ConcatProductBIP(Inputs, Outputs);
	    return (CancelOperation);
	}
	//Saurabh Dixit - CR - Fixed Line - Start
	if(MethodName == &quot;RemoveSoap&quot;)
	{
	    RemoveSoap(Inputs, Outputs);
	    return (CancelOperation);
	}
	//Saurabh Dixit - CR - Fixed Line - End
	
	if(MethodName == &quot;ParseStringBIP&quot;)
	{
	    ParseStringBIP(Inputs, Outputs);
	    return (CancelOperation);
	}
	else if(MethodName == &quot;UpdateAccountChildren&quot;)
	{
		UpdateAccountChildren(Inputs,Outputs);
		return (CancelOperation);
	}
	else if(MethodName == &quot;DeviceValueBIP&quot;)
	{
		DeviceValueBIP(Inputs,Outputs);
		return (CancelOperation);
	}
	if(MethodName == &quot;ConcatFixedBIP&quot;) //GPG: [8-Dec-14] New method added for CR 65405
	{
	    ConcatFixedBIP(Inputs, Outputs);
	    return (CancelOperation);
	}
	if(MethodName == &quot;FormSearchSpec&quot;)//[PK][CR#71468][20-1-15]
	{
		FormSearchSpec(Inputs,Outputs);
		return (CancelOperation);
	}
	if(MethodName == &quot;FormAgreementSearchSpec&quot;)//[PK][CR#68455][20-1-15]
	{
		FormAgreementSearchSpec(Inputs,Outputs);
		return (CancelOperation);
	}
   	if(MethodName == &quot;CheckAddressHistory&quot;)//[HY][CR#74245][12-5-15]
	{
		CheckAddressHistory(Inputs,Outputs);
		return (CancelOperation);
	}
	if(MethodName == &quot;CheckCurrentAddress&quot;)//[HY][CR#74245][12-5-15]
	{
		CheckCurrentAddress(Inputs,Outputs);
		return (CancelOperation);
	}
	if(MethodName == &quot;CheckAddressType&quot;)//[HY][CR#74245][12-5-15]
	{
		CheckAddressType(Inputs,Outputs);
		return (CancelOperation);
	}
	if(MethodName == &quot;GetCustomerRequestedDate&quot;)//	[SGUPTA]:[5/19/2015]:[15.2]:[CR72230]:Added for updating ETF calculation based on CRD.
	{
		GetCustomerRequestedDate(Inputs,Outputs);
		return(CancelOperation);
	}
	if(MethodName == &quot;CheckMandateFieldsPremise&quot;)//[PKHOT:04-June-2015:CR-75380:R15.2:Added new method for CreatePremise from interface]
	{
		CheckMandateFieldsPremise(Inputs,Outputs);
		return(CancelOperation);
	}
	if(MethodName == &quot;ActiveAssetAcc&quot;)
	{
		ActiveAssetAcc(Inputs,Outputs);
		return(CancelOperation);
	}
	if(MethodName == &quot;TVUpgradeCustom&quot;)//[SJANA:24-July-2015:QC:60162:R15.2:Added new method for TV Upgrade/Tarif Migration Modification]
	{
		TVUpgradeCustom (Inputs, Outputs);
		return(CancelOperation);
	}
	if(MethodName == &quot;Filter&quot;)
	{
		Filter(Inputs, Outputs);
		return(CancelOperation);
	}
	if(MethodName == &quot;GetWorkingDays&quot;) //[SSGUPTA:26-Aug-2015:QC:62209:R15.2:Created new method to calculate the only the working days]
	{
		GetWorkingDays(Inputs, Outputs);
		return(CancelOperation);
	}
	if(MethodName == &quot;ValidateRetentionInputs&quot;)//[PK]
	{
		ValidateRetentionInputs(Inputs,Outputs);
		return(CancelOperation);
	}
	if(MethodName == &quot;UpdateAssetWithCREResponse&quot;)//[AP]:07-Sept-2015:CR71178-Get_Retention_Eligibility:Added new method to update when there is TIL call.
	{
		UpdateAssetWithCREResponse(Inputs,Outputs);
		return(CancelOperation);
	}
	if(MethodName == &quot;UpdateAssetWithCRE_FLFB_Response&quot;)//[AP]:15-Sept-2015:CR71178-Get_Retention_Eligibility:Added new method to update when there is TIL call.
	{
		UpdateAssetWithCRE_FLFB_Response(Inputs,Outputs);
		return(CancelOperation);
	}
	if(MethodName == &quot;CheckTotalAmount&quot;) //[VF JINESH :21-Sep-2015:QC:62660:R15.2:Created new method to calculate the total amount]
	{
		CheckTotalAmount(Inputs, Outputs);
		return(CancelOperation);
	}
	if(MethodName == &quot;UptoTwoDecimal&quot;) //[12/7/2015][Avinash][Added for displaying data in GB from KB upto 2 decimal][QC:65209,64304]
   	{
       UptoTwoDecimal(Inputs, Outputs);
       return (CancelOperation);
   	}
   	if(MethodName == &quot;TV_NLFL&quot;) //[30/11/2015][HGUP][Added for CR90637]
   	{
       TV_NLFL(Inputs, Outputs);
       return (CancelOperation);
    }
    if(MethodName == &quot;CheckServiceRequest&quot;)//[NROUT][CR:PBI82326][Porting][21-10-2015][New Method created for: PBI82326]
	{
		CheckServiceRequest(Inputs, Outputs);
		return(CancelOperation);
	}
      if(MethodName == &quot;NetPenaltyAmount&quot;) //[VF JINESH :21-Sep-2015:QC:62660:R15.2:Created new method to calculate the total amount]
	{
		NetPenaltyAmount(Inputs, Outputs);
		return(CancelOperation);
	}
	 if(MethodName == &quot;CheckAddOn&quot;) //[VF JINESH :21-Sep-2015:QC:62660:R15.2:Created new method to calculate the total amount]
	{
		CheckAddOn(Inputs, Outputs);
		return(CancelOperation);
	}
	if(MethodName == &quot;CalculateDisconnectDiscount&quot;) //[VF JINESH :21-Sep-2015:QC:62660:R15.2:Created new method to calculate the total amount]
	{
		CalculateDisconnectDiscount(Inputs, Outputs);
		return(CancelOperation);
	}
	if(MethodName == &quot;GetBankDetails&quot;)
	{
		GetBankDetails(Inputs,Outputs);
		return(CancelOperation);
	}
	if(MethodName == &quot;UoMAllowanceCalc&quot;)//	Aniket S[11-July-2011]:CR 101796:New_UoM CCS_3.0
	{
		UoMAllowanceCalc(Inputs,Outputs);
		return(CancelOperation);
	}
	if(MethodName == &quot;UoMCalc&quot;)//	Aniket S[11-July-2011]:CR 101796:New_UoM CCS_3.0
	{
		UoMCalc(Inputs,Outputs);
		return(CancelOperation);
	}
	
	if(MethodName == &quot;LookupLOVDetails&quot;)//	Aniket S[11-July-2011]:CR 101796:New_UoM CCS_3.0
	{
		LookupLOVDetails(Inputs, Outputs);
		return(CancelOperation);
	}
	if(MethodName == &quot;CheckReconnectionItems&quot;)//[CR: 99867: Reconnection Order: R3.0]
	{
		CheckReconnectionItems(Inputs,Outputs);
		return(CancelOperation);
	}
	
	if(MethodName == &quot;GenericCreateSR&quot;) //SONIAC: ADded for CR91327
	{
		GenericCreateSR(Inputs,Outputs);
		return(CancelOperation);
	}
	if(MethodName == &quot;SIMSwapInactive&quot;)//[CR: 104767: SIM Swap Order]
	{
		SIMSwapInactive(Inputs,Outputs);
		return(CancelOperation);
	}
   	return (ContinueOperation);
}"
			   SEQUENCE="134"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="04/28/2011 11:50:46"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SetFieldValueCustom"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SetFieldValueCustom(Inputs, Outputs)
{
	try
	{
		var sId 		= Inputs.GetProperty(&quot;ObjId&quot;);
		var sSearchExpr = Inputs.GetProperty(&quot;SearchExpression&quot;);
		var sBusComp 	= Inputs.GetProperty(&quot;BusComponent&quot;);
		var sBusObj 	= Inputs.GetProperty(&quot;BusObject&quot;);
		var sFieldName 	= Inputs.GetProperty(&quot;FieldName&quot;);
		var ListFieldName = Inputs.GetProperty(&quot;FieldName&quot;).split(&quot;,&quot;);
		var sFieldValue = Inputs.GetProperty(&quot;CabledValue&quot;);
		var ListFieldValue = Inputs.GetProperty(&quot;CabledValue&quot;).split(&quot;,&quot;);
		var sFieldExpr 	= Inputs.GetProperty(&quot;ExpressionValue&quot;);
		var UpdateValueFieldNull = Inputs.GetProperty(&quot;UpdateValueFieldNull&quot;);
		
		var oBO 		= TheApplication().GetBusObject(sBusObj);
		var oBC 		= oBO.GetBusComp(sBusComp);
		
		var bRec 		= false;
		
		with(oBC)
		{
			ClearToQuery();			
	//		ActivateField(sFieldName);
			InvokeMethod(&quot;SetAdminMode&quot;, &quot;TRUE&quot;);
			for (var field in ListFieldName) 
				ActivateField(ListFieldName[field]);
			if(sFieldExpr != &quot;&quot; &amp;&amp; sFieldExpr != null)
			{
				ActivateField(sFieldExpr);
			}
			SetViewMode(AllView);
			if(sId != &quot;&quot; &amp;&amp; sId != null)
			{				
				SetSearchSpec(&quot;Id&quot;, &quot;&apos;&quot; + sId + &quot;&apos;&quot;);
			}
			else if (sSearchExpr != &quot;&quot; &amp;&amp; sSearchExpr != null)
			{
				SetSearchExpr(sSearchExpr);
			}
			else
			{
				TheApplication().RaiseErrorText(&quot;Not valid Search Expr&quot;);
			}
			ExecuteQuery(ForwardOnly);
			bRec = FirstRecord();
			while(bRec)
			{					 
				if(ListFieldName.length&gt;1)
				{				
					for (var i=0; i&lt;ListFieldName.length; i++)
					{
							if ( UpdateValueFieldNull != &quot;Y&quot; )
								SetFieldValue(ListFieldName[i], ListFieldValue[i]);
							else
							{
								if ( ListFieldValue[i] != &quot;&quot; ) 
									SetFieldValue(ListFieldName[i], ListFieldValue[i]);
							}
						}
				}
				else
				{
					if(sFieldExpr!=&quot;&quot;)
						SetFieldValue(sFieldName, GetFieldValue(sFieldExpr));
					else //if(sFieldValue!=&quot;&quot;)
						SetFieldValue(sFieldName, sFieldValue);
				}					
				WriteRecord();
				bRec = NextRecord();
			}
		}
	}
	catch(e)
	{
		Outputs.SetProperty(&quot;Custom Error&quot;,e.errText);
		throw(e); 
	}
	finally
	{		
		oBC = null;
		oBO = null;
		ListFieldName = null;
		ListFieldValue = null;
		sBusComp = null;
		sBusObj = null;
	}
}"
			   SEQUENCE="104"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="07/07/2011 16:24:08"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SetFieldValueNLFL"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SetFieldValueNLFL(Inputs, Outputs)
{
	try
	{
		var sId 		= Inputs.GetProperty(&quot;ObjId&quot;);
		var sSearchExpr = Inputs.GetProperty(&quot;SearchExpression&quot;);
		var sBusComp 	= Inputs.GetProperty(&quot;BusComponent&quot;);
		var sBusObj 	= Inputs.GetProperty(&quot;BusObject&quot;);
		var sFieldName 	= Inputs.GetProperty(&quot;FieldName&quot;);
		var ListFieldName = Inputs.GetProperty(&quot;FieldName&quot;).split(&quot;,&quot;);
		var sFieldValue = Inputs.GetProperty(&quot;CabledValue&quot;);
		var ListFieldValue = Inputs.GetProperty(&quot;CabledValue&quot;).split(&quot;,&quot;);
		var sFieldExpr 	= Inputs.GetProperty(&quot;ExpressionValue&quot;);
		var UpdateValueFieldNull = Inputs.GetProperty(&quot;UpdateValueFieldNull&quot;);
		var PartNumber = &quot;&quot;;
		
		var oBO 		= TheApplication().GetBusObject(sBusObj);
		var oBC 		= oBO.GetBusComp(sBusComp);
		
		var bRec 		= false;
		
		with(oBC)
		{
			ClearToQuery();			
	//		ActivateField(sFieldName);
			InvokeMethod(&quot;SetAdminMode&quot;, &quot;TRUE&quot;);
			for (var field in ListFieldName) 
				ActivateField(ListFieldName[field]);
			if(sFieldExpr != &quot;&quot; &amp;&amp; sFieldExpr != null)
			{
				ActivateField(sFieldExpr);
				ActivateField(&quot;Part Number&quot;);
			}
			SetViewMode(AllView);
			if(sId != &quot;&quot; &amp;&amp; sId != null)
			{				
				SetSearchSpec(&quot;Id&quot;, &quot;&apos;&quot; + sId + &quot;&apos;&quot;);
			}
			else if (sSearchExpr != &quot;&quot; &amp;&amp; sSearchExpr != null)
			{
				SetSearchExpr(sSearchExpr);
			}
			else
			{
				TheApplication().RaiseErrorText(&quot;Not valid Search Expr&quot;);
			}
			ExecuteQuery(ForwardOnly);
			bRec = FirstRecord();
			while(bRec)
			{					 
				PartNumber = GetFieldValue(&quot;Part Number&quot;);
				if (TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_PART_NUMBERS&quot;, PartNumber) == &quot;HANDSET&quot;)
				{
					if(ListFieldName.length&gt;1)
					{				
						for (var i=0; i&lt;ListFieldName.length; i++)
						{
								if ( UpdateValueFieldNull != &quot;Y&quot; )
									SetFieldValue(ListFieldName[i], ListFieldValue[i]);
								else
								{
									if ( ListFieldValue[i] != &quot;&quot; ) 
										SetFieldValue(ListFieldName[i], ListFieldValue[i]);
								}
							}
					}
					else
					{
						if(sFieldExpr!=&quot;&quot;)
							SetFieldValue(sFieldName, GetFieldValue(sFieldExpr));
						else //if(sFieldValue!=&quot;&quot;)
							SetFieldValue(sFieldName, sFieldValue);
					}
				}
				WriteRecord();
				bRec = NextRecord();
			}
		}
	}
	catch(e)
	{
		Outputs.SetProperty(&quot;Custom Error&quot;,e.errText);
		throw(e); 
	}
	finally
	{		
		oBC = null;
		oBO = null;
		ListFieldName = null;
		ListFieldValue = null;
		sBusComp = null;
		sBusObj = null;
	}
}"
			   SEQUENCE="105"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="06/23/2014 06:42:23"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SetJobNum"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SetJobNum(Inputs,Outputs)
{
	var Parallel_Jobs = Inputs.GetProperty(&quot;Parallel_Jobs&quot;);
	var NumOfOrdersLOV = Inputs.GetProperty(&quot;NumOfOrdersLOV&quot;);
	var NumOfOrders = 0;
	var BOPreAct = TheApplication().GetBusObject(&quot;VF Pre Activation Order BO&quot;);
	var	BCPreAct = BOPreAct.GetBusComp(&quot;VF Pre Activation Order BC&quot;);
	var errorMess = &quot;&quot;;
	var sSysdate = &quot;&quot;;
	var i = 0;
	
	var searchExpr = &quot;[Status] = &apos;New&apos; AND [Job] IS NULL&quot;;

	try
	{
		with(BCPreAct)
		{
			ClearToQuery();
			ActivateField(&quot;Time_Stamp&quot;);
			SetViewMode(AllView);
			SetSearchExpr(searchExpr);
			ExecuteQuery(ForwardBackward);
			NumOfOrders = CountRecords();
			var nextRecord = FirstRecord();
			var RecordsToUpdate = Math.min(NumOfOrders, NumOfOrdersLOV);
			var RecordsForJob = RecordsToUpdate/Parallel_Jobs;
			var JobNum	= 1;
			
			while(nextRecord)
			{
				i = i+1;
				Clib.strftime(sSysdate, &quot;%m/%d/%Y %H:%M:%S&quot;, Clib.localtime(Clib.time()));
				SetFieldValue(&quot;Job&quot;, JobNum);
				SetFieldValue(&quot;Time_Stamp&quot;,sSysdate);
				WriteRecord();
				if (JobNum &lt; Parallel_Jobs)
				{
					JobNum = JobNum + 1;
				}
				else
				{
					JobNum = 1;
				}		
				
				nextRecord = NextRecord();

				if (i == RecordsToUpdate)
				{
					nextRecord = false;
				}
			}

		}
	
	}
	catch(e)
	{
		errorMess = e.toString();
	}
	finally
	{
		BCPreAct = null;
		BOPreAct = null;
		Outputs.SetProperty(&quot;RecordsToUpdate&quot;,RecordsToUpdate);
		Outputs.SetProperty(&quot;RecordsForJob&quot;,RecordsForJob);
		Outputs.SetProperty(&quot;Error Message&quot;,errorMess);
	}
}"
			   SEQUENCE="106"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="11/27/2012 17:05:40"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SetPromIntegId"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SetPromIntegId(Inputs, Outputs)
{
	try
	{
		var OrderId = Inputs.GetProperty(&quot;Object Id&quot;);
		var OrderBO = TheApplication().GetBusObject(&quot;VF_UK_BO_NoLink&quot;);
		var OrderBC = OrderBO.GetBusComp(&quot;Order Entry - Line Items (Simple)&quot;);
		var OrdBO 	= TheApplication().GetBusObject(&quot;VF_UK_BO_NoLink&quot;);
		var OrdBC 	= OrdBO.GetBusComp(&quot;Order Entry - Line Items (Simple)&quot;);
		var record	= &quot;&quot;;
		var idProm	= &quot;&quot;;
		var promIntegId = &quot;&quot;;
		
		with(OrderBC)
		{
			ClearToQuery();
			SetViewMode(AllView);
			SetSearchSpec(&quot;Order Header Id&quot;, &quot;&apos;&quot; + OrderId + &quot;&apos;&quot;);
			SetSearchSpec(&quot;Product Type Code&quot;, &quot;Promotion&quot;);
			ExecuteQuery(ForwardOnly);
			if (FirstRecord())
			{
				idProm = GetFieldValue(&quot;Id&quot;);
				with(OrdBC)
				{
					ClearToQuery();
					SetViewMode(AllView);
					ActivateField(&quot;Prod Prom Instance Id&quot;);
					SetSearchSpec(&quot;Order Header Id&quot;, &quot;&apos;&quot; + OrderId + &quot;&apos;&quot;);
					ExecuteQuery(ForwardOnly);
					record = FirstRecord();
					while (record)
					{
						promIntegId = GetFieldValue(&quot;Prod Prom Instance Id&quot;);
						if (promIntegId != &quot;&quot; &amp;&amp; promIntegId != null)
						{
							SetFieldValue(&quot;Prod Prom Instance Id&quot;, idProm);
							WriteRecord();
						}
						record = NextRecord();
					}
				}
			}
		}
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		OrdBC = null;
		OrdBO = null;
		OrderBC = null;
		OrderBO = null;
	}
}"
			   SEQUENCE="107"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="12/21/2012 09:28:32"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SubmitSetDate"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SubmitSetDate(Inputs,Outputs)
{
	try
	{
		var sBo = TheApplication().ActiveBusObject();
		var sBc = sBo.GetBusComp(&quot;Order Entry - Orders&quot;);
		sBc.WriteRecord();
		var OrderId = sBc.GetFieldValue(&quot;Id&quot;);
		var InpBS = TheApplication().NewPropertySet();
		var OutBS = TheApplication().NewPropertySet();
		InpBS.SetProperty(&quot;BusinessObject&quot;, &quot;VF_UK_BO_NoLink&quot;);
		InpBS.SetProperty(&quot;BusinessComponent&quot;, &quot;MACD Order Entry - Orders&quot;);
		InpBS.SetProperty(&quot;ListaField&quot;, &quot;TimeStamp&quot;);
		InpBS.SetProperty(&quot;Id&quot;, OrderId);
		GenericQueryOnBC(InpBS, OutBS);
		var tm = OutBS.GetProperty(&quot;TimeStamp&quot;);
		var data = new Date(tm);
		var today = ((data.getMonth() + 1) + &quot;/&quot; + data.getDate() +&quot;/&quot; + data.getFullYear()+ &quot; &quot;+ data.getHours() + &quot;:&quot; +data.getMinutes()+&quot;:&quot; + data.getSeconds());
		sBc.SetFieldValue(&quot;VF Submit Date&quot;, today);
		sBc.WriteRecord();
		var Log = false;
		var Logging = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_LOGGING_MONITORING&quot;, &quot;Monitoring_Submit&quot;);
		if (Logging != null &amp;&amp; Logging != &quot;&quot; &amp;&amp; ToNumber(Logging) &gt; 0)
			Log = true;
		Outputs.SetProperty(&quot;Log&quot;, Log);
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		InpBS = null;
		OutBS = null;
		data=null;
		today=null;
		Logging=null;
		sBc=null;// Oracle Review Memory Leak Deallocation 31/07/2014
		sBo=null;// Oracle Review Memory Leak Deallocation 31/07/2014
	}
}"
			   SEQUENCE="109"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="10/02/2013 17:26:09"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="TVUpgradeCustom"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function TVUpgradeCustom (Inputs, Outputs)
{
/*************** TV Upgrade Custom ********************************************************************
	    		Name : Sandip Kumar Jana
	    		Date :  24-JUL-2015
 Fuction Description : It is to delete one extra STB and associate one STB with Target Promotion.
*******************************************************************************************************/
	try
	{
		var oOrderBO :BusObject 	= TheApplication().GetBusObject(&quot;VF_UK_BO_NoLink&quot;);
		var oOLIBC :BusComp  		= oOrderBO.GetBusComp(&quot;VF Order Entry - Line Items Light&quot;);

		var sOldPromoIntegId 		= Inputs.GetProperty(&quot;OldPromInstanceId&quot;);
		var sHeaderId 				= Inputs.GetProperty(&quot;OrderId&quot;);	
		var PartNumber = new Array;
		var PartNumberAdd= &quot;&quot;;
		var PartNumberUpdate = &quot;&quot;;
		var vIsReturn = &quot;&quot;;	
		var PackageId=&quot;&quot;;
		var PromotionId= &quot;&quot;;
		var vActionCode = &quot;&quot;;
		var i = 0;
		var vIsReturn = &quot;&quot;;
		with(oOLIBC)
		{
	 	 if (sHeaderId != null &amp;&amp; sHeaderId != &quot;&quot;)
			{	
					SetViewMode(AllView);
					ClearToQuery();
					ActivateField(&quot;Product Type Code&quot;);
					ActivateField(&quot;Action Code&quot;);
					ActivateField(&quot;Part Number&quot;);
					ActivateField(&quot;Product Id&quot;);
					ActivateField(&quot;VF_Return_Flg&quot;);
					SetSearchSpec(&quot;Order Header Id&quot;, sHeaderId);
					SetSearchSpec(&quot;Product Type Code&quot;, &quot;Promotion&quot;);
					ExecuteQuery(ForwardOnly);
					var count = CountRecords();
					var isR = FirstRecord();
					while(isR)
					{						
						PartNumber[i] = GetFieldValue(&quot;Part Number&quot;);
						i++;
						if(GetFieldValue(&quot;Action Code&quot;) == &quot;Add&quot;)
						{
						PackageId = GetFieldValue(&quot;Product Id&quot;);
						PromotionId = GetFieldValue(&quot;Id&quot;);
						vIsReturn = GetFieldValue(&quot;VF_Return_Flg&quot;);
						}						
					    isR = NextRecord();
					}
				}
			}
/******************** TV Tarif Migration/Upgrade Paths check ************************************/
        var PartNumberAdd = PartNumber[0];
        var PartNumberUpdate = PartNumber[1];
        var PartNumCalc = PartNumberAdd + &quot;_&quot; + PartNumberUpdate + &quot;_&quot; + vIsReturn;
        var vPathCheck = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_TV_MIGRATION_PATH&quot;, PartNumCalc);
        if(vPathCheck == &quot;Y&quot;)
          {
          TV_DeleteSTB (sHeaderId, PackageId, PromotionId, &quot;Add&quot;);
          }
	
		}
	catch(e)
	{
		throw(e);
	}
	finally
	{
	    vPathCheck      = null;
	    PartNumCalc     = null;
	    PartNumberUpdate= null;
	    PartNumberAdd   = null;
	    isR 			= null;
		oOLIBC			= null;
		oOrderBO		= null;
	}
}"
			   SEQUENCE="115"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="07/25/2015 15:31:39"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="TV_DeleteSTB"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function TV_DeleteSTB (OrderId, PackageId, PromotionId, ActionCode)
{
/*********** TV Upgrade Custom  ********************************************************************
	    		Name : Sandip Kumar Jana
	    		Date :  24-JUL-2015
 Fuction Description : It is to delete one extra STB and associate one STB with Target Promotion.
*******************************************************************************************************/
	try
	{
		var oOrderBO :BusObject 	= TheApplication().GetBusObject(&quot;VF_UK_BO_NoLink&quot;);
		var oOLIBC :BusComp  		= oOrderBO.GetBusComp(&quot;VF Order Entry - Line Items Light&quot;);
		var PrmInstanceId=&quot;&quot;;
		var flg = &quot;&quot;;
		var STBCount = &quot;&quot;;
		var i =1;
		
		with(oOLIBC)
		{
	 	 if (OrderId != null &amp;&amp; OrderId != &quot;&quot;)
			{	
					SetViewMode(AllView);
					ClearToQuery();
					ActivateField(&quot;Product&quot;);
					ActivateField(&quot;Prod Prom Instance Id&quot;);
					ActivateField(&quot;Prod Prom Id&quot;);
					ActivateField(&quot;Action Code&quot;);
					SetSearchSpec(&quot;Order Header Id&quot;, OrderId);
					//SetSearchSpec(&quot;Action Code&quot;, ActionCode);
					SetSearchSpec(&quot;Product&quot;, &quot;Set Top Box&quot;);
					ExecuteQuery(ForwardOnly);
					STBCount = CountRecords();
					flg = &quot;N&quot;;
					while(i &lt;= STBCount)
						{
						
						PrmInstanceId = GetFieldValue(&quot;Prod Prom Instance Id&quot;);
						if((PrmInstanceId == null || PrmInstanceId == &quot;&quot;) &amp;&amp; (GetFieldValue(&quot;Action Code&quot;) == &quot;Update&quot;))
							{
							SetFieldValue(&quot;Prod Prom Instance Id&quot;, PromotionId);
							SetFieldValue(&quot;Prod Prom Id&quot;, PackageId);
							WriteRecord();
							}
						if(GetFieldValue(&quot;Action Code&quot;) == ActionCode &amp;&amp; flg == &quot;N&quot;)
						   {
						   flg = &quot;Y&quot;;
						   DeleteRecord();
						   }
						   i++;
						   NextRecord();
					/*	if (flg == &quot;N&quot;)
						   {
						    i++;
							FirstRec = NextRecord();
						   }*/	
						}
				}
			}
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		oOLIBC			= null;
		oOrderBO		= null;
	}
}"
			   SEQUENCE="113"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="07/25/2015 15:31:39"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="TV_NLFL"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function TV_NLFL(Inputs,Outputs)
{
/*************** TV Upgrade Custom ********************************************************************
Name : Himanshu Gupta
Date :  26-NOV-2015
CR	 : 90637 	
Fuction Description : It is to delete one extra STB and update action codes
*******************************************************************************************************/
	try
	{
		var oOrderBO :BusObject 	= TheApplication().GetBusObject(&quot;VF_UK_BO_NoLink&quot;);
		var oOLIBC :BusComp  		= oOrderBO.GetBusComp(&quot;VF Order Entry - Line Items Light&quot;);
		var sReturn					= Inputs.GetProperty(&quot;ValueSubAction&quot;);
		var sHeaderId 				= Inputs.GetProperty(&quot;OrderId&quot;);
		var isROU					= Inputs.GetProperty(&quot;isROU&quot;);	
		var partNumberFirstPromotion = &quot;&quot;;
		var partNumberSecondPromotion = &quot;&quot;;
		var targetPromotionName = &quot;&quot;;
		var targetPromotionInstance = &quot;&quot;;
		var promoAssetIntegrationId = &quot;&quot;;
		var stbInAdd =  new Array();
		var stbInUpdate = new Array();
		var spartNum = new Array(&apos;086625&apos;,&apos;109068&apos;);
		var checkFlag = &quot;&quot;;
		var sourceMultiQty = &quot;&quot;;
		var targetMultiQty = &quot;&quot;;
		var orderType = &quot;&quot;;
		var addService = &quot;&quot;,delService = &quot;&quot;,updService = &quot;&quot;;
		var sAdd = 0,sUpdate = 0,sDelete = 0;
		var sourceMultiQtyfinal = &quot;&quot;;
		var targetMultiQtyfinal = &quot;&quot;;
		var searchExpr = &quot;&quot;;
		var sourcePromotionName = &quot;&quot;;
		var promIdArr = new Array;
		var promNameArr = new Array;

		if(sHeaderId != null &amp;&amp; sHeaderId != &quot;&quot;)
		{
			with(oOLIBC)
			{

				SetViewMode(AllView);
				ClearToQuery();
				ActivateField(&quot;Action Code&quot;);
				ActivateField(&quot;Part Number&quot;);
				ActivateField(&quot;Product Type Code&quot;);
				ActivateField(&quot;Integration Id&quot;);
				ActivateField(&quot;Asset Integration Id&quot;);
				SetSearchSpec(&quot;Order Header Id&quot;, sHeaderId);
				ExecuteQuery(ForwardOnly);
				var sRecord1 = FirstRecord();
				while(sRecord1)
				{
					var sActionCode = GetFieldValue(&quot;Action Code&quot;);
					var sPartNumber = GetFieldValue(&quot;Part Number&quot;);
					var sProductType = GetFieldValue(&quot;Product Type Code&quot;);
					if(sActionCode == &quot;Delete&quot; &amp;&amp; sProductType == &quot;Promotion&quot; &amp;&amp; TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_TV_PROMOTION&quot;,sPartNumber) == &quot;Y&quot;)
					{
						partNumberFirstPromotion = sPartNumber;
						sourcePromotionName =  GetFieldValue(&quot;Product Id&quot;);
						promoAssetIntegrationId = GetFieldValue(&quot;Asset Integration Id&quot;);
						sourceMultiQtyfinal = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_TV_PROMOTION_MR_QTY&quot;,sPartNumber);
					}
					if(sActionCode == &quot;Add&quot; &amp;&amp; sProductType == &quot;Promotion&quot; &amp;&amp; TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_TV_PROMOTION&quot;,sPartNumber) == &quot;Y&quot;)
					{
						partNumberSecondPromotion = sPartNumber;
						targetPromotionName =  GetFieldValue(&quot;Product Id&quot;);
						targetPromotionInstance = GetFieldValue(&quot;Integration Id&quot;);
						targetMultiQtyfinal = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_TV_PROMOTION_MR_QTY&quot;,sPartNumber);
					}
					sRecord1 = NextRecord();
				}
			}
		for(i=0;i&lt;2;i++)
		{
			if(spartNum[i] == &quot;086625&quot;)
			{
				searchExpr = &quot;[Order Header Id] = &apos;&quot; + sHeaderId + &quot;&apos; AND ([Part Number] = &apos;&quot; + spartNum[i] + &quot;&apos;  OR [Part Number] = &apos;087816&apos;)&quot;; //[HGUP:09-03-2016:R15.3:Changes done for Bailment Set Top Box Issue -&gt; CST -15.3-74] 
				sourceMultiQty = Number(sourceMultiQtyfinal) + 1;
				targetMultiQty = Number(targetMultiQtyfinal) + 1;
			}
			else
			{
				searchExpr = &quot;[Order Header Id] = &apos;&quot; + sHeaderId + &quot;&apos; AND [Part Number] = &apos;&quot; + spartNum[i] + &quot;&apos;&quot;; //[HGUP:09-03-2016:R15.3:Changes done for Bailment Set Top Box Issue -&gt; CST -15.3-74]
				sourceMultiQty = Number(sourceMultiQtyfinal);
				targetMultiQty = Number(targetMultiQtyfinal);
				sAdd = 0;
				sUpdate = 0;
				sDelete = 0;
			}

			if(sourceMultiQty == targetMultiQty)
			{
				orderType = &quot;SAME&quot;;
				addService = targetMultiQty - sourceMultiQty;
				delService = targetMultiQty - sourceMultiQty;
				updService = sourceMultiQty;
			}
			else if(sourceMultiQty &gt; targetMultiQty)
			{
				orderType = &quot;DOWNGRADE&quot;;
				addService = 0;
				delService = sourceMultiQty - targetMultiQty; 
				updService = targetMultiQty;
			}
			else if(sourceMultiQty &lt; targetMultiQty)
			{
				orderType = &quot;UPGRADE&quot;;
				addService = targetMultiQty - sourceMultiQty; 
				delService = 0;
				updService = sourceMultiQty;//sourceMultiQty;
			}
			else
			{
				orderType = &quot;&quot;;
			}

			if(orderType != null &amp;&amp; orderType!= &quot;&quot;)
			{
				switch(orderType)
				{
					case &quot;SAME&quot;:
					with(oOLIBC)
					{
						SetViewMode(AllView);
						ClearToQuery();
						ActivateField(&quot;Prod Prom Id&quot;);
						ActivateField(&quot;Prod Prom Instance Id&quot;);
						ActivateField(&quot;Action Code&quot;);
						//ActivateField(&quot;VF Asset Prod Prom Rule Id&quot;);
						//ActivateField(&quot;Prod Prom Rule Id&quot;);
						SetSearchExpr(searchExpr);
						//SetSearchSpec(&quot;Order Header Id&quot;, &quot;&apos;&quot; + sHeaderId + &quot;&apos;&quot;);
					//	SetSearchSpec(&quot;Part Number&quot;,spartNum[i]);
						ExecuteQuery(ForwardOnly);
						var countRecords = CountRecords();
						var sRecord = FirstRecord();
						while(sRecord)
						{
							var sAction = GetFieldValue(&quot;Action Code&quot;); 
							if(sAction == &quot;Update&quot; &amp;&amp; sUpdate &lt; updService)
							{
								sUpdate++;
								SetFieldValue(&quot;Prod Prom Id&quot;,targetPromotionName);
								SetFieldValue(&quot;Prod Prom Instance Id&quot;,targetPromotionInstance);
								WriteRecord();
								sRecord = NextRecord();
							}
							else if(sAction == &quot;Delete&quot; &amp;&amp; sUpdate &lt; updService)
							{
								//var promRuleId = &quot;&quot;;
								sUpdate++;
								SetFieldValue(&quot;Action Code&quot;,&quot;Update&quot;);
							/*	if(sourcePromotionName == targetPromotionName &amp;&amp; sReturn == &quot;NLFL&quot;)//[HGUP:22-03-2016:R15.3:Condition added for Defect 67776]
								{
									promRuleId = GetFieldValue(&quot;VF Asset Prod Prom Rule Id&quot;);
								}*/
								SetFieldValue(&quot;Prod Prom Id&quot;,targetPromotionName);
								SetFieldValue(&quot;Prod Prom Instance Id&quot;,targetPromotionInstance);
							//	SetFieldValue(&quot;Prod Prom Rule Id&quot;,promRuleId);
								WriteRecord();
								sRecord = NextRecord();
							}
							else if(sAction == &quot;Add&quot; &amp;&amp; sUpdate &lt; updService)
							{
								sUpdate++;
								SetFieldValue(&quot;Action Code&quot;,&quot;Update&quot;);
								SetFieldValue(&quot;Prod Prom Id&quot;,targetPromotionName);
								SetFieldValue(&quot;Prod Prom Instance Id&quot;,targetPromotionInstance);
								WriteRecord();
								sRecord = NextRecord();
							}
							else if(sUpdate == updService)
							{
								sRecord = SetFieldValue(&quot;Action Code&quot;,&quot;Suspend&quot;);
								WriteRecord(); //[HGUP:R15.3:11/03/2016:Added for defect 67449]
								sRecord = NextRecord();
							}
						}
					}
					break;

					case &quot;DOWNGRADE&quot;:
					with(oOLIBC)
					{
						SetViewMode(AllView);
						ClearToQuery(); 
						ActivateField(&quot;Prod Prom Id&quot;);
						ActivateField(&quot;Prod Prom Instance Id&quot;);
						ActivateField(&quot;Action Code&quot;);
						SetSearchExpr(searchExpr);
						//SetSearchSpec(&quot;Order Header Id&quot;, &quot;&apos;&quot; + sHeaderId + &quot;&apos;&quot;);
					//	SetSearchSpec(&quot;Part Number&quot;,spartNum[i]);
						
						ExecuteQuery(ForwardOnly);
						var sRecord = FirstRecord();
						var cn = CountRecords();
						while(sRecord)
						{
							var sAction = GetFieldValue(&quot;Action Code&quot;);
							if(sAction == &quot;Delete&quot; &amp;&amp; sDelete &lt; delService)
							{
								sDelete++;
								sRecord = NextRecord();
							}
							else if(sAction == &quot;Update&quot; &amp;&amp; sUpdate &lt; updService)
							{
								sUpdate++;
								SetFieldValue(&quot;Prod Prom Id&quot;,targetPromotionName);
								SetFieldValue(&quot;Prod Prom Instance Id&quot;,targetPromotionInstance);
								WriteRecord();
								sRecord = NextRecord();	
							}
							else if(sAction == &quot;Update&quot; &amp;&amp; sUpdate == updService &amp;&amp; sDelete &lt; delService)
							{
								sDelete++;
								SetFieldValue(&quot;Action Code&quot;,&quot;Delete&quot;);
								SetFieldValue(&quot;Prod Prom Id&quot;,&quot;&quot;);
								SetFieldValue(&quot;Prod Prom Instance Id&quot;,&quot;&quot;);
								WriteRecord(); 
								sRecord = NextRecord();
							}
							else if(sAction == &quot;Delete&quot; &amp;&amp; sDelete == delService &amp;&amp; sUpdate &lt; updService)
							{
								sUpdate++;
								SetFieldValue(&quot;Action Code&quot;,&quot;Update&quot;);
								SetFieldValue(&quot;Prod Prom Id&quot;,targetPromotionName);
								SetFieldValue(&quot;Prod Prom Instance Id&quot;,targetPromotionInstance);
								WriteRecord();
								sRecord = NextRecord();
							}
							else if(sAction == &quot;Add&quot; &amp;&amp; sDelete == delService &amp;&amp; sUpdate == updService)
							{
								sRecord = SetFieldValue(&quot;Action Code&quot;,&quot;Suspend&quot;);
								WriteRecord();		//[HGUP:R15.3:11/03/2016:Added for defect 67449]						
								sRecord = NextRecord();
							}
							else if(sAction == &quot;Delete&quot; &amp;&amp; sDelete == delService &amp;&amp; sUpdate == updService)
							{
								sRecord = SetFieldValue(&quot;Action Code&quot;,&quot;Suspend&quot;);
								WriteRecord();		//[HGUP:R15.3:11/03/2016:Added for defect 67449]						
								sRecord = NextRecord();
							}
						}
					}
					break;
					case &quot;UPGRADE&quot;:
					with(oOLIBC)
					{
						SetViewMode(AllView);
						ClearToQuery();
						ActivateField(&quot;Prod Prom Id&quot;);
						ActivateField(&quot;Prod Prom Instance Id&quot;);
						ActivateField(&quot;Action Code&quot;);
						SetSearchExpr(searchExpr);
						//SetSearchSpec(&quot;Order Header Id&quot;, &quot;&apos;&quot; + sHeaderId + &quot;&apos;&quot;);
					//	SetSearchSpec(&quot;Part Number&quot;,spartNum[i]);
						ExecuteQuery(ForwardOnly);
						//var countRecords = CountRecords();
						var sRecord = FirstRecord();
						while(sRecord)	
						{
							var sAction = GetFieldValue(&quot;Action Code&quot;);
							if(sAction == &quot;Add&quot; &amp;&amp; sAdd &lt; addService)
							{
								sAdd++;
								sRecord = NextRecord();
							}
							else if(sUpdate &lt; updService) 
							{
								sUpdate++;
								SetFieldValue(&quot;Action Code&quot;,&quot;Update&quot;);
								SetFieldValue(&quot;Prod Prom Id&quot;,targetPromotionName);
								SetFieldValue(&quot;Prod Prom Instance Id&quot;,targetPromotionInstance);
								WriteRecord();
								sRecord = NextRecord();
							}
							else if(sAdd == addService &amp;&amp; sUpdate == updService)
							{
								sRecord = SetFieldValue(&quot;Action Code&quot;,&quot;Suspend&quot;);
								WriteRecord(); //[HGUP:R15.3:11/03/2016:Added for defect 67449]
								sRecord = NextRecord();
							}
						}
					}
					break;
				}
			}		
		}
		}

		if(isROU == &quot;Y&quot;)//[HGUP:15-01-2016:R15.3:Code added to implement the returning of latetly upgraded STBs]
		{
			var originalOrderNumber = &quot;&quot;,i = 0,j = 0;
			var oOLIBC4 :BusComp = 	oOrderBO.GetBusComp(&quot;VF Asset Mgmt - Asset (Order Mgmt) Light&quot;);
			with(oOLIBC4)
			{
				SetViewMode(AllView);
				ClearToQuery();
				ActivateField(&quot;Original Order Id&quot;);
				SetSearchSpec(&quot;Integration Id&quot;, &quot;&apos;&quot; + promoAssetIntegrationId + &quot;&apos;&quot;);
				ExecuteQuery(ForwardOnly);
				var sRecord9 = FirstRecord();
				if(sRecord9)
				{
					originalOrderNumber = GetFieldValue(&quot;Original Order Id&quot;);
				}
			}
			if(originalOrderNumber !=null &amp;&amp; originalOrderNumber != &quot;&quot;)
			{
				with(oOLIBC)//Ritu |R15.3 |QC67574 |Changed from oOLIBC3 to oOLIBC
				{
					SetViewMode(AllView);
					ClearToQuery();
					ActivateField(&quot;Service Id&quot;);
					ActivateField(&quot;Product&quot;);
					ActivateField(&quot;Action Code&quot;);
					SetSearchSpec(&quot;Order Header Id&quot;, &quot;&apos;&quot; + originalOrderNumber + &quot;&apos;&quot;);
					ExecuteQuery(ForwardOnly);						
					var sRecord10 = CountRecords();
					while(sRecord10)
					{
						if(GetFieldValue(&quot;Product&quot;) == &quot;Set Top Box&quot; &amp;&amp; GetFieldValue(&quot;Action Code&quot;) == &quot;Update&quot;)
						{
							stbInUpdate[i] = GetFieldValue(&quot;Service Id&quot;);
							i++;
						}
						if(GetFieldValue(&quot;Product&quot;) == &quot;Set Top Box&quot; &amp;&amp; GetFieldValue(&quot;Action Code&quot;) == &quot;Add&quot;)
						{
							stbInAdd[j] = GetFieldValue(&quot;Service Id&quot;);
							j++;
						}
						sRecord10 = NextRecord();
					}
					SetViewMode(AllView);
					ClearToQuery();
					ActivateField(&quot;Service Id&quot;);
					ActivateField(&quot;Product&quot;);
					ActivateField(&quot;Action Code&quot;);
					ActivateField(&quot;Prod Prom Rule Id&quot;);
					ActivateField(&quot;Product&quot;);
					SetSearchSpec(&quot;Order Header Id&quot;, &quot;&apos;&quot; + sHeaderId + &quot;&apos;&quot;);
					SetSearchSpec(&quot;Product&quot;,&quot;Set Top Box&quot;);
					ExecuteQuery(ForwardOnly);						
					var sRecord11 = FirstRecord();
					while(sRecord11)
					{
						checkFlag = &quot;N&quot;;
						for(var k =0;k&lt;=i-1;k++)
						{
							if(GetFieldValue(&quot;Service Id&quot;) == stbInUpdate[k])
							{
								checkFlag = &quot;Y&quot;;
								SetFieldValue(&quot;Action Code&quot;,&quot;Update&quot;);
								SetFieldValue(&quot;Prod Prom Id&quot;,targetPromotionName);
								SetFieldValue(&quot;Prod Prom Instance Id&quot;,targetPromotionInstance);
								WriteRecord();
								
							}
						}
						if(checkFlag != &quot;Y&quot; &amp;&amp; GetFieldValue(&quot;Service Id&quot;) != &quot;&quot; &amp;&amp; GetFieldValue(&quot;Service Id&quot;) != null)
						{
							SetFieldValue(&quot;Action Code&quot;,&quot;Delete&quot;);
							SetFieldValue(&quot;Prod Prom Id&quot;,&quot;&quot;);
							SetFieldValue(&quot;Prod Prom Instance Id&quot;,&quot;&quot;);
							if(GetFieldValue(&quot;Prod Prom Rule Id&quot;) != &quot;&quot; &amp;&amp; GetFieldValue(&quot;Prod Prom Rule Id&quot;) != null) //[HGUP:R15.3:To Update the Prom Prom Rule Id in case of ROU]
							{
								var productName = GetFieldValue(&quot;Product&quot;);
								var promId = GetFieldValue(&quot;Prod Prom Rule Id&quot;);
								promIdArr.push(promId);
								promNameArr.push(productName);
							}
							SetFieldValue(&quot;Prod Prom Rule Id&quot;,&quot;&quot;);
							WriteRecord();
						}

						sRecord11 = NextRecord();
					}

				}
			}
		}
		
		with(oOLIBC)
		{
			SetViewMode(AllView);
			ActivateField(&quot;Prod Prom Rule Id&quot;);
			ActivateField(&quot;Product&quot;);
			ClearToQuery();
			SetSearchSpec(&quot;Order Header Id&quot;, &quot;&apos;&quot; + sHeaderId + &quot;&apos;&quot;);
			SetSearchSpec(&quot;Product Type Code&quot;,&quot;Product&quot;);
			SetSearchSpec(&quot;Action Code&quot;,&quot;Suspend&quot;);
			SetSearchSpec(&quot;Prod Prom Rule Id&quot;,&quot;IS NOT NULL&quot;);
			ExecuteQuery(ForwardOnly);
			var sRecord = FirstRecord();
			while(sRecord)
			{
				var productName = GetFieldValue(&quot;Product&quot;);
				var promId = GetFieldValue(&quot;Prod Prom Rule Id&quot;);
				promIdArr.push(promId);
				promNameArr.push(productName);
				sRecord = NextRecord();
			}
			
		}
		var sArrayLength = promIdArr.length;
		if(sArrayLength!=null  &amp;&amp; sArrayLength != &quot;&quot; &amp;&amp; sArrayLength!=0)
		{
		with(oOLIBC)
		{
	
			SetViewMode(AllView);
			ActivateField(&quot;Product&quot;);
			ActivateField(&quot;Prod Prom Rule Id&quot;);
			ClearToQuery();
			SetSearchSpec(&quot;Order Header Id&quot;, &quot;&apos;&quot; + sHeaderId + &quot;&apos;&quot;);
			SetSearchSpec(&quot;Action Code&quot;,&quot;Update&quot;);
			SetSearchSpec(&quot;Product Type Code&quot;,&quot;Product&quot;);
			SetSearchSpec(&quot;Prod Prom Rule Id&quot;,&quot;IS NULL&quot;);
			ExecuteQuery(ForwardOnly);
			var sRecord = FirstRecord();
			var counter = &quot;&quot;;
			while(sRecord)
			{
				var productName = GetFieldValue(&quot;Product&quot;);
				for(counter=0;counter&lt;sArrayLength;counter++)
				{
					var checkFlag2 = &quot;N&quot;;
					var productNameTemp = promNameArr[counter];
					if(productName == productNameTemp &amp;&amp; productNameTemp != &quot;0000&quot;)
					{
						SetFieldValue(&quot;Prod Prom Rule Id&quot;,promIdArr[counter]);
						WriteRecord();
						promNameArr[counter] = &quot;0000&quot;;
						checkFlag2 = &quot;Y&quot;;
					}
					if(checkFlag2 == &quot;Y&quot;)
					{
						break;
					}
				}
				sRecord = NextRecord();
				
			}
			
		}
		}
		
		
		with(oOLIBC)
		{
			SetViewMode(AllView);
			ClearToQuery();
			SetSearchSpec(&quot;Order Header Id&quot;, &quot;&apos;&quot; + sHeaderId + &quot;&apos;&quot;);
			SetSearchSpec(&quot;Action Code&quot;,&quot;Suspend&quot;);
			ExecuteQuery(ForwardOnly);
			var sRecord = FirstRecord();
			var count1 = CountRecords();
			while(sRecord &amp;&amp; count1&gt;0)
			{
				count1--;
				DeleteRecord();
			}
			
		}

	}	

	catch(e)
	{
		var errorMess = &quot;Error while executing TV_NLFL method of BS VF_Utility_BS:&quot; + e.errText;
		TheApplication().RaiseErrorText(errorMess);
	}
	finally
	{
		oOLIBC4 		= null;
		//  sBC2			= null;
		// sBO2			= null;
		//oOLIBC3 		= null;
		//oOLIBC2 		= null;
		oOLIBC			= null;
		oOrderBO		= null;
	}
}"
			   SEQUENCE="114"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="12/16/2015 14:00:08"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ToUpperAndCheckInBlackList"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ToUpperAndCheckInBlackList(Inputs,Outputs)
{
	try
	{
		var original = Inputs.GetProperty(&quot;Input&quot;);
		var originalToUpper = original.toUpperCase();
		
		//search if the value in Blacklist
		var oBSInputs = TheApplication().NewPropertySet();
		var oBSOutputs = TheApplication().NewPropertySet();
		oBSInputs.SetProperty(&quot;Type&quot;,&quot;VF_BLACKLIST_PAC&quot;);
		oBSInputs.SetProperty(&quot;Name&quot;,originalToUpper); 
		LookupCustom(oBSInputs,oBSOutputs);
		var InBlacklist = oBSOutputs.GetProperty(&quot;Lookup&quot;);
		if(InBlacklist !=&quot;&quot;)
		{
			Outputs.SetProperty(&quot;Response&quot;,&quot;true&quot;);
		}
		else
		{
			Outputs.SetProperty(&quot;Response&quot;,&quot;false&quot;);
		}
		Outputs.SetProperty(&quot;Output&quot;,originalToUpper);
	}

	finally
	{
		oBSInputs = null;
		oBSOutputs = null;
	}
}"
			   SEQUENCE="110"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="01/26/2013 08:47:28"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="TransferOwnership"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="//GPG[5-feb-14]: Added for defect 29831
function TransferOwnership(Inputs, Outputs)
{    
	try
	{
			//var sAcccountId = this.BusComp().GetFieldValue(&quot;Owner Account Id&quot;);
		//	var sPromoAssetId = this.BusComp().GetFieldValue(&quot;Integration Id&quot;);
			var sAcccountId = Inputs.GetProperty(&quot;AcccountId&quot;);
			var sPromoAssetId = Inputs.GetProperty(&quot;PromoAssetId&quot;);
				
			var boAsset1 = TheApplication().GetBusObject(&quot;Account&quot;);
			var bcAsset1 = boAsset1.GetBusComp(&quot;Asset Mgmt - Asset (Order Mgmt)&quot;);
			var bcAccount;// Oracle Review Memory Leak Deallocation 31/07/2014
			var LookupVal = &quot;&quot;;
			var RootPromo = &quot;&quot;;
			var boAsset = &quot;&quot;;
			var bcAsset = &quot;&quot;;
			var dataSharerParent = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_SHARER_LEAD_PARTNUM&quot;, &quot;DataSharerParent&quot;);
			var dataSharerChild = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_SHARER_CHILD_PARTNUM&quot;, &quot;DataSharerChild&quot;);
				
			bcAsset1.ClearToQuery();
			bcAsset1.SetViewMode(AllView); 
			var search1 = &quot;[Owner Account Id] = &apos;&quot; + sAcccountId + &quot;&apos; AND [Prom Instance Integ Id] = &apos;&quot;+ sPromoAssetId +&quot;&apos;&quot;;
			bcAsset1.SetSearchExpr(search1);
	    	
		   	bcAsset1.ExecuteQuery();
		    var Rec3 = bcAsset1.FirstRecord();
			if (Rec3 == true)//Search for Mobile phone service under selected Promotion		   	
		   	{
		   		var sRootId = bcAsset1.GetFieldValue(&quot;Id&quot;);
		   		var boAsset2 = TheApplication().GetBusObject(&quot;Account&quot;);
				var bcAsset2 = boAsset2.GetBusComp(&quot;Asset Mgmt - Asset (Order Mgmt)&quot;);
				bcAsset2.ClearToQuery();
				bcAsset2.SetViewMode(AllView); 
				var search4 = &quot;[Owner Account Id] = &apos;&quot; + sAcccountId + &quot;&apos; AND [Root Asset Id] = &apos;&quot;+ sRootId +&quot;&apos; AND [Product Part Number] = &apos;106179&apos;&quot;;
				bcAsset2.SetSearchExpr(search4);

			   	bcAsset2.ExecuteQuery();
		    	var Rec4 = bcAsset2.FirstRecord();
				if(Rec4 == true)//Search for Lead Sharer Product under selected Promotion
		   		{
			   		//var sAssetId = this.BusComp().GetFieldValue(&quot;Asset Id&quot;);
				    var boOrder = TheApplication().GetBusObject(&quot;Order Entry&quot;);
				    var bcOrder = boOrder.GetBusComp(&quot;Order Entry - Line Items (Simple)&quot;);
				   	var RootPromoPartNum = &quot;&quot;;
				   	
				    bcOrder.ClearToQuery();  
				    bcOrder.SetViewMode(AllView);  	
					bcOrder.SetSearchExpr(&quot;[Account Id] = &apos;&quot; + sAcccountId + &quot;&apos; AND [Status] =&apos;Open&apos;  AND [Part Number] = &apos;106180&apos;&quot;);
					bcOrder.ActivateField(&quot;Asset Promo Part Number&quot;);
				   	bcOrder.ExecuteQuery();
				   	var Rec1 = bcOrder.FirstRecord();
					if (Rec1 == true)//Sharer child product Line-Item in open Status	
				   	//if(bcOrder.FirstRecord()) 
				   	{
				   		RootPromoPartNum = bcOrder.GetFieldValue (&quot;Asset Promo Part Number&quot;);
				   		LookupVal = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_PART_NUMBERS&quot;, RootPromoPartNum);
				   		
				   		if (LookupVal != &quot;HOLDING_PROMO&quot;)
				   		{
				   			TheApplication().RaiseErrorText(&quot;It is not possible to perform a Transfer of OwnerShip of a promotion having an active parent product of a sharing group with some other Sharer child products already ordered or activated. Please ensure to migrate the Sharer children products before try again.&quot;); 
				   			return (CancelOperation);
				   		}
				   	}
					   	
					   	//Defect #43216
						/*	var boAsset = TheApplication().GetBusObject(&quot;Account&quot;);
					   	bcAccount = boAsset.GetBusComp(&quot;Account&quot;);// Oracle Review Memory Leak Deallocation 31/07/2014
					   	
					   	bcAccount.ClearToQuery();
					   	bcAccount.SetViewMode(AllView);
					   	var searchAcc = &quot;[Id] = &apos;&quot; + sAcccountId + &quot;&apos;&quot;;
					   	bcAccount.SetSearchExpr(searchAcc);		    	   
					   	bcAccount.ExecuteQuery();
					   	var RecAcc = bcAccount.FirstRecord();				   	
					   	if (RecAcc == true)
					   	{
						   	var bcAsset = boAsset.GetBusComp(&quot;Asset Mgmt - Asset (Order Mgmt)&quot;);
						*/
						
					boAsset = TheApplication().GetBusObject(&quot;PDS Asset Management&quot;);
					bcAsset = boAsset.GetBusComp(&quot;Asset Mgmt - Asset&quot;);
				
					with (bcAsset)
					{ 	
					   	ClearToQuery();
					   	SetViewMode(AllView);
					   	var search2 = &quot;[Owner Account Id] = &apos;&quot; + sAcccountId + &quot;&apos; AND ([Status] =&apos;Active&apos; OR [Status] =&apos;Suspended&apos;)  AND [Product Part Number] = &apos;106180&apos;&quot;;
					   	SetSearchExpr(search2);
					   	ActivateField(&quot;Root Part Number Promo&quot;);	    	   
					   	ExecuteQuery();
					   	
					   	var Rec2 = FirstRecord();
						if (Rec2 == true)//Sharer child product Asset in Active or Suspended status
					   	//if(bcAsset.FirstRecord())
					   	{  	
					   		RootPromo = GetFieldValue (&quot;Root Part Number Promo&quot;);
					   		RootPromoPartNum = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_PART_NUMBERS&quot;, RootPromo);
					   		if(RootPromoPartNum != &quot;HOLDING_PROMO&quot;)
					   		{
					   			TheApplication().RaiseErrorText(&quot;It is not possible to perform a Transfer of OwnerShip of a promotion having an active parent product of a sharing group with some other Sharer child products already ordered or activated. Please ensure to disconnect the Sharer children products before try again.&quot;); 
					   			return (CancelOperation);
					   		}
					   	}
					 }
			    }
			    //Defect 50661 &amp; 51128
				//Code Merged with the one on the applet of asset.
				
				var boAsset3 = TheApplication().GetBusObject(&quot;Account&quot;);
				var bcAsset3 = boAsset3.GetBusComp(&quot;Asset Mgmt - Asset (Order Mgmt)&quot;);
				bcAsset3.SetViewMode(AllView); 
				bcAsset3.ClearToQuery();
				var search5 = &quot;[Owner Account Id] = &apos;&quot; + sAcccountId + &quot;&apos; AND [Root Asset Id] = &apos;&quot;+ sRootId +&quot;&apos; AND ([Product Part Number] = &apos;106301&apos; OR [Product Part Number] = &apos;&quot;+ dataSharerParent +&quot;&apos;)&quot;;//[HGUP:05032015]-&gt;CR57954 TOO of Parent Business Data Sharer
				bcAsset3.SetSearchExpr(search5);

			   	bcAsset3.ExecuteQuery();
		    	var Rec5 = bcAsset3.FirstRecord();
				if(Rec5 == true)//Search for Lead Sharer Product under selected Promotion
		   		{
			   	//var sAssetId = this.BusComp().GetFieldValue(&quot;Asset Id&quot;);
					var boOrder = TheApplication().GetBusObject(&quot;Order Entry&quot;);
				    var bcOrder = boOrder.GetBusComp(&quot;Order Entry - Line Items (Simple)&quot;);
				   			    
				    bcOrder.SetViewMode(AllView);
				    bcOrder.ClearToQuery();  
					bcOrder.SetSearchExpr(&quot;[Account Id] = &apos;&quot; + sAcccountId + &quot;&apos; AND [Status] =&apos;Open&apos;  AND ([Part Number] = &apos;106300&apos; OR [Part Number] = &apos;&quot;+ dataSharerChild + &quot;&apos;)&quot;);//[HGUP:05032015]-&gt;CR57954 Check for Inflight Orders
				   
				   	bcOrder.ExecuteQuery();
				   	var Rec1 = bcOrder.FirstRecord();
				   	
					if (Rec1 == true)//Sharer child product Line-Item in open Status	
				   	//if(bcOrder.FirstRecord()) 
				   	{
				   		/*var partNum = bcOrder.GetFieldValue(&quot;Part Number&quot;);
				   		if(partNum == dataSharerChild)
				   		{
				   			TheApplication().RaiseErrorText(&quot;It is not possible to submit this order to Transfer the Ownership of the active parent of a Business Sharer group while child packages in the group are active or on order. Please migrate the sharer children to non-sharer packages before trying again.&quot;);
				   		}*/
				   		TheApplication().RaiseErrorText(&quot;It is not possible to submit this order to Transfer the Ownership of the active parent of a Business Sharer group while child packages in the group are active or on order. Please migrate the sharer children to non-sharer packages before trying again.&quot;); 
				   		return (CancelOperation);
				   	}
				   	
				   	boAsset = TheApplication().GetBusObject(&quot;PDS Asset Management&quot;);
				   	bcAsset = boAsset.GetBusComp(&quot;Asset Mgmt - Asset&quot;);
				   	
				   	bcAsset.SetViewMode(AllView);
				   	bcAsset.ClearToQuery();
				   	var search2 = &quot;[Owner Account Id] = &apos;&quot; + sAcccountId + &quot;&apos; AND ([Status] =&apos;Active&apos; OR [Status] =&apos;Suspended&apos;)  AND ([Product Part Number] = &apos;106300&apos; OR [Product Part Number] = &apos;&quot; + dataSharerChild +&quot;&apos;)&quot;;////[HGUP:05032015]-&gt;CR57954 Check for Active Child Assets
				   	bcAsset.SetSearchExpr(search2);		    	   
				   	bcAsset.ExecuteQuery();
				   	
				   	var Rec2 = bcAsset.FirstRecord();
				   	
					if (Rec2 == true)//Sharer child product Asset in Active or Suspended status
				   	//if(bcAsset.FirstRecord())
				   	{  	
				   		/*var partNum1 = bcAsset.GetFieldValue(&quot;Product Part Number&quot;);
				   		if(partNum1 == dataSharerChild)
				   		{
				   			TheApplication().RaiseErrorText(&quot;It is not possible to submit this order to Transfer the Ownership of the active parent of a Business Sharer group while child packages in the group are active or on order. Please migrate the sharer children to non-sharer packages before trying again.&quot;);
				   		}*/
				   		TheApplication().RaiseErrorText(&quot;It is not possible to submit this order to Transfer the Ownership of the active parent of a Business Sharer group while child packages in the group are active or on order. Please migrate the sharer children to non-sharer packages before trying again.&quot;); 
				   		return (CancelOperation);
				   	}
		    	}							    			   		   	
			}	
			bcAsset1.ClearToQuery();
			bcAsset1.SetViewMode(AllView);
			var search1 = &quot;[Service Account Id] = &apos;&quot; + sAcccountId + &quot;&apos;&quot;;
			bcAsset1.SetSearchExpr(search1);
	    	
		   	bcAsset1.ExecuteQuery();
		   	return (ContinueOperation);
	    
	}
	catch (e)
	{
	 	throw (e);
	}
	finally
	{
		bcAsset = null;
		bcOrder = null;
		bcAsset3 = null;		
		bcAsset2 = null;
		bcAsset1 = null;
		bcAccount = null;// Oracle Review Memory Leak Deallocation 31/07/2014
		boAsset = null;
		boOrder = null;
		boAsset3 = null;
		boAsset2 = null;
		boAsset1 = null;
	}
}"
			   SEQUENCE="111"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="02/05/2014 10:04:43"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="TruncateDecimal"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="//Convert a number according to the decimal places that you specify. Shanthi for CR 55524
function TruncateDecimal(Inputs, Outputs)
{
	try
	{		
		var TruncateDecimal = Inputs.GetProperty(&quot;TruncateDecimal&quot;);
		var Amount = ToNumber(Inputs.GetProperty(&quot;Amount&quot;));
		
		Amount = Amount.toFixed(TruncateDecimal);
		
		Outputs.SetProperty(&quot;Amount&quot;, Amount);
	}
	catch(e)
	{
		var errorMessage = e.toString();
		Outputs.SetProperty(&quot;ErrorMessage&quot;, errorMessage);
	}
	finally
	{		
	}
}"
			   SEQUENCE="112"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="08/18/2014 17:24:26"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="UndoMonitoring"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function UndoMonitoring(Inputs, Outputs)
{
	try{
		var sBusCompName = Inputs.GetProperty(&quot;BusCompName&quot;);
		var sId = Inputs.GetProperty(&quot;BusinessId&quot;);
		var oboLOV = TheApplication().GetBusObject(&quot;VF_UK_BO_NoLink&quot;);
		var obcLOV = oboLOV.GetBusComp(&quot;VF_Light_LOV_BC&quot;);
		var bRec = false;
		var sFieldName = &quot;&quot;;
		var sLogicalFieldName = &quot;&quot;;
		var sLogicalBusCompName = &quot;&quot;;
		var sFieldPrevVal  = &quot;&quot;;
		var sFieldNextVal  = &quot;&quot;;	
		var sCheckAnyUpdate = &quot;&quot;;
		//var InPS = &quot;&quot;;
		//var OutPS = &quot;&quot;;
		//var WFCallBS = &quot;&quot;;
		
		with(obcLOV){
			ClearToQuery();
			ActivateField(&quot;Name&quot;);
			SetViewMode(AllView);
			SetSearchSpec(&quot;Type&quot;, &quot;VF_MONITOR_FIELD&quot;);
			SetSearchSpec(&quot;Parent Name&quot;, &quot;&apos;&quot; + sBusCompName + &quot;&apos;&quot;);
			SetSearchSpec(&quot;Active&quot;, &quot;Y&quot;);
			ExecuteQuery(ForwardOnly);
			bRec = FirstRecord();
			while(bRec){
				sFieldName = GetFieldValue(&quot;Name&quot;);				
								
				TheApplication().SetProfileAttr(&quot;VF_PrevVal_&quot; + sFieldName, &quot;&quot;);
				TheApplication().SetProfileAttr(&quot;VF_NextVal_&quot; + sFieldName, &quot;&quot;);
				
				bRec = NextRecord();
			}
		}
		
	}finally{
	}
	//InPS = null;
	//OutPS = null;
	//WFCallBS = null;
	obcLOV = null;
	oboLOV = null;
}"
			   SEQUENCE="116"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="03/22/2012 16:02:19"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="UoMAllowanceCalc"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function UoMAllowanceCalc(Inputs,Outputs)
{

	/**********************************************************************************
	Aniket S[11-July-2011]:CR 101796:New_UoM CCS_3.0
	**********************************************************************************/
	var sName = &quot;&quot;;
	var sVal = &quot;&quot;;
	var sType = &quot;&quot;;
	var sHigh = &quot;&quot;;
	var sLow = &quot;&quot;;
	var sWF = &quot;&quot;;
	var sLovVal = &quot;&quot;;
	var sSearchExpr = &quot;&quot;;
	var sUBS = &quot;&quot;;
	var pspInp = &quot;&quot;;
	var pspOut = &quot;&quot;;
	var sProjVal = &quot;&quot;;
	var sProjVal1 = &quot;&quot;;
	var sProjValFinal = &quot;&quot;;
	var sActive = &quot;Y&quot;;
	try
	{

		sName = Inputs.GetProperty(&quot;name&quot;);
		sVal = Inputs.GetProperty(&quot;val&quot;);
		sType = &quot;VF_UoM&quot;;
		sSearchExpr = &quot;[Type] = &apos;&quot;+ sType +&quot;&apos; AND [Name] = &apos;&quot;+ sName + &quot;&apos; AND [Active] = &apos;&quot;+ sActive +&quot;&apos;&quot;;
		sUBS = TheApplication().GetService(&quot;VF_Utility_BS&quot;);
		pspInp = TheApplication().NewPropertySet();
		pspOut = TheApplication().NewPropertySet();
		pspInp.SetProperty(&quot;BusinessComponent&quot;, &quot;List Of Values&quot;);
		pspInp.SetProperty(&quot;BusinessObject&quot;, &quot;List Of Values&quot;);
		pspInp.SetProperty(&quot;SearchExpr&quot;, sSearchExpr);
		pspInp.SetProperty(&quot;ListaField&quot;, &quot;Value,High,Low,Weighting Factor&quot;);
		sUBS.InvokeMethod(&quot;GenericQueryOnBC&quot;, pspInp , pspOut);
		sHigh = pspOut.GetProperty(&quot;High&quot;);
		sLow = pspOut.GetProperty(&quot;Low&quot;);
		sWF = pspOut.GetProperty(&quot;Weighting Factor&quot;);
		sLovVal = pspOut.GetProperty(&quot;Value&quot;);
		if(sLovVal != &quot;&quot; &amp;&amp; sLovVal != null)
		{
			sProjVal = sVal/sHigh;
			sProjVal1 = sProjVal.toFixed(ToNumber(sWF));
			sProjValFinal = sProjVal1;// + &quot; &quot; + sLow;
			Outputs.SetProperty(&quot;ProjFinalVal&quot;, sProjValFinal);
		}
		else
		{
			Outputs.SetProperty(&quot;ProjFinalVal&quot;, sVal);
		}	
		
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		sUBS = null;
		pspInp = null;
		pspOut = null;
	}

}"
			   SEQUENCE="117"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="07/27/2016 14:46:09"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="UoMCalc"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function UoMCalc(Inputs,Outputs)
{

	/**********************************************************************************
	Aniket S[11-July-2011]:CR 101796:New_UoM CCS_3.0
	**********************************************************************************/
	var sName = &quot;&quot;;
	var sType = &quot;&quot;;
	var sLow = &quot;&quot;;
	var sSearchExpr = &quot;&quot;;
	var sUBS = &quot;&quot;;
	var pspInp = &quot;&quot;;
	var pspOut = &quot;&quot;;
	var sActive = &quot;Y&quot;;
	try
	{

		sName = Inputs.GetProperty(&quot;name&quot;);
		sType = &quot;VF_UoM&quot;;
		sSearchExpr = &quot;[Type] = &apos;&quot;+ sType +&quot;&apos; AND [Name] = &apos;&quot;+ sName + &quot;&apos; AND [Active] = &apos;&quot;+ sActive +&quot;&apos;&quot;;
		sUBS = TheApplication().GetService(&quot;VF_Utility_BS&quot;);
		pspInp = TheApplication().NewPropertySet();
		pspOut = TheApplication().NewPropertySet();
		pspInp.SetProperty(&quot;BusinessComponent&quot;, &quot;List Of Values&quot;);
		pspInp.SetProperty(&quot;BusinessObject&quot;, &quot;List Of Values&quot;);
		pspInp.SetProperty(&quot;SearchExpr&quot;, sSearchExpr);
		pspInp.SetProperty(&quot;ListaField&quot;, &quot;Low&quot;);
		sUBS.InvokeMethod(&quot;GenericQueryOnBC&quot;, pspInp , pspOut);
		sLow = pspOut.GetProperty(&quot;Low&quot;);
		if(sLow != &quot;&quot; &amp;&amp; sLow != null)
		{
			Outputs.SetProperty(&quot;ProjFinalVal&quot;, sLow);
		}
		else
		{
			Outputs.SetProperty(&quot;ProjFinalVal&quot;, sName);
		}	
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		sUBS = null;
		pspInp = null;
		pspOut = null;
	}
}"
			   SEQUENCE="118"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="07/27/2016 14:46:09"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="UpdateAccountChildren"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function UpdateAccountChildren(Inputs,Outputs)
{
	try
	{
		Outputs.SetProperty(&quot;ErrorMsg&quot;,&quot;&quot;);
		Outputs.SetProperty(&quot;ErrorCode&quot;,&quot;&quot;);
		var accountId = Inputs.GetProperty(&quot;Account Id&quot;);
		var orderId = Inputs.GetProperty(&quot;Order Id&quot;);
		var accountBO = TheApplication().GetBusObject(&quot;VF Account BO&quot;);
        var orderItemBC = accountBO.GetBusComp(&quot;Order Entry - Line Items&quot;);
        var accountBC = accountBO.GetBusComp(&quot;Account&quot;);
		var active =  TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;ACCOUNT_STATUS&quot;, &quot;Active&quot;);
		var serviceAccountId = &quot;&quot;;
		var billingAccountId = &quot;&quot;;
		var bcRec = false;
		var servAccountStatus = &quot;&quot;;
		var billAccountStatus = &quot;&quot;;
		with(orderItemBC)
				{
                   SetViewMode(AllView);
                   ClearToQuery();
                   ActivateField(&quot;Service Account Status&quot;);
                   ActivateField(&quot;Service Account Id&quot;);
                   ActivateField(&quot;Billing Account Status&quot;);
                   ActivateField(&quot;Billing Account Id&quot;);
                   SetSearchExpr(&quot;[Order Header Id]=&apos;&quot; + orderId + &quot;&apos;&quot;); 
                   //AND (([Service Account Id] &lt;&gt; &apos;&quot; + accountId + &quot;&apos; AND [Service Account Status] &lt;&gt; &apos;&quot; + active + &quot;&apos;))&quot;); //[QC 53453]
                   ExecuteQuery(ForwardOnly);
                   bcRec = FirstRecord();
				   while(bcRec)
                   		{
					    	serviceAccountId = GetFieldValue(&quot;Service Account Id&quot;);
					    	servAccountStatus = GetFieldValue(&quot;Service Account Status&quot;);
					    	billingAccountId = GetFieldValue(&quot;Billing Account Id&quot;);
					    	billAccountStatus = GetFieldValue(&quot;Billing Account Status&quot;);
					    	if((accountId != serviceAccountId) &amp;&amp; (servAccountStatus != active));
					    		UpdateAccountChildrenStatus(accountId,serviceAccountId,&quot;&quot;);
					    	if((accountId != billingAccountId) &amp;&amp; (billAccountStatus != active));
					    		UpdateAccountChildrenStatus(accountId,&quot;&quot;,billingAccountId);
					    	bcRec = NextRecord();
					    }
				}
		
		/*with(orderItemBC)
				{
                   SetViewMode(AllView);
                   ClearToQuery();
                   ActivateField(&quot;Billing Account Status&quot;);
                   ActivateField(&quot;Billing Account Id&quot;);
                   SetSearchExpr(&quot;[Order Header Id]=&apos;&quot; + orderId + &quot;&apos; AND (([Billing Account Id] &lt;&gt; &apos;&quot; + accountId + &quot;&apos; AND [Billing Account Status] &lt;&gt; &apos;&quot; + active + &quot;&apos;))&quot;);
                   ExecuteQuery(ForwardOnly);
                   bcRec = FirstRecord();
				   while(bcRec)
                   		{
					    billingAccountId = GetFieldValue(&quot;Billing Account Id&quot;);
					    UpdateAccountChildrenStatus(accountId,&quot;&quot;,billingAccountId);
					    bcRec = NextRecord();
					    }
				}*/
		/*		
		if(serviceAccountId != null &amp;&amp; serviceAccountId != &quot;&quot;) 
		{
				with(accountBC)
				{
                   SetViewMode(AllView);
                   ClearToQuery();
                   SetSearchExpr(&quot;[Id]=&apos;&quot; + serviceAccountId + &quot;&apos; AND [Account Status] &lt;&gt; &apos;&quot; + active + &quot;&apos;&quot;);
                   ExecuteQuery(ForwardOnly);
                   if (FirstRecord())
                   		{
					    SetFieldValue(&quot;VF Account Status No Copy&quot;, active);
					    WriteRecord();
					    }
				}
		}
		
		if(billingAccountId != null &amp;&amp; billingAccountId != &quot;&quot;) 
		{
				with(accountBC)
				{
                   SetViewMode(AllView);
                   ClearToQuery();
                   SetSearchExpr(&quot;[Id]=&apos;&quot; + billingAccountId + &quot;&apos; AND [Account Status] &lt;&gt; &apos;&quot; + active + &quot;&apos;&quot;);
                   ExecuteQuery(ForwardOnly);
                   if (FirstRecord())
                   		{
					    SetFieldValue(&quot;VF Account Status No Copy&quot;, active);
					    WriteRecord();
					    }
				}
		}*/
	}
	catch (e)
	{
		Outputs.SetProperty(&quot;Custom Error&quot;,e.errText);
		throw(e);
	}
	finally
	{
		orderItemBC = null;
		accountBC = null;
		accountBO = null;
	}
}"
			   SEQUENCE="119"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="04/18/2014 11:49:04"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="UpdateAccountChildrenStatus"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function UpdateAccountChildrenStatus(accountId,serviceAccountId,billingAccountId)
{
	try
	{
		var accountBO = TheApplication().GetBusObject(&quot;VF Account BO&quot;);
        var accountBC = accountBO.GetBusComp(&quot;Account&quot;);
		var active =  TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;ACCOUNT_STATUS&quot;, &quot;Active&quot;);				
		if(serviceAccountId != null &amp;&amp; serviceAccountId != &quot;&quot;) 
		{
				with(accountBC)
				{
                   SetViewMode(AllView);
                   ClearToQuery();
                   SetSearchExpr(&quot;[Id]=&apos;&quot; + serviceAccountId + &quot;&apos; AND [Account Status] &lt;&gt; &apos;&quot; + active + &quot;&apos;&quot;);
                   ExecuteQuery(ForwardOnly);
                   if (FirstRecord())
	             		{
					    SetFieldValue(&quot;VF Account Status No Copy&quot;, active);
					    WriteRecord();
					    }
				}
		}
		if(billingAccountId != null &amp;&amp; billingAccountId != &quot;&quot;) 
		{
				with(accountBC)
				{
                   SetViewMode(AllView);
                   ClearToQuery();
                   SetSearchExpr(&quot;[Id]=&apos;&quot; + billingAccountId + &quot;&apos; AND [Account Status] &lt;&gt; &apos;&quot; + active + &quot;&apos;&quot;);
                   ExecuteQuery(ForwardOnly);
                   if (FirstRecord())
                 		{
					    SetFieldValue(&quot;VF Account Status No Copy&quot;, active);
					    WriteRecord();
					    }
				}
		}
	}
	catch (e)
	{
		throw(e);
	}
	finally
	{
		accountBC = null;
		accountBO = null;
	}
}"
			   SEQUENCE="120"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="04/18/2014 11:49:04"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   COMMENTS="[AP]:02-Sept-2015:CR71178-Get_Retention_Eligibility: added new method to update fields when there is TIL call"
			   INACTIVE="N"
			   NAME="UpdateAssetWithCREResponse"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function UpdateAssetWithCREResponse(Inputs, Outputs)
{
/*----------------------------------------------------------------------------------------------------------
Purpose: This function is created to update asset fields with CheckRetentionEligibilityResponse 
when CRE is called by TIL bypassing FMW.
Called From: WF: VF TIL Check Retention Eligibility Request Response WF
[APHADNAIK][CR:71178][13-9-2015][Script modified for defect: 63674]
------------------------------------------------------------------------------------------------------------*/
	try
	{
		var sListOfMsisdnInput=Inputs.GetProperty(&quot;listOfMsisdnAndID&quot;);
		var sBusinessObject = Inputs.GetProperty(&quot;BusinessObject&quot;);
		var sBusinessComponent = Inputs.GetProperty(&quot;BusinessComponent&quot;);
		var SiebelMessage = Inputs.GetChild(&quot;SiebelMessage&quot;);
		var count = &quot;&quot;;
		var ListOfMsisdnSplit = sListOfMsisdnInput.split(&quot;;&quot;);
		var sMsidnCouple =&quot;&quot;;
		var sMsidnCoupleSplit =&quot;&quot;;
		var i;
		var j=0;
		var k =0;
		var l;
		var sOutput = TheApplication().NewPropertySet();
		var sTypeItem = &quot;ns1:ResultStatus&quot;;
		var sMsisdnID=&quot;&quot;;
		var sMsisdnValue=&quot;&quot;;
		var MSISDNretrieved =&quot;&quot;;
		var eligibilityIndicator =&quot;&quot;;
		var eligibilityIndicatorTotal = &quot;N&quot;;
		var Reason =&quot;&quot;;
		var sTypeValue = &quot;&quot;;
		var flag = false;
		var EarlyStartDate=&quot;&quot;;	//[GS: Updated for QC#63674]
		var NormalStartDate=&quot;&quot;;	//[GS: Updated for QC#63674]
		var inpBS = TheApplication().NewPropertySet();
		var outBS = TheApplication().NewPropertySet();
		var type = SiebelMessage.GetChild(0).GetChild(0).GetType();
		if(type == sTypeItem)
		{
			SiebelMessage.GetChild(0).RemoveChild(0); 
		}
		count = SiebelMessage.GetChild(0).GetChildCount();//--count of RetentionEligibilityList
		//if there is one or more child...
		for(i=0;i&lt;count;i++)
		{//loop1	
			var count1 = SiebelMessage.GetChild(0).GetChild(i).GetChildCount();//-- count of children of RetentionEligibilityList
			for(l=0;l&lt;count1;l++)
			{
				var sType = SiebelMessage.GetChild(0).GetChild(i).GetChild(l).GetType();
				var SpTYpe = sType.split(&quot;:&quot;);
				if(SpTYpe.length &gt; 1)
				{
					switch (SpTYpe[1])
					{	
						case &quot;EligibilityIndicator&quot;:
						{
							eligibilityIndicator = SiebelMessage.GetChild(0).GetChild(i).GetChild(l).GetValue();
						}
						break;
						case &quot;Reason&quot;:
						{
							Reason = SiebelMessage.GetChild(0).GetChild(i).GetChild(l).GetValue();
						}
						break;
						case &quot;Type&quot;:
						{
							//[16/05/2016][Khushboo][Release CCS MR Pilot][PBI91312][QC:69148][CRE Pop Up] 
							sTypeValue = SiebelMessage.GetChild(0).GetChild(i).GetChild(l).GetValue();
						}
						break;
						case &quot;EarlyStartDate&quot;:
						{
							EarlyStartDate = SiebelMessage.GetChild(0).GetChild(i).GetChild(l).GetValue();
						}
						break;
						case &quot;NormalStartDate&quot;:
						{
							NormalStartDate = SiebelMessage.GetChild(0).GetChild(i).GetChild(l).GetValue();
						}
						break;
						case &quot;ApplicationObjectKey&quot;:
						{
							//NormalStartDate = SiebelMessage.GetChild(0).GetChild(j).GetChild(l).GetValue();
							var sMSISDN = SiebelMessage.GetChild(0).GetChild(i).GetChild(l).GetChild(0).GetType();
							var SpMSISDN = sMSISDN.split(&quot;:&quot;);
							if(SpMSISDN.length &gt; 1)
							{
								if(SpMSISDN[1] ==&quot;ID&quot;)
								{
									MSISDNretrieved = SiebelMessage.GetChild(0).GetChild(i).GetChild(l).GetChild(0).GetValue();
								}
							}
						}
						break;
						default:
						break;
					}//end switch
				}//end if
			}//end for l
			if ((eligibilityIndicator==&quot;True&quot;)||(eligibilityIndicator==&quot;TRUE&quot;)||(eligibilityIndicator==&quot;true&quot;))
			{
				eligibilityIndicator=&quot;Y&quot;;
				eligibilityIndicatorTotal = &quot;Y&quot;;
			}
			else
			{
				eligibilityIndicator=&quot;N&quot;;
			}
			if(EarlyStartDate != &quot;&quot; &amp;&amp; EarlyStartDate != null)
			{
				EarlyStartDate = (EarlyStartDate.substring(5,7))+&quot;/&quot;+(EarlyStartDate.substring(8,10))+&quot;/&quot;+(EarlyStartDate.substring(0,4));
			}
			if(NormalStartDate != &quot;&quot; &amp;&amp; NormalStartDate != null)
			{
				NormalStartDate = (NormalStartDate.substring(5,7))+&quot;/&quot;+(NormalStartDate.substring(8,10))+&quot;/&quot;+(NormalStartDate.substring(0,4));
			}
			
			if(sListOfMsisdnInput.indexOf(MSISDNretrieved)&gt;-1)
			{
				//update on s_asset
				var searchExp = &quot;[Serial Number] = &apos;&quot;+ MSISDNretrieved + &quot;&apos;&quot;;
				inpBS.SetProperty(&quot;BusObject&quot;, sBusinessObject);
				inpBS.SetProperty(&quot;BusComponent&quot;,sBusinessComponent);
				inpBS.SetProperty(&quot;SearchExpression&quot;, searchExp);
				inpBS.SetProperty(&quot;FieldName&quot;,&quot;VF Ineligible flag,VF Ineligible reason,Early Start Date,Normal Start Date,VF CE Type&quot;);	              
				inpBS.SetProperty(&quot;CabledValue&quot;,eligibilityIndicator+&quot;,&quot;+Reason+&quot;,&quot;+EarlyStartDate+&quot;,&quot;+NormalStartDate+&quot;,&quot;+sTypeValue);
				SetFieldValueCustom(inpBS,outBS);
				//flag = true;
				//j++;
			}//end if					
		}//end for
		Outputs.SetProperty(&quot;eligibilityIndicatorTotal&quot;,eligibilityIndicatorTotal);
	}//end try
	catch(e)
	{
		var erroMess = e.toString();
	}
	finally
	{
		inpBS = null;
		outBS = null;
		sOutput = null;
		ListOfMsisdnSplit = null;
		sMsidnCoupleSplit = null;
	}
}"
			   SEQUENCE="122"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="12/11/2015 15:44:32"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   COMMENTS="[AP]:15-Sept-2015:CR71178-Get_Retention_Eligibility: added new method to update fields when there is TIL call"
			   INACTIVE="N"
			   NAME="UpdateAssetWithCRE_FLFB_Response"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function UpdateAssetWithCRE_FLFB_Response(Inputs, Outputs)
{
/*----------------------------------------------------------------------------------------------------------
Purpose: This function is created to update asset fields with CheckRetentionEligibilityResponse 
when CRE is called by TIL bypassing FMW.
Called From: WF: VF TIL TV_Fixed Line Check Retention Eligibility Request WF
[APHADNAIK][CR:71178][15-9-2015]
------------------------------------------------------------------------------------------------------------*/
	try
	{
		var sListOfMsisdnInput=Inputs.GetProperty(&quot;listOfMsisdnAndID&quot;);
		var sBusinessObject = Inputs.GetProperty(&quot;BusinessObject&quot;);
		var sBusinessComponent = Inputs.GetProperty(&quot;BusinessComponent&quot;);
		var SiebelMessage = Inputs.GetChild(&quot;SiebelMessage&quot;);
		var count = &quot;&quot;;
		var ListOfMsisdnSplit = sListOfMsisdnInput.split(&quot;;&quot;);
		var sMsidnCouple =&quot;&quot;;
		var sMsidnCoupleSplit =&quot;&quot;;
		var i;
		var j=0;
		var k =0;
		var l;
		var m;
		var n;
		var sOutput = TheApplication().NewPropertySet();
		var sTypeItem = &quot;ns1:ResultStatus&quot;;
		var sMsisdnID=&quot;&quot;;
		var sMsisdnValue=&quot;&quot;;
		var MSISDNretrieved =&quot;&quot;;
		var eligibilityIndicator =&quot;&quot;;
		var oEligibilityIndicator = &quot;&quot;;
		var Reason =&quot;&quot;;
		var sTypeValue = &quot;&quot;;
		var flag = false;
		//var EarlyStartDate;
		//var NormalStartDate;
		var inpBS = TheApplication().NewPropertySet();
		var outBS = TheApplication().NewPropertySet();
		var type = SiebelMessage.GetChild(0).GetChild(0).GetType();
		if(type == sTypeItem)
		{
			SiebelMessage.GetChild(0).RemoveChild(0); 
		}
		count = SiebelMessage.GetChild(0).GetChildCount();//--count of RetentionEligibilityList
		//if there is one or more child...
		for(i=0;i&lt;count;i++)//loop for no of RetentionEligibilityList
		{//loop1	
			//for each couple (msisnd,id) perform a search into Siebel Message values for 
			//retrieve ineligible reason and flag, and update it into database
			for(k in ListOfMsisdnSplit)// loop for List of msisdn
			{
				sMsidnCouple = ListOfMsisdnSplit[k];
				sMsidnCoupleSplit = sMsidnCouple.split(&quot;,&quot;);
				sMsisdnValue = sMsidnCoupleSplit[0];
				sMsisdnID = sMsidnCoupleSplit[1];
				if((j&lt;count)&amp;&amp;(flag == false))
				{
					var count1 = SiebelMessage.GetChild(0).GetChild(j).GetChildCount();//-- count of children of RetentionEligibilityList
					for(m=0;m&lt;count1;m++)//to find Application Object key
					{
						var AppObjKey = SiebelMessage.GetChild(0).GetChild(j).GetChild(m).GetType();
						var sAppObjKey = AppObjKey.split(&quot;:&quot;);
						if(sAppObjKey.length &gt; 1)
						{
							if(sAppObjKey[1] ==&quot;ApplicationObjectKey&quot;)//if child is Application Object Key
							{
								var vCnt2 = SiebelMessage.GetChild(0).GetChild(j).GetChild(m).GetChildCount();
								for(n=0;n&lt;vCnt2;n++)// to find ID
								{
									var vChildProp = SiebelMessage.GetChild(0).GetChild(j).GetChild(m).GetChild(n).GetType();
									var sSplitChild = vChildProp.split(&quot;:&quot;);
									if(sSplitChild.length &gt; 1)
									{
										if(sSplitChild[1] ==&quot;ID&quot;)
										{
											MSISDNretrieved = SiebelMessage.GetChild(0).GetChild(j).GetChild(m).GetChild(n).GetValue();
										}
									}
								}
							}
						}
					}	
					if(MSISDNretrieved == sMsisdnValue)
					{
						for(l=0;l&lt;count1;l++)
						{
							var sType = SiebelMessage.GetChild(0).GetChild(j).GetChild(l).GetType();
							var SpTYpe = sType.split(&quot;:&quot;);
							if(SpTYpe.length &gt; 1)
							{
								switch (SpTYpe[1])
								{	
									case &quot;EligibilityIndicator&quot;:
									{
										eligibilityIndicator = SiebelMessage.GetChild(0).GetChild(j).GetChild(l).GetValue();
									}
									break;
									case &quot;Reason&quot;:
									{
										Reason = SiebelMessage.GetChild(0).GetChild(j).GetChild(l).GetValue();
									}
									break;
									case &quot;Type&quot;:
									{
										//[16/05/2016][Khushboo][Release CCS MR Pilot][PBI91312][QC:69148][CRE Pop Up] 
										sTypeValue = SiebelMessage.GetChild(0).GetChild(j).GetChild(l).GetValue();
									}
									break;
									default:
									break;
								}
							}
						}
						if ((eligibilityIndicator==&quot;True&quot;)||(eligibilityIndicator==&quot;TRUE&quot;)||(eligibilityIndicator==&quot;true&quot;))
						{
							oEligibilityIndicator=&quot;Y&quot;;
						}
						else
						{
							oEligibilityIndicator=&quot;N&quot;;
						}
						//update on s_asset
						inpBS.SetProperty(&quot;BusObject&quot;, sBusinessObject);
						inpBS.SetProperty(&quot;BusComponent&quot;,sBusinessComponent);
						inpBS.SetProperty(&quot;ObjId&quot;, sMsisdnID);
						inpBS.SetProperty(&quot;FieldName&quot;,&quot;VF Ineligible flag,VF Ineligible reason,VF CE Type&quot;);	              
						inpBS.SetProperty(&quot;CabledValue&quot;,oEligibilityIndicator+&quot;,&quot;+Reason+&quot;,&quot;+sTypeValue);
						SetFieldValueCustom(inpBS,outBS);
						Outputs.SetProperty(&quot;EligibilityIndicator&quot;, eligibilityIndicator);
						Outputs.SetProperty(&quot;EligibilityReason&quot;, Reason);
						flag = true;
						j++;
					}
				}
			}
			flag = false;					
		}
		j = 0;
	}
	catch(e)
	{
		var erroMess = e.toString();
	}
	finally
	{
		inpBS = null;
		outBS = null;
		sOutput = null;
		ListOfMsisdnSplit = null;
		sMsidnCoupleSplit = null;
	}
}"
			   SEQUENCE="121"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="12/11/2015 15:44:32"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="UpdateAssetWithRetentionEligibilityResponse"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function UpdateAssetWithRetentionEligibilityResponse(Inputs, Outputs)
{
	try
	{
		var sListOfMsisdnInput=Inputs.GetProperty(&quot;listOfMsisdnAndID&quot;);
		var sBusinessObject = Inputs.GetProperty(&quot;BusinessObject&quot;);
		var sBusinessComponent = Inputs.GetProperty(&quot;BusinessComponent&quot;);
		var SiebelMessage = Inputs.GetChild(&quot;SiebelMessage&quot;);
		var count = &quot;&quot;;
		var ListOfMsisdnSplit = sListOfMsisdnInput.split(&quot;;&quot;);
		var sMsidnCouple =&quot;&quot;;
		var sMsidnCoupleSplit =&quot;&quot;;
		var i=0;
		var j=0;
		var listMSISDNResponse = TheApplication().NewPropertySet();
		var sTypeItem = &quot;ListOfRetentionEligibilityResponse&quot;;
		var sMsisdnID=&quot;&quot;;
		var sMsisdnValue=&quot;&quot;;
		var MSISDNretrieved =&quot;&quot;;
		var eligibilityIndicator =&quot;&quot;;
		var Reason =&quot;&quot;;
		var sType = &quot;&quot;;
		var flag = false;
		var EarlyStartDate;
		var NormalStartDate;

		var inpBS = TheApplication().NewPropertySet();
		var outBS = TheApplication().NewPropertySet();
	
		
		//search type in Siebel Message		
		FindTypeInXML(SiebelMessage,listMSISDNResponse,sTypeItem);
		count = listMSISDNResponse.GetChild(0).GetChildCount();
		//if there is one or more child...
		if (count&gt;0)
		{	
			//for each couple (msisnd,id) perform a search into Siebel Message values for 
			//retrieve ineligible reason and flag, and update it into database
			for(i in ListOfMsisdnSplit)
			{
				sMsidnCouple = ListOfMsisdnSplit[i];
				sMsidnCoupleSplit = sMsidnCouple.split(&quot;,&quot;);
				sMsisdnValue = sMsidnCoupleSplit[0];
				sMsisdnID = sMsidnCoupleSplit[1];
				while((j&lt;count)&amp;&amp;(flag == false))
				{
					MSISDNretrieved = listMSISDNResponse.GetChild(0).GetChild(j).GetChild(0).GetChild(0).GetProperty(&quot;MSISDN_Value&quot;);
					if (MSISDNretrieved ==sMsisdnValue )
					{
						eligibilityIndicator = listMSISDNResponse.GetChild(0).GetChild(j).GetProperty(&quot;EligibilityIndicator&quot;);
						Reason = listMSISDNResponse.GetChild(0).GetChild(j).GetChild(1).GetChild(0).GetProperty(&quot;Reason_0_Value&quot;);
						sType = listMSISDNResponse.GetChild(0).GetChild(j).GetChild(2).GetChild(0).GetProperty(&quot;Type_0_Value&quot;); //[16/05/2016][Khushboo][Release CCS MR Pilot][PBI91312][QC:69148][CRE Pop Up]
						EarlyStartDate = listMSISDNResponse.GetChild(0).GetChild(j).GetProperty(&quot;EarlyStartDate&quot;); //CR#49174
						NormalStartDate = listMSISDNResponse.GetChild(0).GetChild(j).GetProperty(&quot;NormalStartDate&quot;); //CR#49174					
						//transcode the eligibilityIndicator. To improve the performance, create a LOV
						if ((eligibilityIndicator==&quot;True&quot;)||(eligibilityIndicator==&quot;TRUE&quot;)||(eligibilityIndicator==&quot;true&quot;))
						{
							eligibilityIndicator=&quot;Y&quot;;
						}
						else
						{
							eligibilityIndicator=&quot;N&quot;;
						}
						if(EarlyStartDate != &quot;&quot; &amp;&amp; EarlyStartDate != null) //[AP]:10/3/2015:Added check for R2.4.2 QC#54290 to update EarlyStartDate only when its received from chordiant
						{
							EarlyStartDate = (EarlyStartDate.substring(5,7))+&quot;/&quot;+(EarlyStartDate.substring(8,10))+&quot;/&quot;+(EarlyStartDate.substring(0,4));
						}
						if(NormalStartDate != &quot;&quot; &amp;&amp; NormalStartDate != null) //[AP]:10/3/2015:Added check for R2.4.2 QC#54290 to update NormalStartDate only when its received from chordiant
						{
						    NormalStartDate = (NormalStartDate.substring(5,7))+&quot;/&quot;+(NormalStartDate.substring(8,10))+&quot;/&quot;+(NormalStartDate.substring(0,4));
						}
						//update on s_asset
						inpBS.SetProperty(&quot;BusObject&quot;, sBusinessObject);
						inpBS.SetProperty(&quot;BusComponent&quot;,sBusinessComponent);
						inpBS.SetProperty(&quot;ObjId&quot;, sMsisdnID);
						inpBS.SetProperty(&quot;FieldName&quot;,&quot;VF Ineligible flag,VF Ineligible reason,Early Start Date,Normal Start Date,VF CE Type&quot;); //CR#49174		              
						inpBS.SetProperty(&quot;CabledValue&quot;,eligibilityIndicator+&quot;,&quot;+Reason+&quot;,&quot;+EarlyStartDate+&quot;,&quot;+NormalStartDate+&quot;,&quot;+sType); //CR#49174
						SetFieldValueCustom(inpBS,outBS);
						//flag = true;
					}				
					j++;					
				}
				flag = false;
				j = 0;
			}
			
		}
			
		
	}
	catch(e)
	{
		var erroMess = e.toString();


	}
	finally
	{
		inpBS = null;
		outBS = null;
		listMSISDNResponse = null;
		ListOfMsisdnSplit = null;// Oracle Review Memory Leak Deallocation 31/07/2014
		sMsidnCoupleSplit = null;// Oracle Review Memory Leak Deallocation 31/07/2014
	}
}"
			   SEQUENCE="123"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="10/04/2012 18:15:29"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="UptoTwoDecimal"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function UptoTwoDecimal(Inputs,Outputs)
{
      var sFullString,sFinalString;
      try
      {
          sFullString = Inputs.GetProperty(&quot;FullString&quot;);
          if(sFullString != null &amp;&amp; sFullString != &quot;&quot;)
          {
          	sFinalString = ToNumber(sFullString);
          	Outputs.SetProperty(&quot;FinalString&quot;,sFinalString.toFixed(2));
          }
          else
          	Outputs.SetProperty(&quot;FinalString&quot;,sFullString);
      }
      catch(e)
      {
          throw(e);
      }
      finally
      {
      }
}"
			   SEQUENCE="124"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="12/11/2015 15:44:32"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="VFEscape"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="/**************************************************
	NAME:              	VFEscape		
	DESCRIPTION: 		To encode special characters from string.
	INPUT PARAMETERS:	String
	OUTPUT PARAMETERS:	FinalStr (Encoded string)
	AUTHOR:				Sapana Pawar
	DATE CREATED:		27-05-2016 by ACN_PAWARS
**************************************************/

function VFEscape(Inputs, Outputs)
{
	var sString = &quot;&quot;;
	var sEncoString = &quot;&quot;;
	var sFinalStr = &quot;&quot;;
	
	var pat1 = /(\/)/g;
	var pat2 = /(\+)/g;
	var pat3 = /(\*)/g;
	var pat4 = /(\@)/g;
	var pat5 = /(\_)/g;
	var pat6 = /(\.)/g;
	
	sString = Inputs.GetProperty(&quot;String&quot;);

	try
	{
		if(sString != null &amp;&amp; sString != &quot;&quot;)
		{
			sEncoString = escape(sString);
			sFinalStr = sEncoString;
		
			sFinalStr = sFinalStr.replace(pat1,&quot;%2F&quot;);	
			sFinalStr = sFinalStr.replace(pat2,&quot;%2B&quot;);
			sFinalStr = sFinalStr.replace(pat3,&quot;%2A&quot;);
			sFinalStr = sFinalStr.replace(pat4,&quot;%40&quot;);			
			sFinalStr = sFinalStr.replace(pat5,&quot;%5F&quot;);
			sFinalStr = sFinalStr.replace(pat6,&quot;%2E&quot;);
			
		}
		Outputs.SetProperty(&quot;FinalStr&quot;,sFinalStr);	
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		pat1 = null;
		pat2 = null;
		pat3 = null;
		pat4 = null;
		pat5 = null;
		pat6 = null;
	}
}"
			   SEQUENCE="131"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="06/02/2016 15:41:18"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ValidateContact"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ValidateContact(Inputs, Outputs)
{
	try
	{
		var BO = TheApplication().GetBusObject(&quot;Contact&quot;);
		var BC = BO.GetBusComp(&quot;Contact&quot;);
		var Id = Inputs.GetProperty(&quot;Id&quot;);
		var FirstName = Inputs.GetProperty(&quot;FirstName&quot;);
		var LastName = Inputs.GetProperty(&quot;LastName&quot;);
		var DOB = Inputs.GetProperty(&quot;DOB&quot;);
		var PrimaryContactPC = &quot;&quot;;
		var ContactMatch = &quot;N&quot;;
	
		with (BC)
		{
			ActivateField(&quot;Personal Postal Code&quot;);
			SetViewMode(AllView);
			ClearToQuery();
			SetSearchSpec(&quot;Id&quot;,Id);
			SetSearchSpec(&quot;First Name Lower&quot;,&quot;&apos;&quot; + FirstName.replace(/(&apos;)/g, &quot;&apos;&apos;&quot;) + &quot;&apos;&quot;);
			SetSearchSpec(&quot;Last Name Lower&quot;,&quot;&apos;&quot; + LastName.replace(/(&apos;)/g, &quot;&apos;&apos;&quot;) + &quot;&apos;&quot;);
			SetSearchSpec(&quot;Date of Birth&quot;,DOB);
			ExecuteQuery(ForwardOnly);
			if (FirstRecord())
			{
				PrimaryContactPC = GetFieldValue(&quot;Personal Postal Code&quot;);
				ContactMatch = &quot;Y&quot;;
			}
		}

		Outputs.SetProperty(&quot;PersonalPostalCode&quot;,PrimaryContactPC);
		Outputs.SetProperty(&quot;ContactMatch&quot;,ContactMatch);
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		BC = null;
		BO = null;
	}	
}"
			   SEQUENCE="125"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="12/30/2013 05:21:38"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ValidateRegExp"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ValidateRegExp(Inputs, Outputs)
{
        try{
            var sPattern = Inputs.GetProperty(&quot;Pattern&quot;);
            var sVF_String = Inputs.GetProperty(&quot;VF_String&quot;);
            var rExp = new RegExp(sPattern);
			
			if(rExp.exec(sVF_String))
            {
             	Outputs.SetProperty(&quot;Result&quot;, 1);
            } else
                  {
                   Outputs.SetProperty(&quot;Result&quot;, 0);
                  }
            }
         
         catch(e){
                  Outputs.SetProperty(&quot;Result&quot;, e.toString());
         		  }
         finally{
                  }
}"
			   SEQUENCE="126"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="05/30/2011 09:44:03"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ValidateRegExpTestMthd"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ValidateRegExpTestMthd(Inputs, Outputs)
{
        try{
            var sPattern = Inputs.GetProperty(&quot;Pattern&quot;);
            
            var pat = /(£)/g;
		    sPattern = sPattern.replace(pat, &quot;&apos;&quot;);
		
            var sVF_String = Inputs.GetProperty(&quot;VF_String&quot;);
            var rExp = new RegExp(sPattern);
			
			if(rExp.test(sVF_String))
            {
             	Outputs.SetProperty(&quot;Result&quot;, 1);
            } else
                  {
                   Outputs.SetProperty(&quot;Result&quot;, 0);
                  }
            }
         
         catch(e){
                  Outputs.SetProperty(&quot;Result&quot;, e.toString());
         		  }
         finally{
                  }
}"
			   SEQUENCE="127"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="04/13/2012 15:49:10"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ValidateRetentionInputs"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ValidateRetentionInputs(Inputs,Outputs)
{
/*----------------------------------------------------------------------------------------------------------
Purpose: This function is created to form search spec for GRD and called from Webservice WF.
[PKHOT][CR:71178][13-9-2015]
------------------------------------------------------------------------------------------------------------*/
	var strMSISDN = &quot;&quot;;
	var arrMSISDN = &quot;&quot;;
	var strSearchSpec = &quot;&quot;;
	var sErrorCode = &quot;&quot;;
	var sErrorMessage = &quot;&quot;;
	var i = 0;
	var sBC,sBO;
	var sMSISDN = &quot;&quot;;
	var sFoundFlg = &quot;N&quot;;
	var sAccSerSpec = &quot;&quot;;
	var sPromSerSpec = &quot;&quot;;
	var sIntSerSpec = &quot;&quot;;
	var sAccId = &quot;&quot;;
	var sPromId = &quot;&quot;;
	var sCount = 0;
	//var sIntId = &quot;&quot;;
	var pat = /,/g;
	//var sChorProdLine = &quot;&quot;;
	var sChorSwitch = &quot;&quot;;
	var newStrSearch = &quot;&quot;;
	var arrMSISDNNew = &quot;&quot;;
	try
	{
		strMSISDN = Inputs.GetProperty(&quot;ListOfMSISDN&quot;);
		if(strMSISDN == &quot;&quot; || strMSISDN == null)
		{
			Outputs.SetProperty(&quot;Error Code&quot;,&quot;SBL_CUSTOM_1&quot;);	
			Outputs.SetProperty(&quot;Error Message&quot;,&quot;Mandatory Fields are not provided in input&quot;);
			return(CancelOperation);
		}
		//to remove duplicates in input string
		arrMSISDN = strMSISDN.split(&quot;,&quot;);//--
		for(i = 0;i&lt;arrMSISDN.length;i++)
		{
			if(strSearchSpec.indexOf(arrMSISDN[i])&lt;0)
			{
				strSearchSpec = strSearchSpec + &quot;,&quot; + arrMSISDN[i];
			}	
		}
		strSearchSpec = strSearchSpec.substring(1,strSearchSpec.length);
		arrMSISDNNew = strSearchSpec.split(&quot;,&quot;);
	
		strSearchSpec = strMSISDN.replace(pat,&quot;&apos; OR [Serial Number] = &apos;&quot;);
		strSearchSpec = &quot;([Serial Number] = &apos;&quot; + strSearchSpec + &quot;&apos;) AND [Status] = &apos;Active&apos;&quot;;//[R15.3- 29/2/16][QC-66755][Added Status serach spec]
		sBO = TheApplication().GetBusObject(&quot;VF Retention BO&quot;);
		sBC = sBO.GetBusComp(&quot;VF Retention Asset Mgmt - Asset&quot;);
		with(sBC)
		{
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(&quot;Serial Number&quot;);
			ActivateField(&quot;Owner Account Id&quot;);
			ActivateField(&quot;Prod Prom Instance Id&quot;);
			SetSearchExpr(strSearchSpec);
			ExecuteQuery();
			sCount = CountRecords();
			if(sCount != (arrMSISDNNew.length))
			{
				Outputs.SetProperty(&quot;Error Code&quot;,&quot;SBL_CUSTOM_2&quot;);	
				Outputs.SetProperty(&quot;Error Message&quot;,&quot;Invalid Input Installed Id(s)&quot;);
				return(CancelOperation);
			}
			var isRec = FirstRecord();
			while(isRec)
			{
				//sFoundFlg = &quot;N&quot;;
				//sMSISDN = GetFieldValue(&quot;Serial Number&quot;);
				/*for(i= 0;i&lt;arrMSISDN.length;i++)
				{
					if(sMSISDN == arrMSISDN[i])
					{
						sFoundFlg = &quot;Y&quot;;
					}
				}
				if(sFoundFlg == &quot;N&quot;)
				{
					Outputs.SetProperty(&quot;Error Code&quot;,&quot;SBL_CUSTOM_2&quot;);	
					Outputs.SetProperty(&quot;Error Message&quot;,&quot;Invalid Input Installed Id(s)&quot;);
					return(CancelOperation);
				}*/
				sAccId  = GetFieldValue(&quot;Owner Account Id&quot;);
				sPromId = GetFieldValue(&quot;Prod Prom Instance Id&quot;);
				
				if(sAccId != &quot;&quot;)
					sAccSerSpec = sAccSerSpec + &quot;,&quot; + sAccId;
					
				if(sPromId != &quot;&quot;)
				{
					sPromSerSpec = sPromSerSpec + &quot;,&quot; + sPromId;
					sIntSerSpec = sIntSerSpec + &quot;,&quot; + sPromId;
				}
				isRec = NextRecord();
			}//end while				
		}//end with
		sAccSerSpec = sAccSerSpec.substring(1,sAccSerSpec.length);
		sPromSerSpec = sPromSerSpec.substring(1,sPromSerSpec.length);
		sIntSerSpec = sIntSerSpec.substring(1,sIntSerSpec.length);
		
		sAccSerSpec = sAccSerSpec.replace(pat,&quot;&apos; OR [Account.Row Id] = &apos;&quot;);
		sAccSerSpec = &quot;([Account.Row Id] = &apos;&quot; + sAccSerSpec + &quot;&apos;)&quot;;
		
		sPromSerSpec = sPromSerSpec.replace(pat,&quot;&apos; OR [Header.Prod Prom Instance Id] = &apos;&quot;);
		sPromSerSpec = &quot;([Header.Prod Prom Instance Id] = &apos;&quot; + sPromSerSpec + &quot;&apos;)&quot;;
		
		sIntSerSpec = sIntSerSpec.replace(pat,&quot;&apos; OR [Header.Integration Id] = &apos;&quot;);
		sIntSerSpec = &quot;([Header.Integration Id] = &apos;&quot; + sIntSerSpec + &quot;&apos;)&quot;;		
		
		sChorSwitch = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_CHORDIANT_SWITCH&quot;, &quot;Chordiant&quot;);
		if(sChorSwitch == &quot;Y&quot;)
		{
			strSearchSpec = &quot;(&quot; + sAccSerSpec +&quot; AND (&quot; + sPromSerSpec + &quot; OR &quot; + sIntSerSpec + &quot;) AND ([Asset.CalcProdLine] = &apos;Y&apos;))&quot;;
		}
		else
		{
			strSearchSpec = &quot;(&quot; + sAccSerSpec +&quot; AND (&quot; + sPromSerSpec + &quot; OR &quot; + sIntSerSpec + &quot;))&quot;;
		}
		
		Outputs.SetProperty(&quot;StrSearchSpec&quot;,strSearchSpec);
		
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		sBC = null;
		sBO = null;
	}
}"
			   SEQUENCE="128"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="12/11/2015 15:44:32"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ValidateRule"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ValidateRule(Inputs,Outputs)
{
	try
	{
		var sBC = TheApplication().ActiveBusObject().GetBusComp(&quot;Asset Mgmt - Asset (Order Mgmt)&quot;);
		var Rec = sBC.FirstSelected();
		var partNum = &quot;&quot;;
		var Rule = Inputs.GetProperty(&quot;Rule&quot;);
		var Method = Inputs.GetProperty(&quot;Method&quot;);
		var CountHand = 0;
		var OrderIdHand = &quot;&quot;;
		var OrderIdHandNext = &quot;&quot;;
		var OrderIdProd = &quot;&quot;;
		var OrderIdProdNext = &quot;&quot;;
		var CountProd = 0;
		var ProdType = &quot;&quot;;
		var Order = true;
		var Message = false;
		var checkToRet = 0;
		var OrdOrgId = &quot;&quot;;
		var OrderId = &quot;&quot;;
		var prodType = &quot;&quot;;
		
		if (Method == &quot;Non Like for Like&quot;)
		{
			while (Rec)
			{
				partNum = sBC.GetFieldValue(&quot;Product Part Number&quot;);
				checkToRet =  sBC.GetFieldValue(&quot;VF Check Date Return&quot;);
				ProdType = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_PART_NUMBERS&quot;, partNum);
				if (ToNumber(Rule) &lt;= ToNumber(checkToRet))
					Message = true;
				if (ProdType == &quot;HANDSET&quot;)
				{
					CountHand++;
					if (CountHand == 1)
						OrderIdHand = sBC.GetFieldValue(&quot;Original Order Id&quot;);
					else
					{
						OrderIdHandNext = sBC.GetFieldValue(&quot;Original Order Id&quot;);
						if (OrderIdHand != OrderIdHandNext)
							TheApplication().RaiseErrorText(&quot;The selected items are not part of the same original order.&quot;);
					}
				}
				//else
				if (ProdType != &quot;HANDSET&quot;)
				{
					CountProd ++;
					if (CountProd == 1)
						OrderIdProd = sBC.GetFieldValue(&quot;Original Order Id&quot;);
					else
					{
						OrderIdProdNext = sBC.GetFieldValue(&quot;Original Order Id&quot;);
						if (OrderIdProd != OrderIdProdNext)
							Order = false;	
					}	
				}
				Rec = sBC.NextSelected();				
			}
			Rec = sBC.FirstSelected();
			if (CountHand == 0 &amp;&amp; !Order)
				TheApplication().RaiseErrorText(&quot;The selected items are not part of the same original order.&quot;);
			if (OrderIdHand != &quot;&quot; &amp;&amp; OrderIdHand != null)
				TheApplication().SetProfileAttr(&quot;VF_OrigOrder_ID&quot;, OrderIdHand);
			else
				TheApplication().SetProfileAttr(&quot;VF_OrigOrder_ID&quot;, OrderIdProd);
			Outputs.SetProperty(&quot;ShowMess&quot;, Message);
		}
		
		if (Method == &quot;Return&quot;)
		{
			OrdOrgId = sBC.GetFieldValue(&quot;Original Order Id&quot;);
			while (Rec)
			{
				OrderId = sBC.GetFieldValue(&quot;Original Order Id&quot;);
				checkToRet =  sBC.GetFieldValue(&quot;VF Check Date Return&quot;);
				if (OrdOrgId != OrderId)
					TheApplication().RaiseErrorText(&quot;You have selected assets related to different orders.&quot;);
				if (ToNumber(Rule) &lt;= ToNumber(checkToRet))
					Message = true;
				Rec = sBC.NextSelected();	
			}
			Rec = sBC.FirstSelected();
			Outputs.SetProperty(&quot;ShowMess&quot;, Message);
		}

		if (Method == &quot;Like for Like&quot;)
		{
			OrdOrgId = sBC.GetFieldValue(&quot;Original Order Id&quot;);
			while (Rec)
			{
				OrderId = sBC.GetFieldValue(&quot;Original Order Id&quot;);
				checkToRet =  sBC.GetFieldValue(&quot;VF Check Date Return&quot;);
				prodType = sBC.GetFieldValue(&quot;Product Type&quot;);
				if (OrdOrgId != OrderId)
					TheApplication().RaiseErrorText(&quot;You have selected assets related to different orders.&quot;);	
				if (ToNumber(Rule) &lt;= ToNumber(checkToRet))
					Message = true;
				if (prodType == &quot;Promotion&quot;)
					TheApplication().RaiseErrorText(&quot;Please, don&apos;t select promotion.&quot;);
				Rec = sBC.NextSelected();	
			}		
			Rec = sBC.FirstSelected();
			TheApplication().SetProfileAttr(&quot;NewOrderForExchange&quot;, &quot;&quot;);	
			TheApplication().SetProfileAttr(&quot;LikeForLikeExchange&quot;, &quot;Y&quot;);
			Outputs.SetProperty(&quot;ShowMess&quot;, Message);
		}
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
	
	}
}"
			   SEQUENCE="129"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="05/03/2013 19:50:17"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ValidateRuleBulk"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ValidateRuleBulk(Inputs,Outputs)
{
	try
	{
		var Rule = Inputs.GetProperty(&quot;Rule&quot;);
		var Method = Inputs.GetProperty(&quot;Method&quot;);
		var AccountId = Inputs.GetProperty (&quot;Account Id&quot;);
		var Message = false;		
		var BO = TheApplication().GetBusObject(&quot;VF_UK_BO_NoLink&quot;);
		var BCAsset = BO.GetBusComp(&quot;Asset Mgmt - Asset (Order Mgmt)&quot;);
		var checkToRet = &quot;&quot;;
		var count = 0;
		
		with (BCAsset)
		{
			ActivateField(&quot;VF Check Date Return&quot;);
			SetViewMode(AllView);
			ClearToQuery();
			SetSearchSpec(&quot;Root Asset Service Account Id&quot;, &quot;&apos;&quot; + AccountId + &quot;&apos;&quot;);
			SetSearchSpec(&quot;VF Selected Asset&quot;, &quot;Y&quot;);
			SetSearchSpec(&quot;Status&quot;, &quot;Active&quot;);
			ExecuteQuery(ForwardBackward);
			var isRecord = FirstRecord();
			while(isRecord)
			{
				checkToRet =  GetFieldValue(&quot;VF Check Date Return&quot;);
				if (ToNumber(Rule) &lt;= ToNumber(checkToRet))
				{
					Message = true;
					Outputs.SetProperty(&quot;ShowMess&quot;, Message);
					count++;
				}
				isRecord = NextRecord();
			}
		}
		Outputs.SetProperty(&quot;ShowMess&quot;, Message);
		Outputs.SetProperty(&quot;Count&quot;, count);
		
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
	
	}
}"
			   SEQUENCE="130"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="10/29/2014 14:26:13"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="WriteMonitoring"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function WriteMonitoring (Inputs, Outputs)
{
	try{
		var sBusCompName = Inputs.GetProperty(&quot;BusCompName&quot;);
		var sId = Inputs.GetProperty(&quot;BusinessId&quot;);
		var oboLOV = TheApplication().GetBusObject(&quot;VF_UK_BO_NoLink&quot;);
		var obcLOV = oboLOV.GetBusComp(&quot;VF_Light_LOV_BC&quot;);
		var sboSKIP = TheApplication().GetBusObject(&quot;VF_SMS_CONF_BO&quot;);
		var sbcSKIP = sboSKIP.GetBusComp(&quot;VF_SMS_CONF_BC&quot;);
		var sQueryBO = TheApplication().GetBusObject(&quot;VF_UK_BO_NoLink&quot;);
		var sQueryBC = &quot;&quot;;
		
		var bRec = false, NoLRec = false, rec = false, skipRec = false;
		var sFieldName = &quot;&quot;;
		var sLogicalFieldName = &quot;&quot;;
		var sLogicalBusCompName = &quot;&quot;;
		var sFieldPrevVal  = &quot;&quot;;
		var sFieldNextVal  = &quot;&quot;;	
		var sCheckAnyUpdate = &quot;&quot;;
		var InPS = &quot;&quot;;
		var OutPS = &quot;&quot;;
		var InPS2 = &quot;&quot;; //Oracle Review Memory Leak Reallocation 17/07/2014
		var OutPS2 = &quot;&quot;; //Oracle Review Memory Leak Reallocation 17/07/2014
		var WFCallBS = TheApplication().GetService(&quot;Workflow Process Manager&quot;);
		var sToSend = &quot;Y&quot;;
		var sSkipFieldMonitoring = &quot;&quot;, vAccountType= &quot;&quot;, vBillingProfile =&quot;&quot;, vBcQuery= &quot;&quot;, vFieldList = &quot;&quot;;
		var sSkipBCMonitoring = &quot;&quot;, vBulk = &quot;&quot;, vPreA = &quot;&quot;, vCode = &quot;&quot;, vOrigin = &quot;&quot;;;
		var isAccount = false;
		var skipTrigger = &quot;N&quot;, searchst = &quot;&quot;;
		var noLinkBO, noLinkBC, noLinkChanBO,noLinkChanBC;
		var isBulk = TheApplication().GetProfileAttr(&quot;VF_SKIP_ORDER_DEFAULT&quot;);
		var isPreAct = TheApplication().GetProfileAttr(&quot;VF_SKIP_CREATE_IDENTITY&quot;);	
		var bulkDisabledLOV = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_GLOBAL_PARAMETER&quot;, &quot;NOTIFY_BULK_DISABLED&quot;);
		var preActDisabledLOV = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_GLOBAL_PARAMETER&quot;, &quot;NOTIFY_PREACT_DISABLED&quot;);
		var activeConfig = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_STATUS_CONFIG&quot;, &quot;Active&quot;);
		var inputQ  = TheApplication().NewPropertySet();
		var outputQ = TheApplication().NewPropertySet();
		var sBPid=&quot;&quot;, sBPMethod=&quot;&quot;,  sAccId = &quot;&quot;, sSMSLevelFlag = &quot;&quot;, sBillAcntid = &quot;&quot;, sSrvAccntId = &quot;&quot;;
		
		var obcAccount = oboLOV.GetBusComp(&quot;Account&quot;);
	    var obcBP  = oboLOV.GetBusComp(&quot;Com Invoice Profile&quot;);
		
		//Added to add skip Notification on Bulk and Preactivation Order - Order and Items only logic based on Profile Attribute Set.
		if(sLogicalBusCompName == &quot;Order Item&quot; || sLogicalBusCompName == &quot;Order&quot;){
			if (isBulk == &quot;Y&quot;)
				if(bulkDisabledLOV == &quot;Y&quot;){
					skipTrigger = &quot;Y&quot;;
					return(CancelOperation);
				}
			
			if (isPreAct == &quot;Y&quot;)
				if(preActDisabledLOV == &quot;Y&quot;){
					skipTrigger = &quot;Y&quot;;
					return(CancelOperation);
				}
		}
		
		//Query on MONITOR_FIELD
		with(obcLOV){
			ClearToQuery();
			ActivateField(&quot;Name&quot;);
			ActivateField(&quot;Value&quot;);
			ActivateField(&quot;Parent Value&quot;);
			ActivateField(&quot;VF_Attrib_01&quot;);
			ActivateField(&quot;VF_Attrib_02&quot;);
			ActivateField(&quot;VF_Parent_Attrib_02&quot;);
			SetViewMode(AllView);
			SetSearchSpec(&quot;Type&quot;, &quot;VF_MONITOR_FIELD&quot;);
			SetSearchSpec(&quot;Parent Name&quot;, &quot;&apos;&quot; + sBusCompName + &quot;&apos;&quot;);
			SetSearchSpec(&quot;Active&quot;, &quot;Y&quot;);
			ExecuteQuery(ForwardOnly);
			bRec = FirstRecord();
			while(bRec){
				skipTrigger = &quot;N&quot;;
				sFieldName = GetFieldValue(&quot;Name&quot;);
				sLogicalFieldName = GetFieldValue(&quot;Value&quot;);
				sFieldPrevVal = TheApplication().GetProfileAttr(&quot;VF_PrevVal_&quot; + sFieldName);
				sFieldNextVal = TheApplication().GetProfileAttr(&quot;VF_NextVal_&quot; + sFieldName);
				sLogicalBusCompName = GetFieldValue(&quot;Parent Value&quot;);
				sCheckAnyUpdate = GetFieldValue(&quot;VF_Attrib_01&quot;);
				sSkipFieldMonitoring = GetFieldValue(&quot;VF_Attrib_02&quot;);
				sSkipBCMonitoring = GetFieldValue(&quot;VF_Parent_Attrib_02&quot;);
				
				//Query to retrieve BP and Account Type  - WITH OUT CONTEXT QUERY OR FROM ACTUALT CONTEXT
				vBcQuery = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_QUERY_BC_NOTIFY&quot;,sLogicalBusCompName);
				
				inputQ.SetProperty(&quot;BusinessObject&quot;,&quot;VF_UK_BO_NoLink&quot;);
				inputQ.SetProperty(&quot;BusinessComponent&quot;,vBcQuery);
				inputQ.SetProperty(&quot;Id&quot;,sId);
			
				switch (sLogicalBusCompName){
					case &quot;Account&quot;:
												
						vFieldList = &quot;Type,VF Primary BP Method,Account Id&quot;;
						inputQ.SetProperty(&quot;ListaField&quot;,vFieldList);
						this.InvokeMethod(&quot;GenericQueryOnBC&quot;, inputQ, outputQ);
						//Field extraction
						vAccountType = outputQ.GetProperty(&quot;Type&quot;);
						vBillingProfile = outputQ.GetProperty(&quot;VF Primary BP Method&quot;);
						sAccId = outputQ.GetProperty(&quot;Account Id&quot;);
					break;
					
					
					case &quot;Service Request&quot;:
					
						vFieldList = &quot;Type,VF Primary BP Method,Account Id&quot;;
						inputQ.SetProperty(&quot;ListaField&quot;,vFieldList);
						this.InvokeMethod(&quot;GenericQueryOnBC&quot;, inputQ, outputQ);
						//Field extraction
						vAccountType = outputQ.GetProperty(&quot;Type&quot;);
						vBillingProfile = outputQ.GetProperty(&quot;VF Primary BP Method&quot;);
						sAccId = outputQ.GetProperty(&quot;Account Id&quot;);
					break;
					
					
					case &quot;Customer Comm&quot;:
					
						vFieldList = &quot;VF Account Type,VF Primary BP Method,Account Id&quot;;
						inputQ.SetProperty(&quot;ListaField&quot;,vFieldList);
						this.InvokeMethod(&quot;GenericQueryOnBC&quot;, inputQ, outputQ);
						//Field extraction
						vAccountType = outputQ.GetProperty(&quot;VF Account Type&quot;);
						vBillingProfile = outputQ.GetProperty(&quot;VF Primary BP Method&quot;);
						sAccId = outputQ.GetProperty(&quot;Account Id&quot;);
					break;
					
					
					case &quot;Billing Profile&quot;:
					
						vFieldList = &quot;VF Account Type,VF Payment Type,Account Id&quot;;
						inputQ.SetProperty(&quot;ListaField&quot;,vFieldList);
						this.InvokeMethod(&quot;GenericQueryOnBC&quot;, inputQ, outputQ);
						//Field extraction
						vAccountType = outputQ.GetProperty(&quot;VF Account Type&quot;);
						vBillingProfile = outputQ.GetProperty(&quot;VF Payment Type&quot;);
						sAccId = outputQ.GetProperty(&quot;Account Id&quot;);
					break;
					
					
					case &quot;Order Item&quot;:
					
						vFieldList = &quot;Billing Account Id,Service Account Id,Account Id,VF Account Type,Payment Type,VF_BulkOrder,Action Code,VF Preact Order flag,VF Order Origin&quot;;
						inputQ.SetProperty(&quot;ListaField&quot;,vFieldList);
						this.InvokeMethod(&quot;GenericQueryOnBC&quot;, inputQ, outputQ);
						//Field extraction
						vAccountType = outputQ.GetProperty(&quot;VF Account Type&quot;);
						vBillingProfile = outputQ.GetProperty(&quot;Payment Type&quot;);
						vBulk = outputQ.GetProperty(&quot;VF_BulkOrder&quot;);
						vPreA = outputQ.GetProperty(&quot;VF Preact Order flag&quot;);
						vCode = outputQ.GetProperty(&quot;Action Code&quot;);
						vOrigin = outputQ.GetProperty(&quot;VF Order Origin&quot;);
						sAccId = outputQ.GetProperty(&quot;Account Id&quot;);
						sBillAcntid = outputQ.GetProperty(&quot;Billing Account Id&quot;);
						sSrvAccntId = outputQ.GetProperty(&quot;Service Account Id&quot;);
						
						//Skip Notification on Bulk and Pre-activation Order
						if (vBulk == &quot;Y&quot;){
							if(bulkDisabledLOV == &quot;Y&quot;){
								skipTrigger = &quot;Y&quot;;
								TheApplication().SetProfileAttr(&quot;VF_PrevVal_&quot; + sFieldName, &quot;&quot;);
								TheApplication().SetProfileAttr(&quot;VF_NextVal_&quot; + sFieldName, &quot;&quot;);
								return(CancelOperation);
							}
						}
						if (vPreA == &quot;Y&quot;){
							if(preActDisabledLOV == &quot;Y&quot;){
								skipTrigger = &quot;Y&quot;;
								TheApplication().SetProfileAttr(&quot;VF_PrevVal_&quot; + sFieldName, &quot;&quot;);
								TheApplication().SetProfileAttr(&quot;VF_NextVal_&quot; + sFieldName, &quot;&quot;);
								return(CancelOperation);
							}
						}
						//Skip statement based on Channel
						skipTrigger = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;NOTIFY_CHANNEL_DISABLED&quot;, vOrigin);
						if (skipTrigger == &quot;Y&quot;){
							TheApplication().SetProfileAttr(&quot;VF_PrevVal_&quot; + sFieldName, &quot;&quot;);
							TheApplication().SetProfileAttr(&quot;VF_NextVal_&quot; + sFieldName, &quot;&quot;);
							return(CancelOperation);
						}					
						//Skip statement based on LOV blacklist Action code
						skipTrigger = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_MONITOR_SKIP_ACTION&quot;, vCode);
						if (skipTrigger == &quot;Y&quot;){
							TheApplication().SetProfileAttr(&quot;VF_PrevVal_&quot; + sFieldName, &quot;&quot;);
							TheApplication().SetProfileAttr(&quot;VF_NextVal_&quot; + sFieldName, &quot;&quot;);
							return(CancelOperation);
						}
					break;								
					
					
					case &quot;Order&quot;:
					
						vFieldList = &quot;Billing Account Id,Service Account Id,Account Id,VF Account Type,VF_Bill_Profile_Payment_Type,VF_BulkOrder,VF Preact Order flag,VF Origin&quot;;
						inputQ.SetProperty(&quot;ListaField&quot;,vFieldList);
						this.InvokeMethod(&quot;GenericQueryOnBC&quot;, inputQ, outputQ);
						//Field extraction
						vAccountType = outputQ.GetProperty(&quot;VF Account Type&quot;);
						vBillingProfile = outputQ.GetProperty(&quot;VF_Bill_Profile_Payment_Type&quot;);
						vBulk = outputQ.GetProperty(&quot;VF_BulkOrder&quot;);
						vPreA = outputQ.GetProperty(&quot;VF Preact Order flag&quot;);
						vOrigin = outputQ.GetProperty(&quot;VF Origin&quot;);
						sAccId = outputQ.GetProperty(&quot;Account Id&quot;);
						sBillAcntid = outputQ.GetProperty(&quot;Billing Account Id&quot;);
						sSrvAccntId = outputQ.GetProperty(&quot;Service Account Id&quot;);
						
						//Skip Notification on Bulk and Pre-activation Order
						if (vBulk == &quot;Y&quot;){
							if(bulkDisabledLOV == &quot;Y&quot;){
								skipTrigger = &quot;Y&quot;;
								TheApplication().SetProfileAttr(&quot;VF_PrevVal_&quot; + sFieldName, &quot;&quot;);
								TheApplication().SetProfileAttr(&quot;VF_NextVal_&quot; + sFieldName, &quot;&quot;);
								return(CancelOperation);
							}
						}
						if (vPreA == &quot;Y&quot;){
							if(preActDisabledLOV == &quot;Y&quot;){
								skipTrigger = &quot;Y&quot;;
								TheApplication().SetProfileAttr(&quot;VF_PrevVal_&quot; + sFieldName, &quot;&quot;);
								TheApplication().SetProfileAttr(&quot;VF_NextVal_&quot; + sFieldName, &quot;&quot;);
								return(CancelOperation);
							}
						}
						//Skip statement based on Channel
						skipTrigger = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;NOTIFY_CHANNEL_DISABLED&quot;, vOrigin);
						if (skipTrigger == &quot;Y&quot;){
							TheApplication().SetProfileAttr(&quot;VF_PrevVal_&quot; + sFieldName, &quot;&quot;);
							TheApplication().SetProfileAttr(&quot;VF_NextVal_&quot; + sFieldName, &quot;&quot;);
							return(CancelOperation);
						}
					break;						
											
					
					
					/*case &quot;Quote&quot;:{
					
					}
			*/
					case &quot;Contact&quot;:
					/*	vFieldList = &quot;Type,VF Primary BP Method&quot;;
						inputQ.SetProperty(&quot;ListaField&quot;,vFieldList);
						this.InvokeMethod(&quot;GenericQueryOnBC&quot;, inputQ, outputQ);
						//Field extraction
						vAccountType = outputQ.GetProperty(&quot;Type&quot;);
						vBillingProfile = outputQ.GetProperty(&quot;VF Primary BP Method&quot;);*/
						
						
						with (obcAccount)
						{ 
							SetViewMode(3);
							ClearToQuery();
							ActivateField(&quot;Primary Contact Id&quot;);
							ActivateField(&quot;Primary Billing Profile Id&quot;);
							ActivateField(&quot;Type&quot;);
							SetSearchSpec(&quot;Primary Contact Id&quot;,sId);
							
							ExecuteQuery(ForwardOnly);
				
							var next = FirstRecord();
							
							if (next)
							{   vAccountType=GetFieldValue(&quot;Type&quot;);
								 sBPid = GetFieldValue(&quot;Id&quot;);
							//	if (sBPid != null &amp;&amp; sBPid != &quot;&quot; &amp;&amp; sBPid != &quot;No Match Row Id&quot;)
							//	{
								with (obcBP)
								{
										SetViewMode(3);
										ClearToQuery();
										ActivateField(&quot;Account Id&quot;);
										ActivateField(&quot;VF Payment Method&quot;);
										ActivateField(&quot;Payment Type&quot;);
										ActivateField(&quot;Created&quot;);
										SetSearchSpec(&quot;Account Id&quot;,sBPid);
										SetSortSpec(&quot;Created(DESCENDING)&quot;);
										ExecuteQuery(ForwardOnly);
							
										var nextBP = FirstRecord();
										
										if (nextBP)
										{
											 //vBillingProfile = GetFieldValue(&quot;VF Payment Method&quot;);
											 vBillingProfile = GetFieldValue(&quot;Payment Type&quot;);

										} 
								} 
							//	}
						
							} 
						} 
						
					break;		
					
					
										
					}
					
					//CR 44248
					if (sAccId != null &amp;&amp; sAccId != &quot;&quot; &amp;&amp; sAccId != &quot;No Match Row Id&quot;){
						
						inputQ.Reset();
						outputQ.Reset();	
						inputQ.SetProperty(&quot;BusinessObject&quot;,&quot;VF_UK_BO_NoLink&quot;);
						inputQ.SetProperty(&quot;BusinessComponent&quot;,&quot;Account&quot;);
						inputQ.SetProperty(&quot;Id&quot;,sAccId);
						inputQ.SetProperty(&quot;ListaField&quot;,&quot;VF SMS Level Flag&quot;);
						
						this.InvokeMethod(&quot;GenericQueryOnBC&quot;, inputQ, outputQ);
						sSMSLevelFlag = outputQ.GetProperty(&quot;VF SMS Level Flag&quot;);
						
						if (sSMSLevelFlag == &quot;Y&quot;)
                        	return(CancelOperation);				
				}	
						
				
				//Skip trigger write for non existing configuration
				
				with(sbcSKIP){
					ClearToQuery();
					ActivateField(&quot;BC&quot;);
					ActivateField(&quot;Field&quot;);
					ActivateField(&quot;Status&quot;);
					ActivateField(&quot;Next Val&quot;);
					ActivateField(&quot;Prev Val&quot;);
					SetViewMode(AllView);	
					searchst = &quot;[BC] = &apos;&quot; + sLogicalBusCompName + &quot;&apos; AND [Field] = &apos;&quot; + sLogicalFieldName + &quot;&apos; AND [Status] = &apos;&quot;+ activeConfig +&quot;&apos; AND ([Next Val] = &apos;&quot;+ sFieldNextVal +&quot;&apos; OR [Next Val] = &apos;ANY&apos;) AND ([Prev Val] = &apos;&quot;+ sFieldPrevVal +&quot;&apos; OR [Prev Val] = &apos;ANY&apos;)&quot;;
					// Filter ton BP and Acc Type
					searchst += &quot; AND ([AccountType] = &apos;&quot;+ vAccountType + &quot;&apos; OR [AccountType] IS NULL) AND ([BillingType] = &apos;&quot;+vBillingProfile+&quot;&apos; OR [BillingType] = &apos;Common&apos; OR [BillingType] IS NULL)&quot;;
					SetSearchExpr(searchst);
					ExecuteQuery(ForwardOnly);
					skipRec = FirstRecord();
					if(!skipRec)
						skipTrigger = &quot;Y&quot;;
				}
				
				if(!isAccount){
					if(sSkipBCMonitoring == &quot;Y&quot; &amp;&amp; sSkipFieldMonitoring == &quot;Y&quot; &amp;&amp; skipTrigger != &quot;Y&quot;){
	                   	try{
	                   		var PartNumber = TheApplication().ActiveBusObject().GetBusComp(sBusCompName).GetFieldValue(&quot;Part Number&quot;);
	                		sToSend = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_MONITORED_PROD&quot;, PartNumber);
	                	}
	                	
	                }					
					if(sToSend == &quot;Y&quot; &amp;&amp; skipTrigger != &quot;Y&quot;){			
						if(sFieldPrevVal != &quot;&quot; || sFieldNextVal != &quot;&quot;){
						//	if(sFieldPrevVal != null || sFieldPrevVal != &quot;&quot; || sFieldNextVal != null || sFieldNextVal != &quot;&quot;){
							
							if(sLogicalBusCompName == &quot;Account&quot;){
								isAccount = true;
							}
							
							InPS = TheApplication().NewPropertySet(); 
							OutPS = TheApplication().NewPropertySet();
						//	WFCallBS = TheApplication().GetService(&quot;Workflow Process Manager&quot;); Oracle Review Memory Leak Reallocation 17/07/2014
							InPS.SetProperty(&quot;ProcessName&quot;,&quot;VF_Load_SMS_Table&quot;); 
							InPS.SetProperty(&quot;Business Id&quot;, sId); 
							InPS.SetProperty(&quot;BusComp&quot;, sLogicalBusCompName); 
							InPS.SetProperty(&quot;Next Value&quot;, sFieldNextVal);
							InPS.SetProperty(&quot;Previous Value&quot;, sFieldPrevVal);
							InPS.SetProperty(&quot;Field&quot;, sLogicalFieldName);
							InPS.SetProperty(&quot;AccountType&quot;, vAccountType);
							InPS.SetProperty(&quot;BillingType&quot;, vBillingProfile);
							InPS.SetProperty(&quot;Account Id&quot;, sAccId);
							InPS.SetProperty(&quot;Service Account Id&quot;, sSrvAccntId);
							InPS.SetProperty(&quot;Billing Account Id&quot;, sBillAcntid);														
							//InPS.SetProperty(&quot;Object Id&quot;, sId);
							WFCallBS.InvokeMethod(&quot;RunProcess&quot;,InPS,OutPS);		
							
						}else{
							
							if(sLogicalBusCompName == &quot;Account&quot;){
								isAccount = true;
							}
		
		    				if(sCheckAnyUpdate == &quot;Y&quot;){
				
								InPS2 = TheApplication().NewPropertySet(); // Oracle Review Memory Leak Reallocation 17/07/2014
								OutPS2 = TheApplication().NewPropertySet(); // Oracle Review Memory Leak Reallocation 17/07/2014
						//		WFCallBS = TheApplication().GetService(&quot;Workflow Process Manager&quot;); Oracle Review Memory Leak Reallocation 17/07/2014
								InPS2.SetProperty(&quot;ProcessName&quot;,&quot;VF_Load_SMS_Table&quot;); 
								InPS2.SetProperty(&quot;Business Id&quot;, sId); 
								InPS2.SetProperty(&quot;BusComp&quot;, sLogicalBusCompName);  
								InPS2.SetProperty(&quot;Next Value&quot;, &quot;&quot;);
								InPS2.SetProperty(&quot;Previous Value&quot;, &quot;&quot;);
								InPS2.SetProperty(&quot;Field&quot;, &quot;&quot;);
								WFCallBS.InvokeMethod(&quot;RunProcess&quot;,InPS2,OutPS2);                                                                                     
		   					 }
		
						}//Close else
					}
				
				}
				
				TheApplication().SetProfileAttr(&quot;VF_PrevVal_&quot; + sFieldName, &quot;&quot;);
				TheApplication().SetProfileAttr(&quot;VF_NextVal_&quot; + sFieldName, &quot;&quot;);
				
				bRec = NextRecord();
			}
		}
		
	}catch(e){
		var text  = e.toString();
	}finally{
	TheApplication().SetProfileAttr(&quot;VF_PrevVal_&quot; + sFieldName, &quot;&quot;);
	TheApplication().SetProfileAttr(&quot;VF_NextVal_&quot; + sFieldName, &quot;&quot;);
	inputQ = null;
	outputQ = null;	
	InPS = null;
	OutPS = null;
	WFCallBS = null;
	sbcSKIP = null;
	sboSKIP = null;
	obcLOV = null;
	oboLOV = null;
	noLinkBC = null;
	noLinkBO = null;
	noLinkChanBC = null;
	noLinkChanBO = null;
	sQueryBC = null;
	sQueryBO = null;
	obcBP = null;
	obcAccount = null;

	}
}"
			   SEQUENCE="132"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="02/06/2012 20:23:25"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="WriteRequest"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="/*function RemoveEmptyTag(Inputs,Outputs)
{
	try {   
		var SM=Inputs.GetChild(0);
		var SM2=FindChild(SM,&quot;Target&quot;,&quot;N&quot;);
		SM2.RemoveProperty(&quot;OverrideRoutingIndicator&quot;);
		Outputs.AddChild(SM);
	}
	
	catch (e) {
		throw(e);
	}
	finally {
		
	}
}*/

function WriteRequest (Inputs, Outputs)
{
	try
	{                     
         var xmlService;
         var oOut = TheApplication().NewPropertySet();
         var oInp = TheApplication().NewPropertySet();

         //------------------------------------------------------ Write To File
      	 xmlService = TheApplication().GetService(&quot;EAI XML Write to File&quot;);
         oInp=Inputs.Copy();
         oInp.SetProperty (&quot;FileName&quot;, &quot;RMTest.xml&quot;);
         xmlService.InvokeMethod(&quot;WritePropSet&quot;, oInp, oOut);
         //----------------------------------------------------------------------

         Outputs.SetProperty(&quot;Binding&quot;,&quot;SOAP_RPC_LITERAL&quot;);
         Outputs.SetProperty(&quot;Direction&quot;,&quot;Request&quot;);
         Outputs.SetProperty(&quot;WebServiceType&quot;,&quot;Outbound&quot;);

         var QueryStockEBM=oInp.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(0);
	     oInp.GetChild(0).GetChild(0).RemoveChild(0);
	     oInp.GetChild(0).GetChild(0).AddChild(QueryStockEBM);
         Outputs.SetProperty(&quot;Binding&quot;,&quot;SOAP_RPC_LITERAL&quot;);
         Outputs.SetProperty(&quot;Direction&quot;,&quot;Request&quot;);
         Outputs.SetProperty(&quot;WebServiceType&quot;,&quot;Outbound&quot;);
         Outputs.InsertChildAt(oInp.GetChild(0), 0);
        
         oInp=Outputs.Copy();
         oInp.SetProperty (&quot;FileName&quot;, &quot;RMTest_out.xml&quot;);
         xmlService.InvokeMethod(&quot;WritePropSet&quot;, oInp, oOut);
 	     return (CancelOperation);
	}

	finally{
		oOut = null;
		oInp = null;
		xmlService = null;
		QueryStockEBM=null;

	}
}"
			   SEQUENCE="133"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="09/02/2011 12:08:34"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="findOrderPending"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function findOrderPending(Inputs, Outputs)
{
	try
	{
		var Asset_id 		= Inputs.GetProperty(&quot;AssetId&quot;);
		var status 			= Inputs.GetProperty(&quot;status&quot;);
		var methodName		= Inputs.GetProperty(&quot;MethodName&quot;);
		if (status == &quot;&quot; || status == null)
		{
			status = &quot;Pending&quot;;
		}
		var boAccount 		= TheApplication().GetBusObject(&quot;Account&quot;);
		var bcAsset 		= boAccount.GetBusComp(&quot;Asset Mgmt - Asset (Order Mgmt)&quot;);
		var Bo	 			= TheApplication().GetBusObject(&quot;VF_UK_BO_NoLink&quot;);		
		var BcOli 			= Bo.GetBusComp(&quot;MACD Order Entry - Line Items&quot;);
		var boValidation 	= TheApplication().GetBusObject(&quot;FINS Validation History&quot;);
		var bcValidation 	= boValidation.GetBusComp(&quot;ISS Validation Message&quot;);
		status 				= TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;FS_ORDER_STATUS&quot;, status);
	
		var searchexpr		= null;
		var isRec			= null;
		var sCnt			= null;
		var sOrderId 		= null;
		var messageText		= null;
		var record			= null;
		var sOrdertoCancel 	= null;
		var sLastOrder		= null;
		
		with(bcAsset)
		{
			ClearToQuery();
			SetViewMode(AllView);
			ActivateField(&quot;Integration Id&quot;);
			ActivateField(&quot;IsPromotion&quot;);
			SetSearchSpec(&quot;Id&quot;, &quot;&apos;&quot; + Asset_id + &quot;&apos;&quot;);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				var IntegrationId 	= GetFieldValue(&quot;Integration Id&quot;);
				var IsPromotion  	= GetFieldValue(&quot;IsPromotion&quot;);
			}		
		}		

		with(BcOli)
		{
			if (IsPromotion==&quot;Y&quot;)
			{ 
				ClearToQuery();
				ActivateField(&quot;Order Header Id&quot;);
				ActivateField(&quot;Asset Integration Id&quot;);
				ActivateField(&quot;AEC Root Prod Prom Instance Id&quot;);
				ActivateField(&quot;Status&quot;);
				ActivateField(&quot;Order Active Flag&quot;);
				SetViewMode(AllView);
				searchexpr = &quot;[Asset Integration Id] = &apos;&quot; + IntegrationId + &quot;&apos; AND [Status] = &apos;&quot; + status + &quot;&apos; AND [Order Active Flag] = &apos;Y&apos;&quot;;			
				SetSearchExpr(searchexpr);
				SetSortSpec(&quot;Order Header Id(ASCENDING)&quot;);
				ExecuteQuery(ForwardOnly);	
				isRec = FirstRecord();
				if (!isRec)
				{
					ClearToQuery();
					SetViewMode(AllView);
					//searchexpr = &quot;[AEC Root Prod Prom Instance Id] = &apos;&quot; + IntegrationId + &quot;&apos; AND [Status] = &apos;&quot; + status + &quot;&apos;&quot;;
					searchexpr = &quot;[AEC Root Prod Prom Instance Id] = &apos;&quot; + IntegrationId + &quot;&apos; AND [Status] = &apos;&quot; + status + &quot;&apos; AND LookupValue(&apos;VF_PART_NUMBERS&apos;, [Part Number]) &lt;&gt; &apos;FIXED_SERVICE&apos;&quot;;
					SetSearchExpr(searchexpr);
					SetSortSpec(&quot;Order Header Id(ASCENDING)&quot;);
					ExecuteQuery(ForwardOnly);
					isRec = FirstRecord();
				}
			}
			else
			{			
				ClearToQuery();
				ActivateField(&quot;Order Header Id&quot;);
				ActivateField(&quot;Asset Integration Id&quot;);
				ActivateField(&quot;AEC Root Prod Prom Instance Id&quot;);
				ActivateField(&quot;Status&quot;);
				SetViewMode(AllView);
				SetSearchSpec(&quot;Asset Integration Id&quot;, &quot;&apos;&quot; + IntegrationId + &quot;&apos;&quot;);
				SetSearchSpec(&quot;Status&quot;, &quot;&apos;&quot; + status + &quot;&apos;&quot;);
				SetSearchSpec(&quot;Order Active Flag&quot;, &quot;Y&quot;);
				SetSortSpec(&quot;Order Header Id(ASCENDING)&quot;);
				ExecuteQuery(ForwardOnly);
				isRec = FirstRecord();
			}

			if (isRec)
			{	
				Outputs.SetProperty(&quot;Result&quot;, &quot;OK&quot;);							
				sCnt = 0;
				with(bcValidation)
				{
					ClearToQuery();
					SetViewMode(AllView);
					ActivateField(&quot;Message Code&quot;);
					ActivateField(&quot;Message Text&quot;);
					if (methodName == &quot;DisconnectProdSvc&quot;)
					{
						SetSearchSpec(&quot;Message Code&quot;, &quot;VF_CHECK_ORDERS&quot;);
					}
					else
					{
						SetSearchSpec(&quot;Message Code&quot;, &quot;VF_CHECK_ORDER_PENDING&quot;);
					}
					ExecuteQuery(ForwardOnly);
					record = FirstRecord();
					if(record)
					{
						messageText = GetFieldValue(&quot;Message Text&quot;);
						Outputs.SetProperty(&quot;MessageText&quot;, messageText);
					}
				}
				
				if (methodName != &quot;DisconnectProdSvc&quot;)
				{
					while (isRec)
					{
						sOrderId = GetFieldValue(&quot;Order Header Id&quot;);	
						
						if(sCnt == 0)
						{
							sOrdertoCancel 	= sOrderId;
							sLastOrder		= sOrderId;
							sCnt++;
						}
						else
						{
							if(sLastOrder != sOrderId)
							{
								sOrdertoCancel 	= sOrdertoCancel + &quot;,&quot; + sOrderId;
								sLastOrder		= sOrderId;
							}	
						}
						isRec = NextRecord();				
						
					} // end while (isRec)
					
					Outputs.SetProperty(&quot;OrdertoCancel&quot;, sOrdertoCancel);
					
				} // end if (methodName != &quot;DisconnectProdSvc&quot;)
			}
			else
			{
				Outputs.SetProperty(&quot;Result&quot;, &quot;KO&quot;);
			}
		}
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		bcAsset			= null;
		bcValidation	= null;
		BcOli			= null;
		boAccount		= null;
		Bo				= null;
		boValidation	= null;
	}			
}"
			   SEQUENCE="50"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="01/09/2013 07:31:16"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="formatToSiebelDate"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="// formats the date from YYYY-MM-DD+hh:mm to MM/GG/AAAA hh:mm:ss
function formatToSiebelDate(Inputs,Outputs){
	try{  
		var data = 	Inputs.GetProperty(&quot;data&quot;);
		if(	data != &quot;&quot;){
			var y = (data.substring(0,4));
	  		var m = (data.substring(5,7));
	  		var d = (data.substring(8,10));
	  	
	  		var time = (data.substring(11,16));
	  		data = m+&quot;/&quot;+d+&quot;/&quot;+y+&quot; &quot;+time ;   
	  	}	
	  	Outputs.SetProperty(&quot;data&quot;,data);	
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
	}
}"
			   SEQUENCE="60"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="08/30/2011 11:12:05"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="isRecurring"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function isRecurring(portNum)
{
	var isRecurringProd = true;
	var LovVal = TheApplication().InvokeMethod(&quot;LookUpValue&quot;,&quot;VF_NEXT_MONTH_ATTRIB&quot;,portNum);
	if (LovVal == &quot;&quot; || LovVal == null || LovVal == portNum)
	{
		isRecurringProd = false;
	}
	return isRecurringProd;
}"
			   SEQUENCE="84"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="09/06/2013 10:32:40"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="replaceString"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function replaceString(Inputs, Outputs)
{
	try
	{
		var stringa  = Inputs.GetProperty(&quot;String&quot;);
		var pat = /(SiebelMessageMessageId)/g;
		stringa = stringa.replace(pat, &quot;SiebelMessage MessageId&quot;);
		Outputs.SetProperty(&quot;String&quot;, stringa);
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		stringa = null;
		pat = null;
	}
}"
			   SEQUENCE="97"
			   UPDATED="11/08/2016 06:04:17"
			   UPDATED_BY="ACN_SENGARR"
			   CREATED="04/23/2012 17:27:50"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
		</BUSINESS_SERVICE>
	</PROJECT>
</REPOSITORY>



